// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow helpers getDragStyle should return style object for drag selection box 1`] = `
Object {
  "height": 211,
  "left": 270,
  "top": 91,
  "width": 230,
}
`;

exports[`Flow helpers getGhostUI should return only the position of the ghost node if it does not have a router 1`] = `
Object {
  "position": Object {
    "left": -1000,
    "top": -1000,
  },
}
`;

exports[`Flow helpers getGhostUI should return the position and type of the ghost node if it has a router 1`] = `
Object {
  "position": Object {
    "left": -1000,
    "top": -1000,
  },
  "type": "wait_for_response",
}
`;

exports[`Flow render should render NodeEditor 1`] = `
<React.Fragment>
  <Connect(NodeEditor)
    plumberConnectExit={[MockFunction]}
    plumberRepaintForDuration={[MockFunction]}
  />
  <div
    className="nodeList"
    data-spec="node-container"
    id="generated_uuid_10"
    onDoubleClick={[Function]}
    onMouseDown={[Function]}
    onMouseMove={[Function]}
    onMouseUp={[Function]}
  >
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="24afc61e-e528-4ac0-b887-78cebd39f12b"
      node={
        Object {
          "actions": Array [
            Object {
              "text": "Hi there, what is your name?",
              "type": "send_msg",
              "uuid": "360a28a1-6741-4f16-9421-f6f313cf753e",
            },
            Object {
              "groups": Array [
                Object {
                  "name": "Unsatisfied Customers",
                  "uuid": "2429d573-80d7-47f8-879f-f2ba442a1bfd",
                },
              ],
              "type": "add_contact_groups",
              "uuid": "d5293394-c6d4-407c-97da-8149faea24cf",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
              "name": null,
              "uuid": "445fc64c-2a18-47cc-89d0-15172826bfcc",
            },
          ],
          "uuid": "24afc61e-e528-4ac0-b887-78cebd39f12b",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 0,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="d642b014-3c91-418f-ad5b-0fb4f8c5ee60"
      node={
        Object {
          "actions": Array [],
          "exits": Array [
            Object {
              "destination_node_uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
              "name": "All Responses",
              "uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
            },
          ],
          "router": Object {
            "cases": Array [],
            "default_exit_uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
            "operand": "@input",
            "result_name": "Name",
            "type": "switch",
          },
          "uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
          "wait": Object {
            "type": "msg",
          },
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 180,
          },
          "type": "wait_for_response",
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="7a19060d-6d93-4217-a4e5-9cbd479be051"
      node={
        Object {
          "actions": Array [
            Object {
              "property": "name",
              "type": "set_contact_property",
              "uuid": "505e8da9-0b73-4cf4-84a7-ce2a58d70f3e",
              "value": "@run.results.name",
            },
            Object {
              "text": "Thanks @run.results.name, what can we help you with?",
              "type": "send_msg",
              "uuid": "21541123-ab0f-4c2f-9835-5c97e9be133f",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
              "name": null,
              "uuid": "890ec71a-edaa-47a0-90ac-09f6f8d0d5b0",
            },
          ],
          "uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 260,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="fc349688-3589-42ac-b61c-d5ef54cedaa5"
      node={
        Object {
          "actions": Array [],
          "exits": Array [
            Object {
              "destination_node_uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
              "name": "All Responses",
              "uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
            },
          ],
          "router": Object {
            "cases": Array [],
            "default_exit_uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
            "operand": "@input",
            "result_name": "This can be something that is really long",
            "type": "switch",
          },
          "uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
          "wait": Object {
            "type": "msg",
          },
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 440,
          },
          "type": "wait_for_response",
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="a8a09d00-7cab-4375-9d44-58f6783732f6"
      node={
        Object {
          "actions": Array [
            Object {
              "category": "",
              "result_name": "Phone",
              "type": "set_run_result",
              "uuid": "9c10156e-aec0-45a3-a144-da84e87222c2",
              "value": "@contact.urns.tel",
            },
            Object {
              "body": "@run.results.name says: 

@run.results.issue 

Please reach out to them at @run.results.phone",
              "emails": Array [
                "support@acme.co",
              ],
              "subject": "New Issue",
              "type": "send_email",
              "uuid": "225a67f4-28b5-4819-a25b-eb9a0ecea11d",
            },
            Object {
              "text": "Thanks! We'll be in touch shortly 👍",
              "type": "send_msg",
              "uuid": "71c026a5-7c1c-4e79-8421-21b8c3689510",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
              "name": null,
              "uuid": "b319dff7-cdb6-4ce4-9f48-5e72818bae77",
            },
          ],
          "uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 540,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="471f6f94-c683-48f9-8e27-ece1d7604315"
      node={
        Object {
          "actions": Array [
            Object {
              "body": "{
    \\"contact\\": @(to_json(contact.uuid)),
    \\"contact_urn\\": @(to_json(contact.urns)),
    \\"message\\": @(to_json(input.text)),
    \\"flow\\": @(to_json(run.flow.uuid)),
    \\"flow_name\\": @(to_json(run.flow.name))
}",
              "headers": Object {},
              "method": "POST",
              "type": "call_webhook",
              "url": "http://example.com",
              "uuid": "b29914f6-94f4-44ab-be48-55a51a76afdf",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": null,
              "name": "Success",
              "uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
            },
            Object {
              "destination_node_uuid": null,
              "name": "Failure",
              "uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
            },
          ],
          "router": Object {
            "cases": Array [
              Object {
                "arguments": Array [
                  "S",
                ],
                "exit_uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
                "type": "has_webhook_status",
                "uuid": "379eed12-fe01-44b4-85c5-a1f2816e3557",
              },
            ],
            "default_exit_uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
            "operand": "@webhook",
            "type": "switch",
          },
          "uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 700,
          },
          "type": "webhook",
        }
      }
    />
  </div>
</React.Fragment>
`;

exports[`Flow render should render Simulator 1`] = `
<React.Fragment>
  <Simulator
    Activity={
      ActivityManager {
        "clearSimulation": [MockFunction],
        "deregister": [MockFunction],
        "fetchActivity": [MockFunction],
        "getActiveCount": [MockFunction],
        "getActivity": [MockFunction],
        "getPathCount": [MockFunction],
        "notifyListeners": [MockFunction],
        "registerListener": [MockFunction],
        "setSimulation": [MockFunction],
      }
    }
    definition={
      Object {
        "_ui": Object {
          "languages": Array [
            Object {
              "eng": "English",
            },
            Object {
              "spa": "Spanish",
            },
          ],
          "nodes": Object {
            "24afc61e-e528-4ac0-b887-78cebd39f12b": Object {
              "position": Object {
                "left": 0,
                "top": 0,
              },
            },
            "471f6f94-c683-48f9-8e27-ece1d7604315": Object {
              "position": Object {
                "left": 300,
                "top": 700,
              },
              "type": "webhook",
            },
            "7a19060d-6d93-4217-a4e5-9cbd479be051": Object {
              "position": Object {
                "left": 0,
                "top": 260,
              },
            },
            "a8a09d00-7cab-4375-9d44-58f6783732f6": Object {
              "position": Object {
                "left": 0,
                "top": 540,
              },
            },
            "d642b014-3c91-418f-ad5b-0fb4f8c5ee60": Object {
              "position": Object {
                "left": 300,
                "top": 180,
              },
              "type": "wait_for_response",
            },
            "fc349688-3589-42ac-b61c-d5ef54cedaa5": Object {
              "position": Object {
                "left": 300,
                "top": 440,
              },
              "type": "wait_for_response",
            },
          },
        },
        "language": "eng",
        "localization": Object {
          "spa": Object {
            "360a28a1-6741-4f16-9421-f6f313cf753e": Object {
              "text": Array [
                "Hola, como te llamas?",
              ],
            },
          },
        },
        "name": "Customer Service",
        "nodes": Array [
          Object {
            "actions": Array [
              Object {
                "text": "Hi there, what is your name?",
                "type": "send_msg",
                "uuid": "360a28a1-6741-4f16-9421-f6f313cf753e",
              },
              Object {
                "groups": Array [
                  Object {
                    "name": "Unsatisfied Customers",
                    "uuid": "2429d573-80d7-47f8-879f-f2ba442a1bfd",
                  },
                ],
                "type": "add_contact_groups",
                "uuid": "d5293394-c6d4-407c-97da-8149faea24cf",
              },
            ],
            "exits": Array [
              Object {
                "destination_node_uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
                "name": null,
                "uuid": "445fc64c-2a18-47cc-89d0-15172826bfcc",
              },
            ],
            "uuid": "24afc61e-e528-4ac0-b887-78cebd39f12b",
          },
          Object {
            "actions": Array [],
            "exits": Array [
              Object {
                "destination_node_uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
                "name": "All Responses",
                "uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
              },
            ],
            "router": Object {
              "cases": Array [],
              "default_exit_uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
              "operand": "@input",
              "result_name": "Name",
              "type": "switch",
            },
            "uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
            "wait": Object {
              "type": "msg",
            },
          },
          Object {
            "actions": Array [
              Object {
                "property": "name",
                "type": "set_contact_property",
                "uuid": "505e8da9-0b73-4cf4-84a7-ce2a58d70f3e",
                "value": "@run.results.name",
              },
              Object {
                "text": "Thanks @run.results.name, what can we help you with?",
                "type": "send_msg",
                "uuid": "21541123-ab0f-4c2f-9835-5c97e9be133f",
              },
            ],
            "exits": Array [
              Object {
                "destination_node_uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
                "name": null,
                "uuid": "890ec71a-edaa-47a0-90ac-09f6f8d0d5b0",
              },
            ],
            "uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
          },
          Object {
            "actions": Array [],
            "exits": Array [
              Object {
                "destination_node_uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
                "name": "All Responses",
                "uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
              },
            ],
            "router": Object {
              "cases": Array [],
              "default_exit_uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
              "operand": "@input",
              "result_name": "This can be something that is really long",
              "type": "switch",
            },
            "uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
            "wait": Object {
              "type": "msg",
            },
          },
          Object {
            "actions": Array [
              Object {
                "category": "",
                "result_name": "Phone",
                "type": "set_run_result",
                "uuid": "9c10156e-aec0-45a3-a144-da84e87222c2",
                "value": "@contact.urns.tel",
              },
              Object {
                "body": "@run.results.name says: 

@run.results.issue 

Please reach out to them at @run.results.phone",
                "emails": Array [
                  "support@acme.co",
                ],
                "subject": "New Issue",
                "type": "send_email",
                "uuid": "225a67f4-28b5-4819-a25b-eb9a0ecea11d",
              },
              Object {
                "text": "Thanks! We'll be in touch shortly 👍",
                "type": "send_msg",
                "uuid": "71c026a5-7c1c-4e79-8421-21b8c3689510",
              },
            ],
            "exits": Array [
              Object {
                "destination_node_uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
                "name": null,
                "uuid": "b319dff7-cdb6-4ce4-9f48-5e72818bae77",
              },
            ],
            "uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
          },
          Object {
            "actions": Array [
              Object {
                "body": "{
    \\"contact\\": @(to_json(contact.uuid)),
    \\"contact_urn\\": @(to_json(contact.urns)),
    \\"message\\": @(to_json(input.text)),
    \\"flow\\": @(to_json(run.flow.uuid)),
    \\"flow_name\\": @(to_json(run.flow.name))
}",
                "headers": Object {},
                "method": "POST",
                "type": "call_webhook",
                "url": "http://example.com",
                "uuid": "b29914f6-94f4-44ab-be48-55a51a76afdf",
              },
            ],
            "exits": Array [
              Object {
                "destination_node_uuid": null,
                "name": "Success",
                "uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
              },
              Object {
                "destination_node_uuid": null,
                "name": "Failure",
                "uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
              },
            ],
            "router": Object {
              "cases": Array [
                Object {
                  "arguments": Array [
                    "S",
                  ],
                  "exit_uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
                  "type": "has_webhook_status",
                  "uuid": "379eed12-fe01-44b4-85c5-a1f2816e3557",
                },
              ],
              "default_exit_uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
              "operand": "@webhook",
              "type": "switch",
            },
            "uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
          },
        ],
        "uuid": "9ecc8e84-6b83-442b-a04a-8094d5de997b",
      }
    }
  />
  <div
    className="nodeList"
    data-spec="node-container"
    id="generated_uuid_10"
    onDoubleClick={[Function]}
    onMouseDown={[Function]}
    onMouseMove={[Function]}
    onMouseUp={[Function]}
  >
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="24afc61e-e528-4ac0-b887-78cebd39f12b"
      node={
        Object {
          "actions": Array [
            Object {
              "text": "Hi there, what is your name?",
              "type": "send_msg",
              "uuid": "360a28a1-6741-4f16-9421-f6f313cf753e",
            },
            Object {
              "groups": Array [
                Object {
                  "name": "Unsatisfied Customers",
                  "uuid": "2429d573-80d7-47f8-879f-f2ba442a1bfd",
                },
              ],
              "type": "add_contact_groups",
              "uuid": "d5293394-c6d4-407c-97da-8149faea24cf",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
              "name": null,
              "uuid": "445fc64c-2a18-47cc-89d0-15172826bfcc",
            },
          ],
          "uuid": "24afc61e-e528-4ac0-b887-78cebd39f12b",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 0,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="d642b014-3c91-418f-ad5b-0fb4f8c5ee60"
      node={
        Object {
          "actions": Array [],
          "exits": Array [
            Object {
              "destination_node_uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
              "name": "All Responses",
              "uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
            },
          ],
          "router": Object {
            "cases": Array [],
            "default_exit_uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
            "operand": "@input",
            "result_name": "Name",
            "type": "switch",
          },
          "uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
          "wait": Object {
            "type": "msg",
          },
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 180,
          },
          "type": "wait_for_response",
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="7a19060d-6d93-4217-a4e5-9cbd479be051"
      node={
        Object {
          "actions": Array [
            Object {
              "property": "name",
              "type": "set_contact_property",
              "uuid": "505e8da9-0b73-4cf4-84a7-ce2a58d70f3e",
              "value": "@run.results.name",
            },
            Object {
              "text": "Thanks @run.results.name, what can we help you with?",
              "type": "send_msg",
              "uuid": "21541123-ab0f-4c2f-9835-5c97e9be133f",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
              "name": null,
              "uuid": "890ec71a-edaa-47a0-90ac-09f6f8d0d5b0",
            },
          ],
          "uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 260,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="fc349688-3589-42ac-b61c-d5ef54cedaa5"
      node={
        Object {
          "actions": Array [],
          "exits": Array [
            Object {
              "destination_node_uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
              "name": "All Responses",
              "uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
            },
          ],
          "router": Object {
            "cases": Array [],
            "default_exit_uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
            "operand": "@input",
            "result_name": "This can be something that is really long",
            "type": "switch",
          },
          "uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
          "wait": Object {
            "type": "msg",
          },
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 440,
          },
          "type": "wait_for_response",
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="a8a09d00-7cab-4375-9d44-58f6783732f6"
      node={
        Object {
          "actions": Array [
            Object {
              "category": "",
              "result_name": "Phone",
              "type": "set_run_result",
              "uuid": "9c10156e-aec0-45a3-a144-da84e87222c2",
              "value": "@contact.urns.tel",
            },
            Object {
              "body": "@run.results.name says: 

@run.results.issue 

Please reach out to them at @run.results.phone",
              "emails": Array [
                "support@acme.co",
              ],
              "subject": "New Issue",
              "type": "send_email",
              "uuid": "225a67f4-28b5-4819-a25b-eb9a0ecea11d",
            },
            Object {
              "text": "Thanks! We'll be in touch shortly 👍",
              "type": "send_msg",
              "uuid": "71c026a5-7c1c-4e79-8421-21b8c3689510",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
              "name": null,
              "uuid": "b319dff7-cdb6-4ce4-9f48-5e72818bae77",
            },
          ],
          "uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 540,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="471f6f94-c683-48f9-8e27-ece1d7604315"
      node={
        Object {
          "actions": Array [
            Object {
              "body": "{
    \\"contact\\": @(to_json(contact.uuid)),
    \\"contact_urn\\": @(to_json(contact.urns)),
    \\"message\\": @(to_json(input.text)),
    \\"flow\\": @(to_json(run.flow.uuid)),
    \\"flow_name\\": @(to_json(run.flow.name))
}",
              "headers": Object {},
              "method": "POST",
              "type": "call_webhook",
              "url": "http://example.com",
              "uuid": "b29914f6-94f4-44ab-be48-55a51a76afdf",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": null,
              "name": "Success",
              "uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
            },
            Object {
              "destination_node_uuid": null,
              "name": "Failure",
              "uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
            },
          ],
          "router": Object {
            "cases": Array [
              Object {
                "arguments": Array [
                  "S",
                ],
                "exit_uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
                "type": "has_webhook_status",
                "uuid": "379eed12-fe01-44b4-85c5-a1f2816e3557",
              },
            ],
            "default_exit_uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
            "operand": "@webhook",
            "type": "switch",
          },
          "uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 700,
          },
          "type": "webhook",
        }
      }
    />
  </div>
</React.Fragment>
`;

exports[`Flow render should render drag selection box 1`] = `
<React.Fragment>
  <div
    className="nodeList"
    data-spec="node-container"
    id="generated_uuid_10"
    onDoubleClick={[Function]}
    onMouseDown={[Function]}
    onMouseMove={[Function]}
    onMouseUp={[Function]}
  >
    <div
      className="dragSelection"
      data-spec="drag-select"
      style={
        Object {
          "height": 211,
          "left": 270,
          "top": 91,
          "width": 230,
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="24afc61e-e528-4ac0-b887-78cebd39f12b"
      node={
        Object {
          "actions": Array [
            Object {
              "text": "Hi there, what is your name?",
              "type": "send_msg",
              "uuid": "360a28a1-6741-4f16-9421-f6f313cf753e",
            },
            Object {
              "groups": Array [
                Object {
                  "name": "Unsatisfied Customers",
                  "uuid": "2429d573-80d7-47f8-879f-f2ba442a1bfd",
                },
              ],
              "type": "add_contact_groups",
              "uuid": "d5293394-c6d4-407c-97da-8149faea24cf",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
              "name": null,
              "uuid": "445fc64c-2a18-47cc-89d0-15172826bfcc",
            },
          ],
          "uuid": "24afc61e-e528-4ac0-b887-78cebd39f12b",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 0,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="d642b014-3c91-418f-ad5b-0fb4f8c5ee60"
      node={
        Object {
          "actions": Array [],
          "exits": Array [
            Object {
              "destination_node_uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
              "name": "All Responses",
              "uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
            },
          ],
          "router": Object {
            "cases": Array [],
            "default_exit_uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
            "operand": "@input",
            "result_name": "Name",
            "type": "switch",
          },
          "uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
          "wait": Object {
            "type": "msg",
          },
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 180,
          },
          "type": "wait_for_response",
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="7a19060d-6d93-4217-a4e5-9cbd479be051"
      node={
        Object {
          "actions": Array [
            Object {
              "property": "name",
              "type": "set_contact_property",
              "uuid": "505e8da9-0b73-4cf4-84a7-ce2a58d70f3e",
              "value": "@run.results.name",
            },
            Object {
              "text": "Thanks @run.results.name, what can we help you with?",
              "type": "send_msg",
              "uuid": "21541123-ab0f-4c2f-9835-5c97e9be133f",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
              "name": null,
              "uuid": "890ec71a-edaa-47a0-90ac-09f6f8d0d5b0",
            },
          ],
          "uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 260,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="fc349688-3589-42ac-b61c-d5ef54cedaa5"
      node={
        Object {
          "actions": Array [],
          "exits": Array [
            Object {
              "destination_node_uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
              "name": "All Responses",
              "uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
            },
          ],
          "router": Object {
            "cases": Array [],
            "default_exit_uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
            "operand": "@input",
            "result_name": "This can be something that is really long",
            "type": "switch",
          },
          "uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
          "wait": Object {
            "type": "msg",
          },
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 440,
          },
          "type": "wait_for_response",
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="a8a09d00-7cab-4375-9d44-58f6783732f6"
      node={
        Object {
          "actions": Array [
            Object {
              "category": "",
              "result_name": "Phone",
              "type": "set_run_result",
              "uuid": "9c10156e-aec0-45a3-a144-da84e87222c2",
              "value": "@contact.urns.tel",
            },
            Object {
              "body": "@run.results.name says: 

@run.results.issue 

Please reach out to them at @run.results.phone",
              "emails": Array [
                "support@acme.co",
              ],
              "subject": "New Issue",
              "type": "send_email",
              "uuid": "225a67f4-28b5-4819-a25b-eb9a0ecea11d",
            },
            Object {
              "text": "Thanks! We'll be in touch shortly 👍",
              "type": "send_msg",
              "uuid": "71c026a5-7c1c-4e79-8421-21b8c3689510",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
              "name": null,
              "uuid": "b319dff7-cdb6-4ce4-9f48-5e72818bae77",
            },
          ],
          "uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 540,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="471f6f94-c683-48f9-8e27-ece1d7604315"
      node={
        Object {
          "actions": Array [
            Object {
              "body": "{
    \\"contact\\": @(to_json(contact.uuid)),
    \\"contact_urn\\": @(to_json(contact.urns)),
    \\"message\\": @(to_json(input.text)),
    \\"flow\\": @(to_json(run.flow.uuid)),
    \\"flow_name\\": @(to_json(run.flow.name))
}",
              "headers": Object {},
              "method": "POST",
              "type": "call_webhook",
              "url": "http://example.com",
              "uuid": "b29914f6-94f4-44ab-be48-55a51a76afdf",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": null,
              "name": "Success",
              "uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
            },
            Object {
              "destination_node_uuid": null,
              "name": "Failure",
              "uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
            },
          ],
          "router": Object {
            "cases": Array [
              Object {
                "arguments": Array [
                  "S",
                ],
                "exit_uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
                "type": "has_webhook_status",
                "uuid": "379eed12-fe01-44b4-85c5-a1f2816e3557",
              },
            ],
            "default_exit_uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
            "operand": "@webhook",
            "type": "switch",
          },
          "uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 700,
          },
          "type": "webhook",
        }
      }
    />
  </div>
</React.Fragment>
`;

exports[`Flow render should render self, children with base props 1`] = `
<React.Fragment>
  <div
    className="nodeList"
    data-spec="node-container"
    id="generated_uuid_10"
    onDoubleClick={[Function]}
    onMouseDown={[Function]}
    onMouseMove={[Function]}
    onMouseUp={[Function]}
  >
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="24afc61e-e528-4ac0-b887-78cebd39f12b"
      node={
        Object {
          "actions": Array [
            Object {
              "text": "Hi there, what is your name?",
              "type": "send_msg",
              "uuid": "360a28a1-6741-4f16-9421-f6f313cf753e",
            },
            Object {
              "groups": Array [
                Object {
                  "name": "Unsatisfied Customers",
                  "uuid": "2429d573-80d7-47f8-879f-f2ba442a1bfd",
                },
              ],
              "type": "add_contact_groups",
              "uuid": "d5293394-c6d4-407c-97da-8149faea24cf",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
              "name": null,
              "uuid": "445fc64c-2a18-47cc-89d0-15172826bfcc",
            },
          ],
          "uuid": "24afc61e-e528-4ac0-b887-78cebd39f12b",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 0,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="d642b014-3c91-418f-ad5b-0fb4f8c5ee60"
      node={
        Object {
          "actions": Array [],
          "exits": Array [
            Object {
              "destination_node_uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
              "name": "All Responses",
              "uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
            },
          ],
          "router": Object {
            "cases": Array [],
            "default_exit_uuid": "984fefee-3bf3-4e7b-bf84-e6e650253b2b",
            "operand": "@input",
            "result_name": "Name",
            "type": "switch",
          },
          "uuid": "d642b014-3c91-418f-ad5b-0fb4f8c5ee60",
          "wait": Object {
            "type": "msg",
          },
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 180,
          },
          "type": "wait_for_response",
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="7a19060d-6d93-4217-a4e5-9cbd479be051"
      node={
        Object {
          "actions": Array [
            Object {
              "property": "name",
              "type": "set_contact_property",
              "uuid": "505e8da9-0b73-4cf4-84a7-ce2a58d70f3e",
              "value": "@run.results.name",
            },
            Object {
              "text": "Thanks @run.results.name, what can we help you with?",
              "type": "send_msg",
              "uuid": "21541123-ab0f-4c2f-9835-5c97e9be133f",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
              "name": null,
              "uuid": "890ec71a-edaa-47a0-90ac-09f6f8d0d5b0",
            },
          ],
          "uuid": "7a19060d-6d93-4217-a4e5-9cbd479be051",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 260,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="fc349688-3589-42ac-b61c-d5ef54cedaa5"
      node={
        Object {
          "actions": Array [],
          "exits": Array [
            Object {
              "destination_node_uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
              "name": "All Responses",
              "uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
            },
          ],
          "router": Object {
            "cases": Array [],
            "default_exit_uuid": "28adcb5e-8208-4e35-82c3-f377cbba5a7c",
            "operand": "@input",
            "result_name": "This can be something that is really long",
            "type": "switch",
          },
          "uuid": "fc349688-3589-42ac-b61c-d5ef54cedaa5",
          "wait": Object {
            "type": "msg",
          },
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 440,
          },
          "type": "wait_for_response",
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="a8a09d00-7cab-4375-9d44-58f6783732f6"
      node={
        Object {
          "actions": Array [
            Object {
              "category": "",
              "result_name": "Phone",
              "type": "set_run_result",
              "uuid": "9c10156e-aec0-45a3-a144-da84e87222c2",
              "value": "@contact.urns.tel",
            },
            Object {
              "body": "@run.results.name says: 

@run.results.issue 

Please reach out to them at @run.results.phone",
              "emails": Array [
                "support@acme.co",
              ],
              "subject": "New Issue",
              "type": "send_email",
              "uuid": "225a67f4-28b5-4819-a25b-eb9a0ecea11d",
            },
            Object {
              "text": "Thanks! We'll be in touch shortly 👍",
              "type": "send_msg",
              "uuid": "71c026a5-7c1c-4e79-8421-21b8c3689510",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
              "name": null,
              "uuid": "b319dff7-cdb6-4ce4-9f48-5e72818bae77",
            },
          ],
          "uuid": "a8a09d00-7cab-4375-9d44-58f6783732f6",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 0,
            "top": 540,
          },
        }
      }
    />
    <Connect(NodeComp)
      Activity={
        ActivityManager {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "fetchActivity": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
      data-spec="node"
      key="471f6f94-c683-48f9-8e27-ece1d7604315"
      node={
        Object {
          "actions": Array [
            Object {
              "body": "{
    \\"contact\\": @(to_json(contact.uuid)),
    \\"contact_urn\\": @(to_json(contact.urns)),
    \\"message\\": @(to_json(input.text)),
    \\"flow\\": @(to_json(run.flow.uuid)),
    \\"flow_name\\": @(to_json(run.flow.name))
}",
              "headers": Object {},
              "method": "POST",
              "type": "call_webhook",
              "url": "http://example.com",
              "uuid": "b29914f6-94f4-44ab-be48-55a51a76afdf",
            },
          ],
          "exits": Array [
            Object {
              "destination_node_uuid": null,
              "name": "Success",
              "uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
            },
            Object {
              "destination_node_uuid": null,
              "name": "Failure",
              "uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
            },
          ],
          "router": Object {
            "cases": Array [
              Object {
                "arguments": Array [
                  "S",
                ],
                "exit_uuid": "f783f0b5-1d08-4981-9547-bae6d35e84c2",
                "type": "has_webhook_status",
                "uuid": "379eed12-fe01-44b4-85c5-a1f2816e3557",
              },
            ],
            "default_exit_uuid": "c1432a6b-0fe4-435f-915a-15d55e269147",
            "operand": "@webhook",
            "type": "switch",
          },
          "uuid": "471f6f94-c683-48f9-8e27-ece1d7604315",
        }
      }
      plumberClearDragSelection={[MockFunction]}
      plumberConnectExit={[MockFunction]}
      plumberDraggable={[MockFunction]}
      plumberMakeSource={[MockFunction]}
      plumberMakeTarget={[MockFunction]}
      plumberRecalculate={[MockFunction]}
      plumberRemove={[MockFunction]}
      plumberRemoveFromDragSelection={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
      plumberSetDragSelection={[MockFunction]}
      ui={
        Object {
          "position": Object {
            "left": 300,
            "top": 700,
          },
          "type": "webhook",
        }
      }
    />
  </div>
</React.Fragment>
`;

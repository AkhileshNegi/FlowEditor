// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SetContactAttribForm render should render channel dropdown 1`] = `
<React.Fragment>
  <Connect(AttribElement)
    add={true}
    assets={
      FieldAssets {
        "assetType": "field",
        "assets": Object {
          "channel": Object {
            "id": "channel",
            "name": "Channel",
            "type": "channel",
          },
          "language": Object {
            "id": "language",
            "name": "Language",
            "type": "language",
          },
          "name": Object {
            "id": "name",
            "name": "Name",
            "type": "name",
          },
        },
        "endpoint": "/assets/fields.json",
        "idProperty": "key",
        "localStorage": true,
      }
    }
    entry={
      Object {
        "value": Object {
          "id": "channel",
          "name": "Channel",
          "type": "channel",
        },
      }
    }
    helpText="Select an existing attribute to update or type any name to create a new one"
    name="Attribute"
    onChange={[Function]}
    showLabel={true}
  />
  <ChannelDropDown
    assetService={
      ChannelAssets {
        "assetType": "channel",
        "assets": Object {
          "6934255e-446b-40d3-b2ca-c5f801bd2278": Object {
            "content": Object {
              "address": "+12065550000",
              "roles": Array [
                "send",
                "receive",
              ],
              "schemes": Array [
                "tel",
              ],
            },
            "id": "6934255e-446b-40d3-b2ca-c5f801bd2278",
            "name": "Simulator",
            "type": "channel",
          },
        },
        "endpoint": "/assets/channels.json",
        "idProperty": "uuid",
        "localStorage": true,
      }
    }
    initial={
      Array [
        Object {
          "id": "set_contact_channel-0",
          "name": "Twilio Channel",
          "type": "language",
        },
      ]
    }
    onChange={[Function]}
  />
</React.Fragment>
`;

exports[`SetContactAttribForm render should render language dropdown 1`] = `
<React.Fragment>
  <Connect(AttribElement)
    add={true}
    assets={
      FieldAssets {
        "assetType": "field",
        "assets": Object {
          "channel": Object {
            "id": "channel",
            "name": "Channel",
            "type": "channel",
          },
          "language": Object {
            "id": "language",
            "name": "Language",
            "type": "language",
          },
          "name": Object {
            "id": "name",
            "name": "Name",
            "type": "name",
          },
        },
        "endpoint": "/assets/fields.json",
        "idProperty": "key",
        "localStorage": true,
      }
    }
    entry={
      Object {
        "value": Object {
          "id": "language",
          "name": "Language",
          "type": "language",
        },
      }
    }
    helpText="Select an existing attribute to update or type any name to create a new one"
    name="Attribute"
    onChange={[Function]}
    showLabel={true}
  />
  <LanguageDropDown
    assetService={
      EnvironmentAssets {
        "assetType": "environment",
        "assets": Object {},
        "endpoint": "/assets/environment.json",
        "idProperty": "id",
        "localStorage": true,
      }
    }
    initial={
      Array [
        Object {
          "id": "eng",
          "name": "English",
          "type": "language",
        },
      ]
    }
    localSearchOptions={
      Array [
        Object {
          "id": "eng",
          "name": "English",
          "type": "language",
        },
        Object {
          "id": "spa",
          "name": "Spanish",
          "type": "language",
        },
        Object {
          "id": "fra",
          "name": "French",
          "type": "language",
        },
      ]
    }
    onChange={[Function]}
  />
</React.Fragment>
`;

exports[`SetContactAttribForm render should render text input 1`] = `
<React.Fragment>
  <Connect(AttribElement)
    add={true}
    assets={
      FieldAssets {
        "assetType": "field",
        "assets": Object {
          "channel": Object {
            "id": "channel",
            "name": "Channel",
            "type": "channel",
          },
          "language": Object {
            "id": "language",
            "name": "Language",
            "type": "language",
          },
          "name": Object {
            "id": "name",
            "name": "Name",
            "type": "name",
          },
        },
        "endpoint": "/assets/fields.json",
        "idProperty": "key",
        "localStorage": true,
      }
    }
    entry={
      Object {
        "value": Object {
          "id": "age",
          "name": "Age",
          "type": "field",
        },
      }
    }
    helpText="Select an existing attribute to update or type any name to create a new one"
    name="Attribute"
    onChange={[Function]}
    showLabel={true}
  />
  <Connect(TextInputElement)
    autocomplete={true}
    entry={
      Object {
        "value": "25",
      }
    }
    helpText="The value to store can be any text you like. You can also reference other values that have been collected up to this point by typing @run.results or @webhook.json."
    name="Value"
    onChange={[Function]}
    showLabel={true}
  />
</React.Fragment>
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`helpers filterOptions should filter options for "a" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "10",
        "template": "@(abs(-10))",
      },
      Object {
        "output": "10.5",
        "template": "@(abs(10.5))",
      },
      Object {
        "output": "ERROR",
        "template": "@(abs(\\"foo\\"))",
      },
    ],
    "signature": "abs(number)",
    "summary": "Returns the absolute value of \`number\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(and(true))",
      },
      Object {
        "output": "false",
        "template": "@(and(true, false, true))",
      },
    ],
    "signature": "and(values...)",
    "summary": "Returns whether all the given \`values\` are truthy.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "b",
        "template": "@(array(\\"a\\", \\"b\\", 356)[1])",
      },
      Object {
        "output": "a|b|c",
        "template": "@(join(array(\\"a\\", \\"b\\", \\"c\\"), \\"|\\"))",
      },
      Object {
        "output": "0",
        "template": "@(count(array()))",
      },
      Object {
        "output": "2",
        "template": "@(count(array(\\"a\\", \\"b\\")))",
      },
    ],
    "signature": "array(values...)",
    "summary": "Takes multiple \`values\` and returns them as an array.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{content_type: image/jpeg, url: https://example.com/test.jpg}",
        "template": "@(attachment_parts(\\"image/jpeg:https://example.com/test.jpg\\"))",
      },
    ],
    "signature": "attachment_parts(attachment)",
    "summary": "Parses an attachment into its different parts",
  },
]
`;

exports[`helpers filterOptions should filter options for "ab" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "10",
        "template": "@(abs(-10))",
      },
      Object {
        "output": "10.5",
        "template": "@(abs(10.5))",
      },
      Object {
        "output": "ERROR",
        "template": "@(abs(\\"foo\\"))",
      },
    ],
    "signature": "abs(number)",
    "summary": "Returns the absolute value of \`number\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "abs" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "10",
        "template": "@(abs(-10))",
      },
      Object {
        "output": "10.5",
        "template": "@(abs(10.5))",
      },
      Object {
        "output": "ERROR",
        "template": "@(abs(\\"foo\\"))",
      },
    ],
    "signature": "abs(number)",
    "summary": "Returns the absolute value of \`number\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "abs." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "an" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(and(true))",
      },
      Object {
        "output": "false",
        "template": "@(and(true, false, true))",
      },
    ],
    "signature": "and(values...)",
    "summary": "Returns whether all the given \`values\` are truthy.",
  },
]
`;

exports[`helpers filterOptions should filter options for "and" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(and(true))",
      },
      Object {
        "output": "false",
        "template": "@(and(true, false, true))",
      },
    ],
    "signature": "and(values...)",
    "summary": "Returns whether all the given \`values\` are truthy.",
  },
]
`;

exports[`helpers filterOptions should filter options for "and." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "ar" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "b",
        "template": "@(array(\\"a\\", \\"b\\", 356)[1])",
      },
      Object {
        "output": "a|b|c",
        "template": "@(join(array(\\"a\\", \\"b\\", \\"c\\"), \\"|\\"))",
      },
      Object {
        "output": "0",
        "template": "@(count(array()))",
      },
      Object {
        "output": "2",
        "template": "@(count(array(\\"a\\", \\"b\\")))",
      },
    ],
    "signature": "array(values...)",
    "summary": "Takes multiple \`values\` and returns them as an array.",
  },
]
`;

exports[`helpers filterOptions should filter options for "array" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "b",
        "template": "@(array(\\"a\\", \\"b\\", 356)[1])",
      },
      Object {
        "output": "a|b|c",
        "template": "@(join(array(\\"a\\", \\"b\\", \\"c\\"), \\"|\\"))",
      },
      Object {
        "output": "0",
        "template": "@(count(array()))",
      },
      Object {
        "output": "2",
        "template": "@(count(array(\\"a\\", \\"b\\")))",
      },
    ],
    "signature": "array(values...)",
    "summary": "Takes multiple \`values\` and returns them as an array.",
  },
]
`;

exports[`helpers filterOptions should filter options for "array." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "at" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{content_type: image/jpeg, url: https://example.com/test.jpg}",
        "template": "@(attachment_parts(\\"image/jpeg:https://example.com/test.jpg\\"))",
      },
    ],
    "signature": "attachment_parts(attachment)",
    "summary": "Parses an attachment into its different parts",
  },
]
`;

exports[`helpers filterOptions should filter options for "attachment_parts" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{content_type: image/jpeg, url: https://example.com/test.jpg}",
        "template": "@(attachment_parts(\\"image/jpeg:https://example.com/test.jpg\\"))",
      },
    ],
    "signature": "attachment_parts(attachment)",
    "summary": "Parses an attachment into its different parts",
  },
]
`;

exports[`helpers filterOptions should filter options for "attachment_parts." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "b" 1`] = `
Array [
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(boolean(array(1, 2)))",
      },
      Object {
        "output": "false",
        "template": "@(boolean(\\"FALSE\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(boolean(1 / 0))",
      },
    ],
    "signature": "boolean(value)",
    "summary": "Tries to convert \`value\` to a boolean.",
  },
]
`;

exports[`helpers filterOptions should filter options for "bo" 1`] = `
Array [
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(boolean(array(1, 2)))",
      },
      Object {
        "output": "false",
        "template": "@(boolean(\\"FALSE\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(boolean(1 / 0))",
      },
    ],
    "signature": "boolean(value)",
    "summary": "Tries to convert \`value\` to a boolean.",
  },
]
`;

exports[`helpers filterOptions should filter options for "boolean" 1`] = `
Array [
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(boolean(array(1, 2)))",
      },
      Object {
        "output": "false",
        "template": "@(boolean(\\"FALSE\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(boolean(1 / 0))",
      },
    ],
    "signature": "boolean(value)",
    "summary": "Tries to convert \`value\` to a boolean.",
  },
]
`;

exports[`helpers filterOptions should filter options for "boolean." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "c" 1`] = `
Array [
  Object {
    "name": "contact",
    "summary": "The name of the  contact",
  },
  Object {
    "name": "child",
    "summary": "Run details collected in a child flow, if any",
  },
  Object {
    "detail": "It is the inverse of [function:code].",
    "examples": Array [
      Object {
        "output": "!",
        "template": "@(char(33))",
      },
      Object {
        "output": "😀",
        "template": "@(char(128512))",
      },
      Object {
        "output": "ERROR",
        "template": "@(char(\\"foo\\"))",
      },
    ],
    "signature": "char(code)",
    "summary": "Returns the character for the given UNICODE \`code\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "😃 Hello world",
        "template": "@(clean(\\"😃 Hello \\\\nwo\\\\tr\\\\rld\\"))",
      },
      Object {
        "output": "123",
        "template": "@(clean(123))",
      },
    ],
    "signature": "clean(text)",
    "summary": "Removes any non-printable characters from \`text\`.",
  },
  Object {
    "detail": "It is the inverse of [function:char].",
    "examples": Array [
      Object {
        "output": "97",
        "template": "@(code(\\"a\\"))",
      },
      Object {
        "output": "97",
        "template": "@(code(\\"abc\\"))",
      },
      Object {
        "output": "128512",
        "template": "@(code(\\"😀\\"))",
      },
      Object {
        "output": "49",
        "template": "@(code(\\"15\\"))",
      },
      Object {
        "output": "49",
        "template": "@(code(15))",
      },
      Object {
        "output": "ERROR",
        "template": "@(code(\\"\\"))",
      },
    ],
    "signature": "code(text)",
    "summary": "Returns the UNICODE code for the first character of \`text\`.",
  },
  Object {
    "detail": "It will return an error if it is passed an item which isn't countable.",
    "examples": Array [
      Object {
        "output": "5",
        "template": "@(count(contact.fields))",
      },
      Object {
        "output": "0",
        "template": "@(count(array()))",
      },
      Object {
        "output": "3",
        "template": "@(count(array(\\"a\\", \\"b\\", \\"c\\")))",
      },
      Object {
        "output": "ERROR",
        "template": "@(count(1234))",
      },
    ],
    "signature": "count(value)",
    "summary": "Returns the number of items in the given array or properties on an object.",
  },
]
`;

exports[`helpers filterOptions should filter options for "ch" 1`] = `
Array [
  Object {
    "name": "child",
    "summary": "Run details collected in a child flow, if any",
  },
  Object {
    "detail": "It is the inverse of [function:code].",
    "examples": Array [
      Object {
        "output": "!",
        "template": "@(char(33))",
      },
      Object {
        "output": "😀",
        "template": "@(char(128512))",
      },
      Object {
        "output": "ERROR",
        "template": "@(char(\\"foo\\"))",
      },
    ],
    "signature": "char(code)",
    "summary": "Returns the character for the given UNICODE \`code\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "char" 1`] = `
Array [
  Object {
    "detail": "It is the inverse of [function:code].",
    "examples": Array [
      Object {
        "output": "!",
        "template": "@(char(33))",
      },
      Object {
        "output": "😀",
        "template": "@(char(128512))",
      },
      Object {
        "output": "ERROR",
        "template": "@(char(\\"foo\\"))",
      },
    ],
    "signature": "char(code)",
    "summary": "Returns the character for the given UNICODE \`code\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "char." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "child" 1`] = `
Array [
  Object {
    "name": "child",
    "summary": "Run details collected in a child flow, if any",
  },
  Object {
    "name": "child.flow",
    "summary": "The flow in which a child run takes place",
  },
  Object {
    "name": "child.contact",
    "summary": "The name of the child run's contact",
  },
  Object {
    "name": "child.webhook",
    "summary": "The body of the response to the last webhook request made in a child run",
  },
  Object {
    "name": "child.results",
    "summary": "Results collected in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child." 1`] = `
Array [
  Object {
    "name": "child.flow",
    "summary": "The flow in which a child run takes place",
  },
  Object {
    "name": "child.contact",
    "summary": "The name of the child run's contact",
  },
  Object {
    "name": "child.webhook",
    "summary": "The body of the response to the last webhook request made in a child run",
  },
  Object {
    "name": "child.results",
    "summary": "Results collected in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.c" 1`] = `
Array [
  Object {
    "name": "child.contact",
    "summary": "The name of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.co" 1`] = `
Array [
  Object {
    "name": "child.contact",
    "summary": "The name of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact" 1`] = `
Array [
  Object {
    "name": "child.contact",
    "summary": "The name of the child run's contact",
  },
  Object {
    "name": "child.contact.first_name",
    "summary": "The first name of a child run's contact",
  },
  Object {
    "name": "child.contact.name",
    "summary": "The name of the child run's contact",
  },
  Object {
    "name": "child.contact.display",
    "summary": "The name or urn of the child run's contact",
  },
  Object {
    "name": "child.contact.fields",
    "summary": "Custom fields on a child run's contact",
  },
  Object {
    "name": "child.contact.urn",
    "summary": "The primary urn for a child run's contact",
  },
  Object {
    "name": "child.contact.language",
    "summary": "The language iso code for a child run's contact",
  },
  Object {
    "name": "child.contact.created_on",
    "summary": "The creation date for the child run's contact",
  },
  Object {
    "name": "child.contact.groups",
    "summary": "The groups a child run's contact is a member of",
  },
  Object {
    "name": "child.contact.urns",
    "summary": "The urns for a child run's contact",
  },
  Object {
    "name": "child.contact.uuid",
    "summary": "The uuid of the child run's contact",
  },
  Object {
    "name": "child.contact.channel",
    "summary": "A child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.c" 1`] = `
Array [
  Object {
    "name": "child.contact.created_on",
    "summary": "The creation date for the child run's contact",
  },
  Object {
    "name": "child.contact.channel",
    "summary": "A child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.ch" 1`] = `
Array [
  Object {
    "name": "child.contact.channel",
    "summary": "A child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel" 1`] = `
Array [
  Object {
    "name": "child.contact.channel",
    "summary": "A child run's contact's preferred channel",
  },
  Object {
    "name": "child.contact.channel.uuid",
    "summary": "The UUID of a child run's contact's preferred channel",
  },
  Object {
    "name": "child.contact.channel.name",
    "summary": "The name of a child run's contact's preferred channel",
  },
  Object {
    "name": "child.contact.channel.address",
    "summary": "The address of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.a" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.address",
    "summary": "The address of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.ad" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.address",
    "summary": "The address of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.address" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.address",
    "summary": "The address of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.n" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.name",
    "summary": "The name of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.na" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.name",
    "summary": "The name of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.name" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.name",
    "summary": "The name of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.u" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.uuid",
    "summary": "The UUID of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.uu" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.uuid",
    "summary": "The UUID of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.channel.uuid" 1`] = `
Array [
  Object {
    "name": "child.contact.channel.uuid",
    "summary": "The UUID of a child run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.cr" 1`] = `
Array [
  Object {
    "name": "child.contact.created_on",
    "summary": "The creation date for the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.created_on" 1`] = `
Array [
  Object {
    "name": "child.contact.created_on",
    "summary": "The creation date for the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.d" 1`] = `
Array [
  Object {
    "name": "child.contact.display",
    "summary": "The name or urn of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.di" 1`] = `
Array [
  Object {
    "name": "child.contact.display",
    "summary": "The name or urn of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.display" 1`] = `
Array [
  Object {
    "name": "child.contact.display",
    "summary": "The name or urn of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.f" 1`] = `
Array [
  Object {
    "name": "child.contact.first_name",
    "summary": "The first name of a child run's contact",
  },
  Object {
    "name": "child.contact.fields",
    "summary": "Custom fields on a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.fi" 1`] = `
Array [
  Object {
    "name": "child.contact.first_name",
    "summary": "The first name of a child run's contact",
  },
  Object {
    "name": "child.contact.fields",
    "summary": "Custom fields on a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.fields" 1`] = `
Array [
  Object {
    "name": "child.contact.fields",
    "summary": "Custom fields on a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.first_name" 1`] = `
Array [
  Object {
    "name": "child.contact.first_name",
    "summary": "The first name of a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.g" 1`] = `
Array [
  Object {
    "name": "child.contact.groups",
    "summary": "The groups a child run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.gr" 1`] = `
Array [
  Object {
    "name": "child.contact.groups",
    "summary": "The groups a child run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.groups" 1`] = `
Array [
  Object {
    "name": "child.contact.groups",
    "summary": "The groups a child run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.l" 1`] = `
Array [
  Object {
    "name": "child.contact.language",
    "summary": "The language iso code for a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.la" 1`] = `
Array [
  Object {
    "name": "child.contact.language",
    "summary": "The language iso code for a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.language" 1`] = `
Array [
  Object {
    "name": "child.contact.language",
    "summary": "The language iso code for a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.n" 1`] = `
Array [
  Object {
    "name": "child.contact.name",
    "summary": "The name of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.na" 1`] = `
Array [
  Object {
    "name": "child.contact.name",
    "summary": "The name of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.name" 1`] = `
Array [
  Object {
    "name": "child.contact.name",
    "summary": "The name of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.u" 1`] = `
Array [
  Object {
    "name": "child.contact.urn",
    "summary": "The primary urn for a child run's contact",
  },
  Object {
    "name": "child.contact.urns",
    "summary": "The urns for a child run's contact",
  },
  Object {
    "name": "child.contact.uuid",
    "summary": "The uuid of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.ur" 1`] = `
Array [
  Object {
    "name": "child.contact.urn",
    "summary": "The primary urn for a child run's contact",
  },
  Object {
    "name": "child.contact.urns",
    "summary": "The urns for a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.urn" 1`] = `
Array [
  Object {
    "name": "child.contact.urn",
    "summary": "The primary urn for a child run's contact",
  },
  Object {
    "name": "child.contact.urns",
    "summary": "The urns for a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.urns" 1`] = `
Array [
  Object {
    "name": "child.contact.urns",
    "summary": "The urns for a child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.uu" 1`] = `
Array [
  Object {
    "name": "child.contact.uuid",
    "summary": "The uuid of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.contact.uuid" 1`] = `
Array [
  Object {
    "name": "child.contact.uuid",
    "summary": "The uuid of the child run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.f" 1`] = `
Array [
  Object {
    "name": "child.flow",
    "summary": "The flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.fl" 1`] = `
Array [
  Object {
    "name": "child.flow",
    "summary": "The flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow" 1`] = `
Array [
  Object {
    "name": "child.flow",
    "summary": "The flow in which a child run takes place",
  },
  Object {
    "name": "child.flow.uuid",
    "summary": "The UUID of the flow in which a child run takes place",
  },
  Object {
    "name": "child.flow.name",
    "summary": "The name of the flow in which a child run takes place",
  },
  Object {
    "name": "child.flow.revision",
    "summary": "The revision number of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.n" 1`] = `
Array [
  Object {
    "name": "child.flow.name",
    "summary": "The name of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.na" 1`] = `
Array [
  Object {
    "name": "child.flow.name",
    "summary": "The name of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.name" 1`] = `
Array [
  Object {
    "name": "child.flow.name",
    "summary": "The name of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.r" 1`] = `
Array [
  Object {
    "name": "child.flow.revision",
    "summary": "The revision number of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.re" 1`] = `
Array [
  Object {
    "name": "child.flow.revision",
    "summary": "The revision number of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.revision" 1`] = `
Array [
  Object {
    "name": "child.flow.revision",
    "summary": "The revision number of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.u" 1`] = `
Array [
  Object {
    "name": "child.flow.uuid",
    "summary": "The UUID of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.uu" 1`] = `
Array [
  Object {
    "name": "child.flow.uuid",
    "summary": "The UUID of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.flow.uuid" 1`] = `
Array [
  Object {
    "name": "child.flow.uuid",
    "summary": "The UUID of the flow in which a child run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.r" 1`] = `
Array [
  Object {
    "name": "child.results",
    "summary": "Results collected in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.re" 1`] = `
Array [
  Object {
    "name": "child.results",
    "summary": "Results collected in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.results" 1`] = `
Array [
  Object {
    "name": "child.results",
    "summary": "Results collected in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.w" 1`] = `
Array [
  Object {
    "name": "child.webhook",
    "summary": "The body of the response to the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.we" 1`] = `
Array [
  Object {
    "name": "child.webhook",
    "summary": "The body of the response to the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook" 1`] = `
Array [
  Object {
    "name": "child.webhook",
    "summary": "The body of the response to the last webhook request made in a child run",
  },
  Object {
    "name": "child.webhook.status",
    "summary": "The status of the last webhook request made in a child run",
  },
  Object {
    "name": "child.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a child run",
  },
  Object {
    "name": "child.webhook.url",
    "summary": "The URL that was called by the last webhook request in a child run",
  },
  Object {
    "name": "child.webhook.body",
    "summary": "The body of the last webhook request made in a child run",
  },
  Object {
    "name": "child.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a child run, can access subelements",
  },
  Object {
    "name": "child.webhook.request",
    "summary": "The raw request last made in a child run, including headers",
  },
  Object {
    "name": "child.webhook.response",
    "summary": "The raw response last received in a child run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.b" 1`] = `
Array [
  Object {
    "name": "child.webhook.body",
    "summary": "The body of the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.bo" 1`] = `
Array [
  Object {
    "name": "child.webhook.body",
    "summary": "The body of the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.body" 1`] = `
Array [
  Object {
    "name": "child.webhook.body",
    "summary": "The body of the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.j" 1`] = `
Array [
  Object {
    "name": "child.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a child run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.js" 1`] = `
Array [
  Object {
    "name": "child.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a child run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.json" 1`] = `
Array [
  Object {
    "name": "child.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a child run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.r" 1`] = `
Array [
  Object {
    "name": "child.webhook.request",
    "summary": "The raw request last made in a child run, including headers",
  },
  Object {
    "name": "child.webhook.response",
    "summary": "The raw response last received in a child run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.re" 1`] = `
Array [
  Object {
    "name": "child.webhook.request",
    "summary": "The raw request last made in a child run, including headers",
  },
  Object {
    "name": "child.webhook.response",
    "summary": "The raw response last received in a child run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.request" 1`] = `
Array [
  Object {
    "name": "child.webhook.request",
    "summary": "The raw request last made in a child run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.response" 1`] = `
Array [
  Object {
    "name": "child.webhook.response",
    "summary": "The raw response last received in a child run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.s" 1`] = `
Array [
  Object {
    "name": "child.webhook.status",
    "summary": "The status of the last webhook request made in a child run",
  },
  Object {
    "name": "child.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.st" 1`] = `
Array [
  Object {
    "name": "child.webhook.status",
    "summary": "The status of the last webhook request made in a child run",
  },
  Object {
    "name": "child.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.status" 1`] = `
Array [
  Object {
    "name": "child.webhook.status",
    "summary": "The status of the last webhook request made in a child run",
  },
  Object {
    "name": "child.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.status_code" 1`] = `
Array [
  Object {
    "name": "child.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.u" 1`] = `
Array [
  Object {
    "name": "child.webhook.url",
    "summary": "The URL that was called by the last webhook request in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.ur" 1`] = `
Array [
  Object {
    "name": "child.webhook.url",
    "summary": "The URL that was called by the last webhook request in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "child.webhook.url" 1`] = `
Array [
  Object {
    "name": "child.webhook.url",
    "summary": "The URL that was called by the last webhook request in a child run",
  },
]
`;

exports[`helpers filterOptions should filter options for "cl" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "😃 Hello world",
        "template": "@(clean(\\"😃 Hello \\\\nwo\\\\tr\\\\rld\\"))",
      },
      Object {
        "output": "123",
        "template": "@(clean(123))",
      },
    ],
    "signature": "clean(text)",
    "summary": "Removes any non-printable characters from \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "clean" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "😃 Hello world",
        "template": "@(clean(\\"😃 Hello \\\\nwo\\\\tr\\\\rld\\"))",
      },
      Object {
        "output": "123",
        "template": "@(clean(123))",
      },
    ],
    "signature": "clean(text)",
    "summary": "Removes any non-printable characters from \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "clean." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "co" 1`] = `
Array [
  Object {
    "name": "contact",
    "summary": "The name of the  contact",
  },
  Object {
    "detail": "It is the inverse of [function:char].",
    "examples": Array [
      Object {
        "output": "97",
        "template": "@(code(\\"a\\"))",
      },
      Object {
        "output": "97",
        "template": "@(code(\\"abc\\"))",
      },
      Object {
        "output": "128512",
        "template": "@(code(\\"😀\\"))",
      },
      Object {
        "output": "49",
        "template": "@(code(\\"15\\"))",
      },
      Object {
        "output": "49",
        "template": "@(code(15))",
      },
      Object {
        "output": "ERROR",
        "template": "@(code(\\"\\"))",
      },
    ],
    "signature": "code(text)",
    "summary": "Returns the UNICODE code for the first character of \`text\`.",
  },
  Object {
    "detail": "It will return an error if it is passed an item which isn't countable.",
    "examples": Array [
      Object {
        "output": "5",
        "template": "@(count(contact.fields))",
      },
      Object {
        "output": "0",
        "template": "@(count(array()))",
      },
      Object {
        "output": "3",
        "template": "@(count(array(\\"a\\", \\"b\\", \\"c\\")))",
      },
      Object {
        "output": "ERROR",
        "template": "@(count(1234))",
      },
    ],
    "signature": "count(value)",
    "summary": "Returns the number of items in the given array or properties on an object.",
  },
]
`;

exports[`helpers filterOptions should filter options for "code" 1`] = `
Array [
  Object {
    "detail": "It is the inverse of [function:char].",
    "examples": Array [
      Object {
        "output": "97",
        "template": "@(code(\\"a\\"))",
      },
      Object {
        "output": "97",
        "template": "@(code(\\"abc\\"))",
      },
      Object {
        "output": "128512",
        "template": "@(code(\\"😀\\"))",
      },
      Object {
        "output": "49",
        "template": "@(code(\\"15\\"))",
      },
      Object {
        "output": "49",
        "template": "@(code(15))",
      },
      Object {
        "output": "ERROR",
        "template": "@(code(\\"\\"))",
      },
    ],
    "signature": "code(text)",
    "summary": "Returns the UNICODE code for the first character of \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "code." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "contact" 1`] = `
Array [
  Object {
    "name": "contact",
    "summary": "The name of the  contact",
  },
  Object {
    "name": "contact.first_name",
    "summary": "The first name of a  contact",
  },
  Object {
    "name": "contact.name",
    "summary": "The name of the  contact",
  },
  Object {
    "name": "contact.display",
    "summary": "The name or urn of the  contact",
  },
  Object {
    "name": "contact.fields",
    "summary": "Custom fields on a  contact",
  },
  Object {
    "name": "contact.urn",
    "summary": "The primary urn for a  contact",
  },
  Object {
    "name": "contact.language",
    "summary": "The language iso code for a  contact",
  },
  Object {
    "name": "contact.created_on",
    "summary": "The creation date for the  contact",
  },
  Object {
    "name": "contact.groups",
    "summary": "The groups a  contact is a member of",
  },
  Object {
    "name": "contact.urns",
    "summary": "The urns for a  contact",
  },
  Object {
    "name": "contact.uuid",
    "summary": "The uuid of the  contact",
  },
  Object {
    "name": "contact.channel",
    "summary": "A  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact." 1`] = `
Array [
  Object {
    "name": "contact.first_name",
    "summary": "The first name of a  contact",
  },
  Object {
    "name": "contact.name",
    "summary": "The name of the  contact",
  },
  Object {
    "name": "contact.display",
    "summary": "The name or urn of the  contact",
  },
  Object {
    "name": "contact.fields",
    "summary": "Custom fields on a  contact",
  },
  Object {
    "name": "contact.urn",
    "summary": "The primary urn for a  contact",
  },
  Object {
    "name": "contact.language",
    "summary": "The language iso code for a  contact",
  },
  Object {
    "name": "contact.created_on",
    "summary": "The creation date for the  contact",
  },
  Object {
    "name": "contact.groups",
    "summary": "The groups a  contact is a member of",
  },
  Object {
    "name": "contact.urns",
    "summary": "The urns for a  contact",
  },
  Object {
    "name": "contact.uuid",
    "summary": "The uuid of the  contact",
  },
  Object {
    "name": "contact.channel",
    "summary": "A  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.c" 1`] = `
Array [
  Object {
    "name": "contact.created_on",
    "summary": "The creation date for the  contact",
  },
  Object {
    "name": "contact.channel",
    "summary": "A  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.ch" 1`] = `
Array [
  Object {
    "name": "contact.channel",
    "summary": "A  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel" 1`] = `
Array [
  Object {
    "name": "contact.channel",
    "summary": "A  contact's preferred channel",
  },
  Object {
    "name": "contact.channel.uuid",
    "summary": "The UUID of a  contact's preferred channel",
  },
  Object {
    "name": "contact.channel.name",
    "summary": "The name of a  contact's preferred channel",
  },
  Object {
    "name": "contact.channel.address",
    "summary": "The address of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.a" 1`] = `
Array [
  Object {
    "name": "contact.channel.address",
    "summary": "The address of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.ad" 1`] = `
Array [
  Object {
    "name": "contact.channel.address",
    "summary": "The address of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.address" 1`] = `
Array [
  Object {
    "name": "contact.channel.address",
    "summary": "The address of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.n" 1`] = `
Array [
  Object {
    "name": "contact.channel.name",
    "summary": "The name of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.na" 1`] = `
Array [
  Object {
    "name": "contact.channel.name",
    "summary": "The name of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.name" 1`] = `
Array [
  Object {
    "name": "contact.channel.name",
    "summary": "The name of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.u" 1`] = `
Array [
  Object {
    "name": "contact.channel.uuid",
    "summary": "The UUID of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.uu" 1`] = `
Array [
  Object {
    "name": "contact.channel.uuid",
    "summary": "The UUID of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.channel.uuid" 1`] = `
Array [
  Object {
    "name": "contact.channel.uuid",
    "summary": "The UUID of a  contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.cr" 1`] = `
Array [
  Object {
    "name": "contact.created_on",
    "summary": "The creation date for the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.created_on" 1`] = `
Array [
  Object {
    "name": "contact.created_on",
    "summary": "The creation date for the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.d" 1`] = `
Array [
  Object {
    "name": "contact.display",
    "summary": "The name or urn of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.di" 1`] = `
Array [
  Object {
    "name": "contact.display",
    "summary": "The name or urn of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.display" 1`] = `
Array [
  Object {
    "name": "contact.display",
    "summary": "The name or urn of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.f" 1`] = `
Array [
  Object {
    "name": "contact.first_name",
    "summary": "The first name of a  contact",
  },
  Object {
    "name": "contact.fields",
    "summary": "Custom fields on a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.fi" 1`] = `
Array [
  Object {
    "name": "contact.first_name",
    "summary": "The first name of a  contact",
  },
  Object {
    "name": "contact.fields",
    "summary": "Custom fields on a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.fields" 1`] = `
Array [
  Object {
    "name": "contact.fields",
    "summary": "Custom fields on a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.first_name" 1`] = `
Array [
  Object {
    "name": "contact.first_name",
    "summary": "The first name of a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.g" 1`] = `
Array [
  Object {
    "name": "contact.groups",
    "summary": "The groups a  contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.gr" 1`] = `
Array [
  Object {
    "name": "contact.groups",
    "summary": "The groups a  contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.groups" 1`] = `
Array [
  Object {
    "name": "contact.groups",
    "summary": "The groups a  contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.l" 1`] = `
Array [
  Object {
    "name": "contact.language",
    "summary": "The language iso code for a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.la" 1`] = `
Array [
  Object {
    "name": "contact.language",
    "summary": "The language iso code for a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.language" 1`] = `
Array [
  Object {
    "name": "contact.language",
    "summary": "The language iso code for a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.n" 1`] = `
Array [
  Object {
    "name": "contact.name",
    "summary": "The name of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.na" 1`] = `
Array [
  Object {
    "name": "contact.name",
    "summary": "The name of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.name" 1`] = `
Array [
  Object {
    "name": "contact.name",
    "summary": "The name of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.u" 1`] = `
Array [
  Object {
    "name": "contact.urn",
    "summary": "The primary urn for a  contact",
  },
  Object {
    "name": "contact.urns",
    "summary": "The urns for a  contact",
  },
  Object {
    "name": "contact.uuid",
    "summary": "The uuid of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.ur" 1`] = `
Array [
  Object {
    "name": "contact.urn",
    "summary": "The primary urn for a  contact",
  },
  Object {
    "name": "contact.urns",
    "summary": "The urns for a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.urn" 1`] = `
Array [
  Object {
    "name": "contact.urn",
    "summary": "The primary urn for a  contact",
  },
  Object {
    "name": "contact.urns",
    "summary": "The urns for a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.urns" 1`] = `
Array [
  Object {
    "name": "contact.urns",
    "summary": "The urns for a  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.uu" 1`] = `
Array [
  Object {
    "name": "contact.uuid",
    "summary": "The uuid of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "contact.uuid" 1`] = `
Array [
  Object {
    "name": "contact.uuid",
    "summary": "The uuid of the  contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "count" 1`] = `
Array [
  Object {
    "detail": "It will return an error if it is passed an item which isn't countable.",
    "examples": Array [
      Object {
        "output": "5",
        "template": "@(count(contact.fields))",
      },
      Object {
        "output": "0",
        "template": "@(count(array()))",
      },
      Object {
        "output": "3",
        "template": "@(count(array(\\"a\\", \\"b\\", \\"c\\")))",
      },
      Object {
        "output": "ERROR",
        "template": "@(count(1234))",
      },
    ],
    "signature": "count(value)",
    "summary": "Returns the number of items in the given array or properties on an object.",
  },
]
`;

exports[`helpers filterOptions should filter options for "count." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "d" 1`] = `
Array [
  Object {
    "detail": "If it is text then it will be parsed into a date using the default date format.
An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "1979-07-18",
        "template": "@(date(\\"1979-07-18\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(date(\\"1979-07-18T10:30:45.123456Z\\"))",
      },
      Object {
        "output": "2010-05-10",
        "template": "@(date(\\"10/05/2010\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(date(\\"NOT DATE\\"))",
      },
    ],
    "signature": "date(value)",
    "summary": "Tries to convert \`value\` to a date.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-01-15",
        "template": "@(date_from_parts(2017, 1, 15))",
      },
      Object {
        "output": "2017-03-03",
        "template": "@(date_from_parts(2017, 2, 31))",
      },
      Object {
        "output": "ERROR",
        "template": "@(date_from_parts(2017, 13, 15))",
      },
    ],
    "signature": "date_from_parts(year, month, day)",
    "summary": "Creates a date from \`year\`, \`month\` and \`day\`.",
  },
  Object {
    "detail": "If it is text then it will be parsed into a datetime using the default date
and time formats. An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "1979-07-18T00:00:00.000000-05:00",
        "template": "@(datetime(\\"1979-07-18\\"))",
      },
      Object {
        "output": "1979-07-18T10:30:45.123456Z",
        "template": "@(datetime(\\"1979-07-18T10:30:45.123456Z\\"))",
      },
      Object {
        "output": "2010-05-10T00:00:00.000000-05:00",
        "template": "@(datetime(\\"10/05/2010\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(datetime(\\"NOT DATE\\"))",
      },
    ],
    "signature": "datetime(value)",
    "summary": "Tries to convert \`value\` to a datetime.",
  },
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds",
    "examples": Array [
      Object {
        "output": "2017-01-20T00:00:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15\\", 5, \\"D\\"))",
      },
      Object {
        "output": "2017-01-15T11:15:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15 10:45\\", 30, \\"m\\"))",
      },
    ],
    "signature": "datetime_add(datetime, offset, unit)",
    "summary": "Calculates the date value arrived at by adding \`offset\` number of \`unit\` to the \`datetime\`",
  },
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-01-17\\", \\"D\\"))",
      },
      Object {
        "output": "17",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"W\\"))",
      },
      Object {
        "output": "4",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"M\\"))",
      },
      Object {
        "output": "1",
        "template": "@(datetime_diff(\\"2017-01-17 10:50\\", \\"2017-01-17 12:30\\", \\"h\\"))",
      },
      Object {
        "output": "-2",
        "template": "@(datetime_diff(\\"2017-01-17\\", \\"2015-12-17\\", \\"Y\\"))",
      },
    ],
    "signature": "datetime_diff(date1, date2, unit)",
    "summary": "Returns the duration between \`date1\` and \`date2\` in the \`unit\` specified.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-06-12T11:56:59.000000-05:00",
        "template": "@(datetime_from_epoch(1497286619))",
      },
      Object {
        "output": "2017-06-12T11:56:59.123456-05:00",
        "template": "@(datetime_from_epoch(1497286619.123456))",
      },
    ],
    "signature": "datetime_from_epoch(seconds)",
    "summary": "Converts the UNIX epoch time \`seconds\` into a new date.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "default_value",
        "template": "@(default(undeclared.var, \\"default_value\\"))",
      },
      Object {
        "output": "10",
        "template": "@(default(\\"10\\", \\"20\\"))",
      },
      Object {
        "output": "value",
        "template": "@(default(\\"\\", \\"value\\"))",
      },
      Object {
        "output": "[1, 2]",
        "template": "@(default(array(1, 2), \\"value\\"))",
      },
      Object {
        "output": "value",
        "template": "@(default(array(), \\"value\\"))",
      },
      Object {
        "output": "today",
        "template": "@(default(datetime(\\"invalid-date\\"), \\"today\\"))",
      },
      Object {
        "output": "ok",
        "template": "@(default(format_urn(\\"invalid-urn\\"), \\"ok\\"))",
      },
    ],
    "signature": "default(value, default)",
    "summary": "Returns \`value\` if is not empty or an error, otherwise it returns \`default\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "da" 1`] = `
Array [
  Object {
    "detail": "If it is text then it will be parsed into a date using the default date format.
An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "1979-07-18",
        "template": "@(date(\\"1979-07-18\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(date(\\"1979-07-18T10:30:45.123456Z\\"))",
      },
      Object {
        "output": "2010-05-10",
        "template": "@(date(\\"10/05/2010\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(date(\\"NOT DATE\\"))",
      },
    ],
    "signature": "date(value)",
    "summary": "Tries to convert \`value\` to a date.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-01-15",
        "template": "@(date_from_parts(2017, 1, 15))",
      },
      Object {
        "output": "2017-03-03",
        "template": "@(date_from_parts(2017, 2, 31))",
      },
      Object {
        "output": "ERROR",
        "template": "@(date_from_parts(2017, 13, 15))",
      },
    ],
    "signature": "date_from_parts(year, month, day)",
    "summary": "Creates a date from \`year\`, \`month\` and \`day\`.",
  },
  Object {
    "detail": "If it is text then it will be parsed into a datetime using the default date
and time formats. An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "1979-07-18T00:00:00.000000-05:00",
        "template": "@(datetime(\\"1979-07-18\\"))",
      },
      Object {
        "output": "1979-07-18T10:30:45.123456Z",
        "template": "@(datetime(\\"1979-07-18T10:30:45.123456Z\\"))",
      },
      Object {
        "output": "2010-05-10T00:00:00.000000-05:00",
        "template": "@(datetime(\\"10/05/2010\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(datetime(\\"NOT DATE\\"))",
      },
    ],
    "signature": "datetime(value)",
    "summary": "Tries to convert \`value\` to a datetime.",
  },
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds",
    "examples": Array [
      Object {
        "output": "2017-01-20T00:00:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15\\", 5, \\"D\\"))",
      },
      Object {
        "output": "2017-01-15T11:15:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15 10:45\\", 30, \\"m\\"))",
      },
    ],
    "signature": "datetime_add(datetime, offset, unit)",
    "summary": "Calculates the date value arrived at by adding \`offset\` number of \`unit\` to the \`datetime\`",
  },
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-01-17\\", \\"D\\"))",
      },
      Object {
        "output": "17",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"W\\"))",
      },
      Object {
        "output": "4",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"M\\"))",
      },
      Object {
        "output": "1",
        "template": "@(datetime_diff(\\"2017-01-17 10:50\\", \\"2017-01-17 12:30\\", \\"h\\"))",
      },
      Object {
        "output": "-2",
        "template": "@(datetime_diff(\\"2017-01-17\\", \\"2015-12-17\\", \\"Y\\"))",
      },
    ],
    "signature": "datetime_diff(date1, date2, unit)",
    "summary": "Returns the duration between \`date1\` and \`date2\` in the \`unit\` specified.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-06-12T11:56:59.000000-05:00",
        "template": "@(datetime_from_epoch(1497286619))",
      },
      Object {
        "output": "2017-06-12T11:56:59.123456-05:00",
        "template": "@(datetime_from_epoch(1497286619.123456))",
      },
    ],
    "signature": "datetime_from_epoch(seconds)",
    "summary": "Converts the UNIX epoch time \`seconds\` into a new date.",
  },
]
`;

exports[`helpers filterOptions should filter options for "date" 1`] = `
Array [
  Object {
    "detail": "If it is text then it will be parsed into a date using the default date format.
An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "1979-07-18",
        "template": "@(date(\\"1979-07-18\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(date(\\"1979-07-18T10:30:45.123456Z\\"))",
      },
      Object {
        "output": "2010-05-10",
        "template": "@(date(\\"10/05/2010\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(date(\\"NOT DATE\\"))",
      },
    ],
    "signature": "date(value)",
    "summary": "Tries to convert \`value\` to a date.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-01-15",
        "template": "@(date_from_parts(2017, 1, 15))",
      },
      Object {
        "output": "2017-03-03",
        "template": "@(date_from_parts(2017, 2, 31))",
      },
      Object {
        "output": "ERROR",
        "template": "@(date_from_parts(2017, 13, 15))",
      },
    ],
    "signature": "date_from_parts(year, month, day)",
    "summary": "Creates a date from \`year\`, \`month\` and \`day\`.",
  },
  Object {
    "detail": "If it is text then it will be parsed into a datetime using the default date
and time formats. An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "1979-07-18T00:00:00.000000-05:00",
        "template": "@(datetime(\\"1979-07-18\\"))",
      },
      Object {
        "output": "1979-07-18T10:30:45.123456Z",
        "template": "@(datetime(\\"1979-07-18T10:30:45.123456Z\\"))",
      },
      Object {
        "output": "2010-05-10T00:00:00.000000-05:00",
        "template": "@(datetime(\\"10/05/2010\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(datetime(\\"NOT DATE\\"))",
      },
    ],
    "signature": "datetime(value)",
    "summary": "Tries to convert \`value\` to a datetime.",
  },
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds",
    "examples": Array [
      Object {
        "output": "2017-01-20T00:00:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15\\", 5, \\"D\\"))",
      },
      Object {
        "output": "2017-01-15T11:15:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15 10:45\\", 30, \\"m\\"))",
      },
    ],
    "signature": "datetime_add(datetime, offset, unit)",
    "summary": "Calculates the date value arrived at by adding \`offset\` number of \`unit\` to the \`datetime\`",
  },
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-01-17\\", \\"D\\"))",
      },
      Object {
        "output": "17",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"W\\"))",
      },
      Object {
        "output": "4",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"M\\"))",
      },
      Object {
        "output": "1",
        "template": "@(datetime_diff(\\"2017-01-17 10:50\\", \\"2017-01-17 12:30\\", \\"h\\"))",
      },
      Object {
        "output": "-2",
        "template": "@(datetime_diff(\\"2017-01-17\\", \\"2015-12-17\\", \\"Y\\"))",
      },
    ],
    "signature": "datetime_diff(date1, date2, unit)",
    "summary": "Returns the duration between \`date1\` and \`date2\` in the \`unit\` specified.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-06-12T11:56:59.000000-05:00",
        "template": "@(datetime_from_epoch(1497286619))",
      },
      Object {
        "output": "2017-06-12T11:56:59.123456-05:00",
        "template": "@(datetime_from_epoch(1497286619.123456))",
      },
    ],
    "signature": "datetime_from_epoch(seconds)",
    "summary": "Converts the UNIX epoch time \`seconds\` into a new date.",
  },
]
`;

exports[`helpers filterOptions should filter options for "date." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "date_from_parts" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-01-15",
        "template": "@(date_from_parts(2017, 1, 15))",
      },
      Object {
        "output": "2017-03-03",
        "template": "@(date_from_parts(2017, 2, 31))",
      },
      Object {
        "output": "ERROR",
        "template": "@(date_from_parts(2017, 13, 15))",
      },
    ],
    "signature": "date_from_parts(year, month, day)",
    "summary": "Creates a date from \`year\`, \`month\` and \`day\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "date_from_parts." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "datetime" 1`] = `
Array [
  Object {
    "detail": "If it is text then it will be parsed into a datetime using the default date
and time formats. An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "1979-07-18T00:00:00.000000-05:00",
        "template": "@(datetime(\\"1979-07-18\\"))",
      },
      Object {
        "output": "1979-07-18T10:30:45.123456Z",
        "template": "@(datetime(\\"1979-07-18T10:30:45.123456Z\\"))",
      },
      Object {
        "output": "2010-05-10T00:00:00.000000-05:00",
        "template": "@(datetime(\\"10/05/2010\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(datetime(\\"NOT DATE\\"))",
      },
    ],
    "signature": "datetime(value)",
    "summary": "Tries to convert \`value\` to a datetime.",
  },
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds",
    "examples": Array [
      Object {
        "output": "2017-01-20T00:00:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15\\", 5, \\"D\\"))",
      },
      Object {
        "output": "2017-01-15T11:15:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15 10:45\\", 30, \\"m\\"))",
      },
    ],
    "signature": "datetime_add(datetime, offset, unit)",
    "summary": "Calculates the date value arrived at by adding \`offset\` number of \`unit\` to the \`datetime\`",
  },
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-01-17\\", \\"D\\"))",
      },
      Object {
        "output": "17",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"W\\"))",
      },
      Object {
        "output": "4",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"M\\"))",
      },
      Object {
        "output": "1",
        "template": "@(datetime_diff(\\"2017-01-17 10:50\\", \\"2017-01-17 12:30\\", \\"h\\"))",
      },
      Object {
        "output": "-2",
        "template": "@(datetime_diff(\\"2017-01-17\\", \\"2015-12-17\\", \\"Y\\"))",
      },
    ],
    "signature": "datetime_diff(date1, date2, unit)",
    "summary": "Returns the duration between \`date1\` and \`date2\` in the \`unit\` specified.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-06-12T11:56:59.000000-05:00",
        "template": "@(datetime_from_epoch(1497286619))",
      },
      Object {
        "output": "2017-06-12T11:56:59.123456-05:00",
        "template": "@(datetime_from_epoch(1497286619.123456))",
      },
    ],
    "signature": "datetime_from_epoch(seconds)",
    "summary": "Converts the UNIX epoch time \`seconds\` into a new date.",
  },
]
`;

exports[`helpers filterOptions should filter options for "datetime." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "datetime_add" 1`] = `
Array [
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds",
    "examples": Array [
      Object {
        "output": "2017-01-20T00:00:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15\\", 5, \\"D\\"))",
      },
      Object {
        "output": "2017-01-15T11:15:00.000000-05:00",
        "template": "@(datetime_add(\\"2017-01-15 10:45\\", 30, \\"m\\"))",
      },
    ],
    "signature": "datetime_add(datetime, offset, unit)",
    "summary": "Calculates the date value arrived at by adding \`offset\` number of \`unit\` to the \`datetime\`",
  },
]
`;

exports[`helpers filterOptions should filter options for "datetime_add." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "datetime_diff" 1`] = `
Array [
  Object {
    "detail": "Valid durations are \\"Y\\" for years, \\"M\\" for months, \\"W\\" for weeks, \\"D\\" for days, \\"h\\" for hour,
\\"m\\" for minutes, \\"s\\" for seconds.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-01-17\\", \\"D\\"))",
      },
      Object {
        "output": "17",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"W\\"))",
      },
      Object {
        "output": "4",
        "template": "@(datetime_diff(\\"2017-01-15\\", \\"2017-05-15\\", \\"M\\"))",
      },
      Object {
        "output": "1",
        "template": "@(datetime_diff(\\"2017-01-17 10:50\\", \\"2017-01-17 12:30\\", \\"h\\"))",
      },
      Object {
        "output": "-2",
        "template": "@(datetime_diff(\\"2017-01-17\\", \\"2015-12-17\\", \\"Y\\"))",
      },
    ],
    "signature": "datetime_diff(date1, date2, unit)",
    "summary": "Returns the duration between \`date1\` and \`date2\` in the \`unit\` specified.",
  },
]
`;

exports[`helpers filterOptions should filter options for "datetime_diff." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "datetime_from_epoch" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2017-06-12T11:56:59.000000-05:00",
        "template": "@(datetime_from_epoch(1497286619))",
      },
      Object {
        "output": "2017-06-12T11:56:59.123456-05:00",
        "template": "@(datetime_from_epoch(1497286619.123456))",
      },
    ],
    "signature": "datetime_from_epoch(seconds)",
    "summary": "Converts the UNIX epoch time \`seconds\` into a new date.",
  },
]
`;

exports[`helpers filterOptions should filter options for "datetime_from_epoch." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "de" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "default_value",
        "template": "@(default(undeclared.var, \\"default_value\\"))",
      },
      Object {
        "output": "10",
        "template": "@(default(\\"10\\", \\"20\\"))",
      },
      Object {
        "output": "value",
        "template": "@(default(\\"\\", \\"value\\"))",
      },
      Object {
        "output": "[1, 2]",
        "template": "@(default(array(1, 2), \\"value\\"))",
      },
      Object {
        "output": "value",
        "template": "@(default(array(), \\"value\\"))",
      },
      Object {
        "output": "today",
        "template": "@(default(datetime(\\"invalid-date\\"), \\"today\\"))",
      },
      Object {
        "output": "ok",
        "template": "@(default(format_urn(\\"invalid-urn\\"), \\"ok\\"))",
      },
    ],
    "signature": "default(value, default)",
    "summary": "Returns \`value\` if is not empty or an error, otherwise it returns \`default\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "default" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "default_value",
        "template": "@(default(undeclared.var, \\"default_value\\"))",
      },
      Object {
        "output": "10",
        "template": "@(default(\\"10\\", \\"20\\"))",
      },
      Object {
        "output": "value",
        "template": "@(default(\\"\\", \\"value\\"))",
      },
      Object {
        "output": "[1, 2]",
        "template": "@(default(array(1, 2), \\"value\\"))",
      },
      Object {
        "output": "value",
        "template": "@(default(array(), \\"value\\"))",
      },
      Object {
        "output": "today",
        "template": "@(default(datetime(\\"invalid-date\\"), \\"today\\"))",
      },
      Object {
        "output": "ok",
        "template": "@(default(format_urn(\\"invalid-urn\\"), \\"ok\\"))",
      },
    ],
    "signature": "default(value, default)",
    "summary": "Returns \`value\` if is not empty or an error, otherwise it returns \`default\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "default." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "e" 1`] = `
Array [
  Object {
    "detail": "The returned number can contain fractional seconds.",
    "examples": Array [
      Object {
        "output": "1497286619",
        "template": "@(epoch(\\"2017-06-12T16:56:59.000000Z\\"))",
      },
      Object {
        "output": "1497286619",
        "template": "@(epoch(\\"2017-06-12T18:56:59.000000+02:00\\"))",
      },
      Object {
        "output": "1497286619.123456",
        "template": "@(epoch(\\"2017-06-12T16:56:59.123456Z\\"))",
      },
      Object {
        "output": "1497286619",
        "template": "@(round_down(epoch(\\"2017-06-12T16:56:59.123456Z\\")))",
      },
    ],
    "signature": "epoch(date)",
    "summary": "Converts \`date\` to a UNIX epoch time.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Ryan Lewis",
        "template": "@(extract(contact, \\"name\\"))",
      },
      Object {
        "output": "Testers",
        "template": "@(extract(contact.groups[0], \\"name\\"))",
      },
    ],
    "signature": "extract(object, properties)",
    "summary": "Takes an object and extracts the named property.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{name: Testers}",
        "template": "@(extract_object(contact.groups[0], \\"name\\"))",
      },
    ],
    "signature": "extract_object(object, properties...)",
    "summary": "Takes an object and returns a new object by extracting only the named properties.",
  },
]
`;

exports[`helpers filterOptions should filter options for "ep" 1`] = `
Array [
  Object {
    "detail": "The returned number can contain fractional seconds.",
    "examples": Array [
      Object {
        "output": "1497286619",
        "template": "@(epoch(\\"2017-06-12T16:56:59.000000Z\\"))",
      },
      Object {
        "output": "1497286619",
        "template": "@(epoch(\\"2017-06-12T18:56:59.000000+02:00\\"))",
      },
      Object {
        "output": "1497286619.123456",
        "template": "@(epoch(\\"2017-06-12T16:56:59.123456Z\\"))",
      },
      Object {
        "output": "1497286619",
        "template": "@(round_down(epoch(\\"2017-06-12T16:56:59.123456Z\\")))",
      },
    ],
    "signature": "epoch(date)",
    "summary": "Converts \`date\` to a UNIX epoch time.",
  },
]
`;

exports[`helpers filterOptions should filter options for "epoch" 1`] = `
Array [
  Object {
    "detail": "The returned number can contain fractional seconds.",
    "examples": Array [
      Object {
        "output": "1497286619",
        "template": "@(epoch(\\"2017-06-12T16:56:59.000000Z\\"))",
      },
      Object {
        "output": "1497286619",
        "template": "@(epoch(\\"2017-06-12T18:56:59.000000+02:00\\"))",
      },
      Object {
        "output": "1497286619.123456",
        "template": "@(epoch(\\"2017-06-12T16:56:59.123456Z\\"))",
      },
      Object {
        "output": "1497286619",
        "template": "@(round_down(epoch(\\"2017-06-12T16:56:59.123456Z\\")))",
      },
    ],
    "signature": "epoch(date)",
    "summary": "Converts \`date\` to a UNIX epoch time.",
  },
]
`;

exports[`helpers filterOptions should filter options for "epoch." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "ex" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Ryan Lewis",
        "template": "@(extract(contact, \\"name\\"))",
      },
      Object {
        "output": "Testers",
        "template": "@(extract(contact.groups[0], \\"name\\"))",
      },
    ],
    "signature": "extract(object, properties)",
    "summary": "Takes an object and extracts the named property.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{name: Testers}",
        "template": "@(extract_object(contact.groups[0], \\"name\\"))",
      },
    ],
    "signature": "extract_object(object, properties...)",
    "summary": "Takes an object and returns a new object by extracting only the named properties.",
  },
]
`;

exports[`helpers filterOptions should filter options for "extract" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Ryan Lewis",
        "template": "@(extract(contact, \\"name\\"))",
      },
      Object {
        "output": "Testers",
        "template": "@(extract(contact.groups[0], \\"name\\"))",
      },
    ],
    "signature": "extract(object, properties)",
    "summary": "Takes an object and extracts the named property.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{name: Testers}",
        "template": "@(extract_object(contact.groups[0], \\"name\\"))",
      },
    ],
    "signature": "extract_object(object, properties...)",
    "summary": "Takes an object and returns a new object by extracting only the named properties.",
  },
]
`;

exports[`helpers filterOptions should filter options for "extract." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "extract_object" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{name: Testers}",
        "template": "@(extract_object(contact.groups[0], \\"name\\"))",
      },
    ],
    "signature": "extract_object(object, properties...)",
    "summary": "Takes an object and returns a new object by extracting only the named properties.",
  },
]
`;

exports[`helpers filterOptions should filter options for "extract_object." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "f" 1`] = `
Array [
  Object {
    "name": "fields",
    "summary": "The custom fields for the contact",
  },
  Object {
    "detail": "The index starts at zero. When splitting with a space, the delimiter is considered to be all whitespace.",
    "examples": Array [
      Object {
        "output": "b",
        "template": "@(field(\\"a,b,c\\", 1, \\",\\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a,,b,c\\", 1, \\",\\"))",
      },
      Object {
        "output": "b",
        "template": "@(field(\\"a   b c\\", 1, \\" \\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a		b	c	d\\", 1, \\"	\\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a\\\\t\\\\tb\\\\tc\\\\td\\", 1, \\" \\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(field(\\"a,b,c\\", \\"foo\\", \\",\\"))",
      },
    ],
    "signature": "field(text, index, delimiter)",
    "summary": "Splits \`text\` using the given \`delimiter\` and returns the field at \`index\`.",
  },
  Object {
    "detail": "If the given function takes more than one argument, you can pass additional arguments after the function.",
    "examples": Array [
      Object {
        "output": "[A, B, C]",
        "template": "@(foreach(array(\\"a\\", \\"b\\", \\"c\\"), upper))",
      },
      Object {
        "output": "[the, fox, jumped]",
        "template": "@(foreach(array(\\"the man\\", \\"fox\\", \\"jumped up\\"), word, 0))",
      },
    ],
    "signature": "foreach(values, func, [args...])",
    "summary": "Creates a new array by applying \`func\` to each value in \`values\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1,234.567",
        "template": "@(format(1234.5670))",
      },
      Object {
        "output": "11-04-2018 13:24",
        "template": "@(format(now()))",
      },
      Object {
        "output": "11-04-2018",
        "template": "@(format(today()))",
      },
    ],
    "signature": "format(value)",
    "summary": "Formats \`value\` according to its type.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31",
    "examples": Array [
      Object {
        "output": "18-07-1979",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10",
        "template": "@(format_date(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_date(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_date(date, [,format])",
    "summary": "Formats \`date\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31
* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM
* \`Z\`         - hour and minute offset from UTC, or Z for UTC
* \`ZZZ\`       - hour and minute offset from UTC

Timezone should be a location name as specified in the IANA Time Zone database, such
as \\"America/Guayaquil\\" or \\"America/Los_Angeles\\". If not specified, the current timezone
will be used. An error will be returned if the timezone is not recognized.",
    "examples": Array [
      Object {
        "output": "18-07-1979 10:00",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10 14:50",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD tt:mm\\"))",
      },
      Object {
        "output": "2010-05-10 12:50 PM",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY-MM-DD tt:mm AA\\", \\"America/Los_Angeles\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_datetime(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_datetime(datetime [,format [,timezone]])",
    "summary": "Formats \`datetime\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Rwanda",
        "template": "@(format_location(\\"Rwanda\\"))",
      },
      Object {
        "output": "Kigali",
        "template": "@(format_location(\\"Rwanda > Kigali\\"))",
      },
    ],
    "signature": "format_location(location)",
    "summary": "Formats the given \`location\` as its name.",
  },
  Object {
    "detail": "An optional third argument \`humanize\` can be false to disable the use of thousand separators.",
    "examples": Array [
      Object {
        "output": "1,234",
        "template": "@(format_number(1234))",
      },
      Object {
        "output": "1,234.567",
        "template": "@(format_number(1234.5670))",
      },
      Object {
        "output": "1,234.57",
        "template": "@(format_number(1234.5670, 2, true))",
      },
      Object {
        "output": "1235",
        "template": "@(format_number(1234.5678, 0, false))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_number(\\"foo\\", 2, false))",
      },
    ],
    "signature": "format_number(number, places [, humanize])",
    "summary": "Formats \`number\` to the given number of decimal \`places\`.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM",
    "examples": Array [
      Object {
        "output": "14:50",
        "template": "@(format_time(\\"14:50:30.000000\\"))",
      },
      Object {
        "output": "2:50 pm",
        "template": "@(format_time(\\"14:50:30.000000\\", \\"h:mm aa\\"))",
      },
      Object {
        "output": "27",
        "template": "@(format_time(\\"15:00:27.000000\\", \\"s\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_time(\\"NOT TIME\\", \\"hh:mm\\"))",
      },
    ],
    "signature": "format_time(time [,format])",
    "summary": "Formats \`time\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "0781 234 567",
        "template": "@(format_urn(\\"tel:+250781234567\\"))",
      },
      Object {
        "output": "billy_bob",
        "template": "@(format_urn(\\"twitter:134252511151#billy_bob\\"))",
      },
      Object {
        "output": "(206) 555-1212",
        "template": "@(format_urn(contact.urn))",
      },
      Object {
        "output": "(206) 555-1212",
        "template": "@(format_urn(urns.tel))",
      },
      Object {
        "output": "foo@bar.com",
        "template": "@(format_urn(urns.mailto))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_urn(\\"NOT URN\\"))",
      },
    ],
    "signature": "format_urn(urn)",
    "summary": "Formats \`urn\` into human friendly text.",
  },
]
`;

exports[`helpers filterOptions should filter options for "fi" 1`] = `
Array [
  Object {
    "name": "fields",
    "summary": "The custom fields for the contact",
  },
  Object {
    "detail": "The index starts at zero. When splitting with a space, the delimiter is considered to be all whitespace.",
    "examples": Array [
      Object {
        "output": "b",
        "template": "@(field(\\"a,b,c\\", 1, \\",\\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a,,b,c\\", 1, \\",\\"))",
      },
      Object {
        "output": "b",
        "template": "@(field(\\"a   b c\\", 1, \\" \\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a		b	c	d\\", 1, \\"	\\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a\\\\t\\\\tb\\\\tc\\\\td\\", 1, \\" \\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(field(\\"a,b,c\\", \\"foo\\", \\",\\"))",
      },
    ],
    "signature": "field(text, index, delimiter)",
    "summary": "Splits \`text\` using the given \`delimiter\` and returns the field at \`index\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "field" 1`] = `
Array [
  Object {
    "name": "fields",
    "summary": "The custom fields for the contact",
  },
  Object {
    "detail": "The index starts at zero. When splitting with a space, the delimiter is considered to be all whitespace.",
    "examples": Array [
      Object {
        "output": "b",
        "template": "@(field(\\"a,b,c\\", 1, \\",\\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a,,b,c\\", 1, \\",\\"))",
      },
      Object {
        "output": "b",
        "template": "@(field(\\"a   b c\\", 1, \\" \\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a		b	c	d\\", 1, \\"	\\"))",
      },
      Object {
        "output": "",
        "template": "@(field(\\"a\\\\t\\\\tb\\\\tc\\\\td\\", 1, \\" \\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(field(\\"a,b,c\\", \\"foo\\", \\",\\"))",
      },
    ],
    "signature": "field(text, index, delimiter)",
    "summary": "Splits \`text\` using the given \`delimiter\` and returns the field at \`index\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "field." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "fields" 1`] = `
Array [
  Object {
    "name": "fields",
    "summary": "The custom fields for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "fields." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "fo" 1`] = `
Array [
  Object {
    "detail": "If the given function takes more than one argument, you can pass additional arguments after the function.",
    "examples": Array [
      Object {
        "output": "[A, B, C]",
        "template": "@(foreach(array(\\"a\\", \\"b\\", \\"c\\"), upper))",
      },
      Object {
        "output": "[the, fox, jumped]",
        "template": "@(foreach(array(\\"the man\\", \\"fox\\", \\"jumped up\\"), word, 0))",
      },
    ],
    "signature": "foreach(values, func, [args...])",
    "summary": "Creates a new array by applying \`func\` to each value in \`values\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1,234.567",
        "template": "@(format(1234.5670))",
      },
      Object {
        "output": "11-04-2018 13:24",
        "template": "@(format(now()))",
      },
      Object {
        "output": "11-04-2018",
        "template": "@(format(today()))",
      },
    ],
    "signature": "format(value)",
    "summary": "Formats \`value\` according to its type.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31",
    "examples": Array [
      Object {
        "output": "18-07-1979",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10",
        "template": "@(format_date(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_date(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_date(date, [,format])",
    "summary": "Formats \`date\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31
* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM
* \`Z\`         - hour and minute offset from UTC, or Z for UTC
* \`ZZZ\`       - hour and minute offset from UTC

Timezone should be a location name as specified in the IANA Time Zone database, such
as \\"America/Guayaquil\\" or \\"America/Los_Angeles\\". If not specified, the current timezone
will be used. An error will be returned if the timezone is not recognized.",
    "examples": Array [
      Object {
        "output": "18-07-1979 10:00",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10 14:50",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD tt:mm\\"))",
      },
      Object {
        "output": "2010-05-10 12:50 PM",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY-MM-DD tt:mm AA\\", \\"America/Los_Angeles\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_datetime(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_datetime(datetime [,format [,timezone]])",
    "summary": "Formats \`datetime\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Rwanda",
        "template": "@(format_location(\\"Rwanda\\"))",
      },
      Object {
        "output": "Kigali",
        "template": "@(format_location(\\"Rwanda > Kigali\\"))",
      },
    ],
    "signature": "format_location(location)",
    "summary": "Formats the given \`location\` as its name.",
  },
  Object {
    "detail": "An optional third argument \`humanize\` can be false to disable the use of thousand separators.",
    "examples": Array [
      Object {
        "output": "1,234",
        "template": "@(format_number(1234))",
      },
      Object {
        "output": "1,234.567",
        "template": "@(format_number(1234.5670))",
      },
      Object {
        "output": "1,234.57",
        "template": "@(format_number(1234.5670, 2, true))",
      },
      Object {
        "output": "1235",
        "template": "@(format_number(1234.5678, 0, false))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_number(\\"foo\\", 2, false))",
      },
    ],
    "signature": "format_number(number, places [, humanize])",
    "summary": "Formats \`number\` to the given number of decimal \`places\`.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM",
    "examples": Array [
      Object {
        "output": "14:50",
        "template": "@(format_time(\\"14:50:30.000000\\"))",
      },
      Object {
        "output": "2:50 pm",
        "template": "@(format_time(\\"14:50:30.000000\\", \\"h:mm aa\\"))",
      },
      Object {
        "output": "27",
        "template": "@(format_time(\\"15:00:27.000000\\", \\"s\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_time(\\"NOT TIME\\", \\"hh:mm\\"))",
      },
    ],
    "signature": "format_time(time [,format])",
    "summary": "Formats \`time\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "0781 234 567",
        "template": "@(format_urn(\\"tel:+250781234567\\"))",
      },
      Object {
        "output": "billy_bob",
        "template": "@(format_urn(\\"twitter:134252511151#billy_bob\\"))",
      },
      Object {
        "output": "(206) 555-1212",
        "template": "@(format_urn(contact.urn))",
      },
      Object {
        "output": "(206) 555-1212",
        "template": "@(format_urn(urns.tel))",
      },
      Object {
        "output": "foo@bar.com",
        "template": "@(format_urn(urns.mailto))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_urn(\\"NOT URN\\"))",
      },
    ],
    "signature": "format_urn(urn)",
    "summary": "Formats \`urn\` into human friendly text.",
  },
]
`;

exports[`helpers filterOptions should filter options for "foreach" 1`] = `
Array [
  Object {
    "detail": "If the given function takes more than one argument, you can pass additional arguments after the function.",
    "examples": Array [
      Object {
        "output": "[A, B, C]",
        "template": "@(foreach(array(\\"a\\", \\"b\\", \\"c\\"), upper))",
      },
      Object {
        "output": "[the, fox, jumped]",
        "template": "@(foreach(array(\\"the man\\", \\"fox\\", \\"jumped up\\"), word, 0))",
      },
    ],
    "signature": "foreach(values, func, [args...])",
    "summary": "Creates a new array by applying \`func\` to each value in \`values\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "foreach." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "format" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1,234.567",
        "template": "@(format(1234.5670))",
      },
      Object {
        "output": "11-04-2018 13:24",
        "template": "@(format(now()))",
      },
      Object {
        "output": "11-04-2018",
        "template": "@(format(today()))",
      },
    ],
    "signature": "format(value)",
    "summary": "Formats \`value\` according to its type.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31",
    "examples": Array [
      Object {
        "output": "18-07-1979",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10",
        "template": "@(format_date(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_date(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_date(date, [,format])",
    "summary": "Formats \`date\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31
* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM
* \`Z\`         - hour and minute offset from UTC, or Z for UTC
* \`ZZZ\`       - hour and minute offset from UTC

Timezone should be a location name as specified in the IANA Time Zone database, such
as \\"America/Guayaquil\\" or \\"America/Los_Angeles\\". If not specified, the current timezone
will be used. An error will be returned if the timezone is not recognized.",
    "examples": Array [
      Object {
        "output": "18-07-1979 10:00",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10 14:50",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD tt:mm\\"))",
      },
      Object {
        "output": "2010-05-10 12:50 PM",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY-MM-DD tt:mm AA\\", \\"America/Los_Angeles\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_datetime(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_datetime(datetime [,format [,timezone]])",
    "summary": "Formats \`datetime\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Rwanda",
        "template": "@(format_location(\\"Rwanda\\"))",
      },
      Object {
        "output": "Kigali",
        "template": "@(format_location(\\"Rwanda > Kigali\\"))",
      },
    ],
    "signature": "format_location(location)",
    "summary": "Formats the given \`location\` as its name.",
  },
  Object {
    "detail": "An optional third argument \`humanize\` can be false to disable the use of thousand separators.",
    "examples": Array [
      Object {
        "output": "1,234",
        "template": "@(format_number(1234))",
      },
      Object {
        "output": "1,234.567",
        "template": "@(format_number(1234.5670))",
      },
      Object {
        "output": "1,234.57",
        "template": "@(format_number(1234.5670, 2, true))",
      },
      Object {
        "output": "1235",
        "template": "@(format_number(1234.5678, 0, false))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_number(\\"foo\\", 2, false))",
      },
    ],
    "signature": "format_number(number, places [, humanize])",
    "summary": "Formats \`number\` to the given number of decimal \`places\`.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM",
    "examples": Array [
      Object {
        "output": "14:50",
        "template": "@(format_time(\\"14:50:30.000000\\"))",
      },
      Object {
        "output": "2:50 pm",
        "template": "@(format_time(\\"14:50:30.000000\\", \\"h:mm aa\\"))",
      },
      Object {
        "output": "27",
        "template": "@(format_time(\\"15:00:27.000000\\", \\"s\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_time(\\"NOT TIME\\", \\"hh:mm\\"))",
      },
    ],
    "signature": "format_time(time [,format])",
    "summary": "Formats \`time\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "0781 234 567",
        "template": "@(format_urn(\\"tel:+250781234567\\"))",
      },
      Object {
        "output": "billy_bob",
        "template": "@(format_urn(\\"twitter:134252511151#billy_bob\\"))",
      },
      Object {
        "output": "(206) 555-1212",
        "template": "@(format_urn(contact.urn))",
      },
      Object {
        "output": "(206) 555-1212",
        "template": "@(format_urn(urns.tel))",
      },
      Object {
        "output": "foo@bar.com",
        "template": "@(format_urn(urns.mailto))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_urn(\\"NOT URN\\"))",
      },
    ],
    "signature": "format_urn(urn)",
    "summary": "Formats \`urn\` into human friendly text.",
  },
]
`;

exports[`helpers filterOptions should filter options for "format." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "format_date" 1`] = `
Array [
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31",
    "examples": Array [
      Object {
        "output": "18-07-1979",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10",
        "template": "@(format_date(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_date(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_date(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_date(date, [,format])",
    "summary": "Formats \`date\` as text according to the given \`format\`.",
  },
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31
* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM
* \`Z\`         - hour and minute offset from UTC, or Z for UTC
* \`ZZZ\`       - hour and minute offset from UTC

Timezone should be a location name as specified in the IANA Time Zone database, such
as \\"America/Guayaquil\\" or \\"America/Los_Angeles\\". If not specified, the current timezone
will be used. An error will be returned if the timezone is not recognized.",
    "examples": Array [
      Object {
        "output": "18-07-1979 10:00",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10 14:50",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD tt:mm\\"))",
      },
      Object {
        "output": "2010-05-10 12:50 PM",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY-MM-DD tt:mm AA\\", \\"America/Los_Angeles\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_datetime(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_datetime(datetime [,format [,timezone]])",
    "summary": "Formats \`datetime\` as text according to the given \`format\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "format_date." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "format_datetime" 1`] = `
Array [
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31
* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM
* \`Z\`         - hour and minute offset from UTC, or Z for UTC
* \`ZZZ\`       - hour and minute offset from UTC

Timezone should be a location name as specified in the IANA Time Zone database, such
as \\"America/Guayaquil\\" or \\"America/Los_Angeles\\". If not specified, the current timezone
will be used. An error will be returned if the timezone is not recognized.",
    "examples": Array [
      Object {
        "output": "18-07-1979 10:00",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\"))",
      },
      Object {
        "output": "1979-07-18",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010 5 10 14:50",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY M DD tt:mm\\"))",
      },
      Object {
        "output": "2010-05-10 12:50 PM",
        "template": "@(format_datetime(\\"2010-05-10T19:50:00.000000Z\\", \\"YYYY-MM-DD tt:mm AA\\", \\"America/Los_Angeles\\"))",
      },
      Object {
        "output": "1979",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"YYYY\\"))",
      },
      Object {
        "output": "7",
        "template": "@(format_datetime(\\"1979-07-18T15:00:00.000000Z\\", \\"M\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_datetime(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "format_datetime(datetime [,format [,timezone]])",
    "summary": "Formats \`datetime\` as text according to the given \`format\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "format_datetime." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "format_location" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Rwanda",
        "template": "@(format_location(\\"Rwanda\\"))",
      },
      Object {
        "output": "Kigali",
        "template": "@(format_location(\\"Rwanda > Kigali\\"))",
      },
    ],
    "signature": "format_location(location)",
    "summary": "Formats the given \`location\` as its name.",
  },
]
`;

exports[`helpers filterOptions should filter options for "format_location." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "format_number" 1`] = `
Array [
  Object {
    "detail": "An optional third argument \`humanize\` can be false to disable the use of thousand separators.",
    "examples": Array [
      Object {
        "output": "1,234",
        "template": "@(format_number(1234))",
      },
      Object {
        "output": "1,234.567",
        "template": "@(format_number(1234.5670))",
      },
      Object {
        "output": "1,234.57",
        "template": "@(format_number(1234.5670, 2, true))",
      },
      Object {
        "output": "1235",
        "template": "@(format_number(1234.5678, 0, false))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_number(\\"foo\\", 2, false))",
      },
    ],
    "signature": "format_number(number, places [, humanize])",
    "summary": "Formats \`number\` to the given number of decimal \`places\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "format_number." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "format_time" 1`] = `
Array [
  Object {
    "detail": "If \`format\` is not specified then the environment's default format is used. The format
string can consist of the following characters. The characters ' ', ':', ',', 'T', '-'
and '_' are ignored. Any other character is an error.

* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM",
    "examples": Array [
      Object {
        "output": "14:50",
        "template": "@(format_time(\\"14:50:30.000000\\"))",
      },
      Object {
        "output": "2:50 pm",
        "template": "@(format_time(\\"14:50:30.000000\\", \\"h:mm aa\\"))",
      },
      Object {
        "output": "27",
        "template": "@(format_time(\\"15:00:27.000000\\", \\"s\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_time(\\"NOT TIME\\", \\"hh:mm\\"))",
      },
    ],
    "signature": "format_time(time [,format])",
    "summary": "Formats \`time\` as text according to the given \`format\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "format_time." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "format_urn" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "0781 234 567",
        "template": "@(format_urn(\\"tel:+250781234567\\"))",
      },
      Object {
        "output": "billy_bob",
        "template": "@(format_urn(\\"twitter:134252511151#billy_bob\\"))",
      },
      Object {
        "output": "(206) 555-1212",
        "template": "@(format_urn(contact.urn))",
      },
      Object {
        "output": "(206) 555-1212",
        "template": "@(format_urn(urns.tel))",
      },
      Object {
        "output": "foo@bar.com",
        "template": "@(format_urn(urns.mailto))",
      },
      Object {
        "output": "ERROR",
        "template": "@(format_urn(\\"NOT URN\\"))",
      },
    ],
    "signature": "format_urn(urn)",
    "summary": "Formats \`urn\` into human friendly text.",
  },
]
`;

exports[`helpers filterOptions should filter options for "format_urn." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "i" 1`] = `
Array [
  Object {
    "name": "input",
    "summary": "The most recent input",
  },
  Object {
    "detail": "If the first argument is an error that error is returned.",
    "examples": Array [
      Object {
        "output": "foo",
        "template": "@(if(1 = 1, \\"foo\\", \\"bar\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(if(\\"foo\\" > \\"bar\\", \\"foo\\", \\"bar\\"))",
      },
    ],
    "signature": "if(test, value1, value2)",
    "summary": "Returns \`value1\` if \`test\` is truthy or \`value2\` if not.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(is_error(datetime(\\"foo\\")))",
      },
      Object {
        "output": "true",
        "template": "@(is_error(run.not.existing))",
      },
      Object {
        "output": "false",
        "template": "@(is_error(\\"hello\\"))",
      },
    ],
    "signature": "is_error(value)",
    "summary": "Returns whether \`value\` is an error",
  },
]
`;

exports[`helpers filterOptions should filter options for "if" 1`] = `
Array [
  Object {
    "detail": "If the first argument is an error that error is returned.",
    "examples": Array [
      Object {
        "output": "foo",
        "template": "@(if(1 = 1, \\"foo\\", \\"bar\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(if(\\"foo\\" > \\"bar\\", \\"foo\\", \\"bar\\"))",
      },
    ],
    "signature": "if(test, value1, value2)",
    "summary": "Returns \`value1\` if \`test\` is truthy or \`value2\` if not.",
  },
]
`;

exports[`helpers filterOptions should filter options for "if." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "in" 1`] = `
Array [
  Object {
    "name": "input",
    "summary": "The most recent input",
  },
]
`;

exports[`helpers filterOptions should filter options for "input" 1`] = `
Array [
  Object {
    "name": "input",
    "summary": "The most recent input",
  },
  Object {
    "name": "input.uuid",
    "summary": "The UUID of the last input",
  },
  Object {
    "name": "input.type",
    "summary": "The type of the last input",
  },
  Object {
    "name": "input.channel",
    "summary": "The channel the last input was received on",
  },
  Object {
    "name": "input.created_on",
    "summary": "The date of the last input",
  },
  Object {
    "name": "input.text",
    "summary": "The text from the last message",
  },
  Object {
    "name": "input.attachments",
    "summary": "The attachments from the last message",
  },
]
`;

exports[`helpers filterOptions should filter options for "input." 1`] = `
Array [
  Object {
    "name": "input.uuid",
    "summary": "The UUID of the last input",
  },
  Object {
    "name": "input.type",
    "summary": "The type of the last input",
  },
  Object {
    "name": "input.channel",
    "summary": "The channel the last input was received on",
  },
  Object {
    "name": "input.created_on",
    "summary": "The date of the last input",
  },
  Object {
    "name": "input.text",
    "summary": "The text from the last message",
  },
  Object {
    "name": "input.attachments",
    "summary": "The attachments from the last message",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.a" 1`] = `
Array [
  Object {
    "name": "input.attachments",
    "summary": "The attachments from the last message",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.at" 1`] = `
Array [
  Object {
    "name": "input.attachments",
    "summary": "The attachments from the last message",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.attachments" 1`] = `
Array [
  Object {
    "name": "input.attachments",
    "summary": "The attachments from the last message",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.c" 1`] = `
Array [
  Object {
    "name": "input.channel",
    "summary": "The channel the last input was received on",
  },
  Object {
    "name": "input.created_on",
    "summary": "The date of the last input",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.ch" 1`] = `
Array [
  Object {
    "name": "input.channel",
    "summary": "The channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel" 1`] = `
Array [
  Object {
    "name": "input.channel",
    "summary": "The channel the last input was received on",
  },
  Object {
    "name": "input.channel.address",
    "summary": "The channel the last input was received on",
  },
  Object {
    "name": "input.channel.name",
    "summary": "The name of the channel the last input was received on",
  },
  Object {
    "name": "input.channel.uuid",
    "summary": "The uuid of the channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.a" 1`] = `
Array [
  Object {
    "name": "input.channel.address",
    "summary": "The channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.ad" 1`] = `
Array [
  Object {
    "name": "input.channel.address",
    "summary": "The channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.address" 1`] = `
Array [
  Object {
    "name": "input.channel.address",
    "summary": "The channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.n" 1`] = `
Array [
  Object {
    "name": "input.channel.name",
    "summary": "The name of the channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.na" 1`] = `
Array [
  Object {
    "name": "input.channel.name",
    "summary": "The name of the channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.name" 1`] = `
Array [
  Object {
    "name": "input.channel.name",
    "summary": "The name of the channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.u" 1`] = `
Array [
  Object {
    "name": "input.channel.uuid",
    "summary": "The uuid of the channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.uu" 1`] = `
Array [
  Object {
    "name": "input.channel.uuid",
    "summary": "The uuid of the channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.channel.uuid" 1`] = `
Array [
  Object {
    "name": "input.channel.uuid",
    "summary": "The uuid of the channel the last input was received on",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.cr" 1`] = `
Array [
  Object {
    "name": "input.created_on",
    "summary": "The date of the last input",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.created_on" 1`] = `
Array [
  Object {
    "name": "input.created_on",
    "summary": "The date of the last input",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.t" 1`] = `
Array [
  Object {
    "name": "input.type",
    "summary": "The type of the last input",
  },
  Object {
    "name": "input.text",
    "summary": "The text from the last message",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.te" 1`] = `
Array [
  Object {
    "name": "input.text",
    "summary": "The text from the last message",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.text" 1`] = `
Array [
  Object {
    "name": "input.text",
    "summary": "The text from the last message",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.ty" 1`] = `
Array [
  Object {
    "name": "input.type",
    "summary": "The type of the last input",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.type" 1`] = `
Array [
  Object {
    "name": "input.type",
    "summary": "The type of the last input",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.u" 1`] = `
Array [
  Object {
    "name": "input.uuid",
    "summary": "The UUID of the last input",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.uu" 1`] = `
Array [
  Object {
    "name": "input.uuid",
    "summary": "The UUID of the last input",
  },
]
`;

exports[`helpers filterOptions should filter options for "input.uuid" 1`] = `
Array [
  Object {
    "name": "input.uuid",
    "summary": "The UUID of the last input",
  },
]
`;

exports[`helpers filterOptions should filter options for "is" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(is_error(datetime(\\"foo\\")))",
      },
      Object {
        "output": "true",
        "template": "@(is_error(run.not.existing))",
      },
      Object {
        "output": "false",
        "template": "@(is_error(\\"hello\\"))",
      },
    ],
    "signature": "is_error(value)",
    "summary": "Returns whether \`value\` is an error",
  },
]
`;

exports[`helpers filterOptions should filter options for "is_error" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(is_error(datetime(\\"foo\\")))",
      },
      Object {
        "output": "true",
        "template": "@(is_error(run.not.existing))",
      },
      Object {
        "output": "false",
        "template": "@(is_error(\\"hello\\"))",
      },
    ],
    "signature": "is_error(value)",
    "summary": "Returns whether \`value\` is an error",
  },
]
`;

exports[`helpers filterOptions should filter options for "is_error." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "j" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "a|b|c",
        "template": "@(join(array(\\"a\\", \\"b\\", \\"c\\"), \\"|\\"))",
      },
      Object {
        "output": "a b c",
        "template": "@(join(split(\\"a.b.c\\", \\".\\"), \\" \\"))",
      },
    ],
    "signature": "join(array, separator)",
    "summary": "Joins the given \`array\` of strings with \`separator\` to make text.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "\\"string\\"",
        "template": "@(json(\\"string\\"))",
      },
      Object {
        "output": "10",
        "template": "@(json(10))",
      },
      Object {
        "output": "null",
        "template": "@(json(null))",
      },
      Object {
        "output": "\\"5d76d86b-3bb9-4d5a-b822-c9d86f5d8e4f\\"",
        "template": "@(json(contact.uuid))",
      },
    ],
    "signature": "json(value)",
    "summary": "Returns the JSON representation of \`value\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "jo" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "a|b|c",
        "template": "@(join(array(\\"a\\", \\"b\\", \\"c\\"), \\"|\\"))",
      },
      Object {
        "output": "a b c",
        "template": "@(join(split(\\"a.b.c\\", \\".\\"), \\" \\"))",
      },
    ],
    "signature": "join(array, separator)",
    "summary": "Joins the given \`array\` of strings with \`separator\` to make text.",
  },
]
`;

exports[`helpers filterOptions should filter options for "join" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "a|b|c",
        "template": "@(join(array(\\"a\\", \\"b\\", \\"c\\"), \\"|\\"))",
      },
      Object {
        "output": "a b c",
        "template": "@(join(split(\\"a.b.c\\", \\".\\"), \\" \\"))",
      },
    ],
    "signature": "join(array, separator)",
    "summary": "Joins the given \`array\` of strings with \`separator\` to make text.",
  },
]
`;

exports[`helpers filterOptions should filter options for "join." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "js" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "\\"string\\"",
        "template": "@(json(\\"string\\"))",
      },
      Object {
        "output": "10",
        "template": "@(json(10))",
      },
      Object {
        "output": "null",
        "template": "@(json(null))",
      },
      Object {
        "output": "\\"5d76d86b-3bb9-4d5a-b822-c9d86f5d8e4f\\"",
        "template": "@(json(contact.uuid))",
      },
    ],
    "signature": "json(value)",
    "summary": "Returns the JSON representation of \`value\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "json" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "\\"string\\"",
        "template": "@(json(\\"string\\"))",
      },
      Object {
        "output": "10",
        "template": "@(json(10))",
      },
      Object {
        "output": "null",
        "template": "@(json(null))",
      },
      Object {
        "output": "\\"5d76d86b-3bb9-4d5a-b822-c9d86f5d8e4f\\"",
        "template": "@(json(contact.uuid))",
      },
    ],
    "signature": "json(value)",
    "summary": "Returns the JSON representation of \`value\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "json." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "l" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "hello",
        "template": "@(lower(\\"HellO\\"))",
      },
      Object {
        "output": "hello",
        "template": "@(lower(\\"hello\\"))",
      },
      Object {
        "output": "123",
        "template": "@(lower(\\"123\\"))",
      },
      Object {
        "output": "😀",
        "template": "@(lower(\\"😀\\"))",
      },
    ],
    "signature": "lower(text)",
    "summary": "Converts \`text\` to lowercase.",
  },
]
`;

exports[`helpers filterOptions should filter options for "lo" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "hello",
        "template": "@(lower(\\"HellO\\"))",
      },
      Object {
        "output": "hello",
        "template": "@(lower(\\"hello\\"))",
      },
      Object {
        "output": "123",
        "template": "@(lower(\\"123\\"))",
      },
      Object {
        "output": "😀",
        "template": "@(lower(\\"😀\\"))",
      },
    ],
    "signature": "lower(text)",
    "summary": "Converts \`text\` to lowercase.",
  },
]
`;

exports[`helpers filterOptions should filter options for "lower" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "hello",
        "template": "@(lower(\\"HellO\\"))",
      },
      Object {
        "output": "hello",
        "template": "@(lower(\\"hello\\"))",
      },
      Object {
        "output": "123",
        "template": "@(lower(\\"123\\"))",
      },
      Object {
        "output": "😀",
        "template": "@(lower(\\"😀\\"))",
      },
    ],
    "signature": "lower(text)",
    "summary": "Converts \`text\` to lowercase.",
  },
]
`;

exports[`helpers filterOptions should filter options for "lower." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "m" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(max(1, 2))",
      },
      Object {
        "output": "10",
        "template": "@(max(1, -1, 10))",
      },
      Object {
        "output": "ERROR",
        "template": "@(max(1, 10, \\"foo\\"))",
      },
    ],
    "signature": "max(numbers...)",
    "summary": "Returns the maximum value in \`numbers\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1.5",
        "template": "@(mean(1, 2))",
      },
      Object {
        "output": "3",
        "template": "@(mean(1, 2, 6))",
      },
      Object {
        "output": "ERROR",
        "template": "@(mean(1, \\"foo\\"))",
      },
    ],
    "signature": "mean(numbers...)",
    "summary": "Returns the arithmetic mean of \`numbers\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1",
        "template": "@(min(1, 2))",
      },
      Object {
        "output": "-10",
        "template": "@(min(2, 2, -10))",
      },
      Object {
        "output": "ERROR",
        "template": "@(min(1, 2, \\"foo\\"))",
      },
    ],
    "signature": "min(numbers...)",
    "summary": "Returns the minimum value in \`numbers\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1",
        "template": "@(mod(5, 2))",
      },
      Object {
        "output": "0",
        "template": "@(mod(4, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(mod(5, \\"foo\\"))",
      },
    ],
    "signature": "mod(dividend, divisor)",
    "summary": "Returns the remainder of the division of \`dividend\` by \`divisor\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "ma" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(max(1, 2))",
      },
      Object {
        "output": "10",
        "template": "@(max(1, -1, 10))",
      },
      Object {
        "output": "ERROR",
        "template": "@(max(1, 10, \\"foo\\"))",
      },
    ],
    "signature": "max(numbers...)",
    "summary": "Returns the maximum value in \`numbers\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "max" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(max(1, 2))",
      },
      Object {
        "output": "10",
        "template": "@(max(1, -1, 10))",
      },
      Object {
        "output": "ERROR",
        "template": "@(max(1, 10, \\"foo\\"))",
      },
    ],
    "signature": "max(numbers...)",
    "summary": "Returns the maximum value in \`numbers\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "max." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "me" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1.5",
        "template": "@(mean(1, 2))",
      },
      Object {
        "output": "3",
        "template": "@(mean(1, 2, 6))",
      },
      Object {
        "output": "ERROR",
        "template": "@(mean(1, \\"foo\\"))",
      },
    ],
    "signature": "mean(numbers...)",
    "summary": "Returns the arithmetic mean of \`numbers\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "mean" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1.5",
        "template": "@(mean(1, 2))",
      },
      Object {
        "output": "3",
        "template": "@(mean(1, 2, 6))",
      },
      Object {
        "output": "ERROR",
        "template": "@(mean(1, \\"foo\\"))",
      },
    ],
    "signature": "mean(numbers...)",
    "summary": "Returns the arithmetic mean of \`numbers\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "mean." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "mi" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1",
        "template": "@(min(1, 2))",
      },
      Object {
        "output": "-10",
        "template": "@(min(2, 2, -10))",
      },
      Object {
        "output": "ERROR",
        "template": "@(min(1, 2, \\"foo\\"))",
      },
    ],
    "signature": "min(numbers...)",
    "summary": "Returns the minimum value in \`numbers\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "min" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1",
        "template": "@(min(1, 2))",
      },
      Object {
        "output": "-10",
        "template": "@(min(2, 2, -10))",
      },
      Object {
        "output": "ERROR",
        "template": "@(min(1, 2, \\"foo\\"))",
      },
    ],
    "signature": "min(numbers...)",
    "summary": "Returns the minimum value in \`numbers\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "min." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "mo" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1",
        "template": "@(mod(5, 2))",
      },
      Object {
        "output": "0",
        "template": "@(mod(4, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(mod(5, \\"foo\\"))",
      },
    ],
    "signature": "mod(dividend, divisor)",
    "summary": "Returns the remainder of the division of \`dividend\` by \`divisor\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "mod" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "1",
        "template": "@(mod(5, 2))",
      },
      Object {
        "output": "0",
        "template": "@(mod(4, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(mod(5, \\"foo\\"))",
      },
    ],
    "signature": "mod(dividend, divisor)",
    "summary": "Returns the remainder of the division of \`dividend\` by \`divisor\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "mod." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "n" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11T13:24:30.123456-05:00",
        "template": "@(now())",
      },
    ],
    "signature": "now()",
    "summary": "Returns the current date and time in the current timezone.",
  },
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "10",
        "template": "@(number(10))",
      },
      Object {
        "output": "123.45",
        "template": "@(number(\\"123.45000\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(number(\\"what?\\"))",
      },
    ],
    "signature": "number(value)",
    "summary": "Tries to convert \`value\` to a number.",
  },
]
`;

exports[`helpers filterOptions should filter options for "no" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11T13:24:30.123456-05:00",
        "template": "@(now())",
      },
    ],
    "signature": "now()",
    "summary": "Returns the current date and time in the current timezone.",
  },
]
`;

exports[`helpers filterOptions should filter options for "now" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11T13:24:30.123456-05:00",
        "template": "@(now())",
      },
    ],
    "signature": "now()",
    "summary": "Returns the current date and time in the current timezone.",
  },
]
`;

exports[`helpers filterOptions should filter options for "now." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "nu" 1`] = `
Array [
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "10",
        "template": "@(number(10))",
      },
      Object {
        "output": "123.45",
        "template": "@(number(\\"123.45000\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(number(\\"what?\\"))",
      },
    ],
    "signature": "number(value)",
    "summary": "Tries to convert \`value\` to a number.",
  },
]
`;

exports[`helpers filterOptions should filter options for "number" 1`] = `
Array [
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "10",
        "template": "@(number(10))",
      },
      Object {
        "output": "123.45",
        "template": "@(number(\\"123.45000\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(number(\\"what?\\"))",
      },
    ],
    "signature": "number(value)",
    "summary": "Tries to convert \`value\` to a number.",
  },
]
`;

exports[`helpers filterOptions should filter options for "number." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "o" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{}",
        "template": "@(object())",
      },
      Object {
        "output": "{a: 123, b: hello}",
        "template": "@(object(\\"a\\", 123, \\"b\\", \\"hello\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(object(\\"a\\"))",
      },
    ],
    "signature": "object(pairs...)",
    "summary": "Takes property name value pairs and returns them as a new object.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(or(true))",
      },
      Object {
        "output": "true",
        "template": "@(or(true, false, true))",
      },
    ],
    "signature": "or(values...)",
    "summary": "Returns whether if any of the given \`values\` are truthy.",
  },
]
`;

exports[`helpers filterOptions should filter options for "ob" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{}",
        "template": "@(object())",
      },
      Object {
        "output": "{a: 123, b: hello}",
        "template": "@(object(\\"a\\", 123, \\"b\\", \\"hello\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(object(\\"a\\"))",
      },
    ],
    "signature": "object(pairs...)",
    "summary": "Takes property name value pairs and returns them as a new object.",
  },
]
`;

exports[`helpers filterOptions should filter options for "object" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{}",
        "template": "@(object())",
      },
      Object {
        "output": "{a: 123, b: hello}",
        "template": "@(object(\\"a\\", 123, \\"b\\", \\"hello\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(object(\\"a\\"))",
      },
    ],
    "signature": "object(pairs...)",
    "summary": "Takes property name value pairs and returns them as a new object.",
  },
]
`;

exports[`helpers filterOptions should filter options for "object." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "or" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(or(true))",
      },
      Object {
        "output": "true",
        "template": "@(or(true, false, true))",
      },
    ],
    "signature": "or(values...)",
    "summary": "Returns whether if any of the given \`values\` are truthy.",
  },
]
`;

exports[`helpers filterOptions should filter options for "or." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "p" 1`] = `
Array [
  Object {
    "name": "parent",
    "summary": "Run details collected by a parent flow, if any",
  },
  Object {
    "detail": "The format string can consist of the following characters. The characters
' ', ':', ',', 'T', '-' and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31
* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM
* \`Z\`         - hour and minute offset from UTC, or Z for UTC
* \`ZZZ\`       - hour and minute offset from UTC

Timezone should be a location name as specified in the IANA Time Zone database, such
as \\"America/Guayaquil\\" or \\"America/Los_Angeles\\". If not specified, the current timezone
will be used. An error will be returned if the timezone is not recognized.

Note that fractional seconds will be parsed even without an explicit format identifier.
You should only specify fractional seconds when you want to assert the number of places
in the input format.

parse_datetime will return an error if it is unable to convert the text to a datetime.",
    "examples": Array [
      Object {
        "output": "1979-07-18T00:00:00.000000-05:00",
        "template": "@(parse_datetime(\\"1979-07-18\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010-05-10T00:00:00.000000-05:00",
        "template": "@(parse_datetime(\\"2010 5 10\\", \\"YYYY M DD\\"))",
      },
      Object {
        "output": "2010-05-10T12:50:00.000000-07:00",
        "template": "@(parse_datetime(\\"2010 5 10 12:50\\", \\"YYYY M DD tt:mm\\", \\"America/Los_Angeles\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_datetime(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "parse_datetime(text, format [,timezone])",
    "summary": "Parses \`text\` into a date using the given \`format\`.",
  },
  Object {
    "detail": "If the given \`text\` is not valid JSON, then an error is returned",
    "examples": Array [
      Object {
        "output": "bar",
        "template": "@(parse_json(\\"{\\\\\\"foo\\\\\\": \\\\\\"bar\\\\\\"}\\").foo)",
      },
      Object {
        "output": "3",
        "template": "@(parse_json(\\"[1,2,3,4]\\")[2])",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_json(\\"invalid json\\"))",
      },
    ],
    "signature": "parse_json(text)",
    "summary": "Tries to parse \`text\` as JSON.",
  },
  Object {
    "detail": "The format string can consist of the following characters. The characters
' ', ':', ',', 'T', '-' and '_' are ignored. Any other character is an error.

* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM

Note that fractional seconds will be parsed even without an explicit format identifier.
You should only specify fractional seconds when you want to assert the number of places
in the input format.

parse_time will return an error if it is unable to convert the text to a time.",
    "examples": Array [
      Object {
        "output": "15:28:00.000000",
        "template": "@(parse_time(\\"15:28\\", \\"tt:mm\\"))",
      },
      Object {
        "output": "14:40:00.000000",
        "template": "@(parse_time(\\"2:40 pm\\", \\"h:mm aa\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_time(\\"NOT TIME\\", \\"tt:mm\\"))",
      },
    ],
    "signature": "parse_time(text, format)",
    "summary": "Parses \`text\` into a time using the given \`format\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "54%",
        "template": "@(percent(0.54234))",
      },
      Object {
        "output": "120%",
        "template": "@(percent(1.2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(percent(\\"foo\\"))",
      },
    ],
    "signature": "percent(number)",
    "summary": "Formats \`number\` as a percentage.",
  },
]
`;

exports[`helpers filterOptions should filter options for "pa" 1`] = `
Array [
  Object {
    "name": "parent",
    "summary": "Run details collected by a parent flow, if any",
  },
  Object {
    "detail": "The format string can consist of the following characters. The characters
' ', ':', ',', 'T', '-' and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31
* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM
* \`Z\`         - hour and minute offset from UTC, or Z for UTC
* \`ZZZ\`       - hour and minute offset from UTC

Timezone should be a location name as specified in the IANA Time Zone database, such
as \\"America/Guayaquil\\" or \\"America/Los_Angeles\\". If not specified, the current timezone
will be used. An error will be returned if the timezone is not recognized.

Note that fractional seconds will be parsed even without an explicit format identifier.
You should only specify fractional seconds when you want to assert the number of places
in the input format.

parse_datetime will return an error if it is unable to convert the text to a datetime.",
    "examples": Array [
      Object {
        "output": "1979-07-18T00:00:00.000000-05:00",
        "template": "@(parse_datetime(\\"1979-07-18\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010-05-10T00:00:00.000000-05:00",
        "template": "@(parse_datetime(\\"2010 5 10\\", \\"YYYY M DD\\"))",
      },
      Object {
        "output": "2010-05-10T12:50:00.000000-07:00",
        "template": "@(parse_datetime(\\"2010 5 10 12:50\\", \\"YYYY M DD tt:mm\\", \\"America/Los_Angeles\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_datetime(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "parse_datetime(text, format [,timezone])",
    "summary": "Parses \`text\` into a date using the given \`format\`.",
  },
  Object {
    "detail": "If the given \`text\` is not valid JSON, then an error is returned",
    "examples": Array [
      Object {
        "output": "bar",
        "template": "@(parse_json(\\"{\\\\\\"foo\\\\\\": \\\\\\"bar\\\\\\"}\\").foo)",
      },
      Object {
        "output": "3",
        "template": "@(parse_json(\\"[1,2,3,4]\\")[2])",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_json(\\"invalid json\\"))",
      },
    ],
    "signature": "parse_json(text)",
    "summary": "Tries to parse \`text\` as JSON.",
  },
  Object {
    "detail": "The format string can consist of the following characters. The characters
' ', ':', ',', 'T', '-' and '_' are ignored. Any other character is an error.

* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM

Note that fractional seconds will be parsed even without an explicit format identifier.
You should only specify fractional seconds when you want to assert the number of places
in the input format.

parse_time will return an error if it is unable to convert the text to a time.",
    "examples": Array [
      Object {
        "output": "15:28:00.000000",
        "template": "@(parse_time(\\"15:28\\", \\"tt:mm\\"))",
      },
      Object {
        "output": "14:40:00.000000",
        "template": "@(parse_time(\\"2:40 pm\\", \\"h:mm aa\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_time(\\"NOT TIME\\", \\"tt:mm\\"))",
      },
    ],
    "signature": "parse_time(text, format)",
    "summary": "Parses \`text\` into a time using the given \`format\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent" 1`] = `
Array [
  Object {
    "name": "parent",
    "summary": "Run details collected by a parent flow, if any",
  },
  Object {
    "name": "parent.flow",
    "summary": "The flow in which a parent run takes place",
  },
  Object {
    "name": "parent.contact",
    "summary": "The name of the parent run's contact",
  },
  Object {
    "name": "parent.webhook",
    "summary": "The body of the response to the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.results",
    "summary": "Results collected in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent." 1`] = `
Array [
  Object {
    "name": "parent.flow",
    "summary": "The flow in which a parent run takes place",
  },
  Object {
    "name": "parent.contact",
    "summary": "The name of the parent run's contact",
  },
  Object {
    "name": "parent.webhook",
    "summary": "The body of the response to the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.results",
    "summary": "Results collected in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.c" 1`] = `
Array [
  Object {
    "name": "parent.contact",
    "summary": "The name of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.co" 1`] = `
Array [
  Object {
    "name": "parent.contact",
    "summary": "The name of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact" 1`] = `
Array [
  Object {
    "name": "parent.contact",
    "summary": "The name of the parent run's contact",
  },
  Object {
    "name": "parent.contact.first_name",
    "summary": "The first name of a parent run's contact",
  },
  Object {
    "name": "parent.contact.name",
    "summary": "The name of the parent run's contact",
  },
  Object {
    "name": "parent.contact.display",
    "summary": "The name or urn of the parent run's contact",
  },
  Object {
    "name": "parent.contact.fields",
    "summary": "Custom fields on a parent run's contact",
  },
  Object {
    "name": "parent.contact.urn",
    "summary": "The primary urn for a parent run's contact",
  },
  Object {
    "name": "parent.contact.language",
    "summary": "The language iso code for a parent run's contact",
  },
  Object {
    "name": "parent.contact.created_on",
    "summary": "The creation date for the parent run's contact",
  },
  Object {
    "name": "parent.contact.groups",
    "summary": "The groups a parent run's contact is a member of",
  },
  Object {
    "name": "parent.contact.urns",
    "summary": "The urns for a parent run's contact",
  },
  Object {
    "name": "parent.contact.uuid",
    "summary": "The uuid of the parent run's contact",
  },
  Object {
    "name": "parent.contact.channel",
    "summary": "A parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.c" 1`] = `
Array [
  Object {
    "name": "parent.contact.created_on",
    "summary": "The creation date for the parent run's contact",
  },
  Object {
    "name": "parent.contact.channel",
    "summary": "A parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.ch" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel",
    "summary": "A parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel",
    "summary": "A parent run's contact's preferred channel",
  },
  Object {
    "name": "parent.contact.channel.uuid",
    "summary": "The UUID of a parent run's contact's preferred channel",
  },
  Object {
    "name": "parent.contact.channel.name",
    "summary": "The name of a parent run's contact's preferred channel",
  },
  Object {
    "name": "parent.contact.channel.address",
    "summary": "The address of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.a" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.address",
    "summary": "The address of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.ad" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.address",
    "summary": "The address of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.address" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.address",
    "summary": "The address of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.n" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.name",
    "summary": "The name of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.na" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.name",
    "summary": "The name of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.name" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.name",
    "summary": "The name of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.u" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.uuid",
    "summary": "The UUID of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.uu" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.uuid",
    "summary": "The UUID of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.channel.uuid" 1`] = `
Array [
  Object {
    "name": "parent.contact.channel.uuid",
    "summary": "The UUID of a parent run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.cr" 1`] = `
Array [
  Object {
    "name": "parent.contact.created_on",
    "summary": "The creation date for the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.created_on" 1`] = `
Array [
  Object {
    "name": "parent.contact.created_on",
    "summary": "The creation date for the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.d" 1`] = `
Array [
  Object {
    "name": "parent.contact.display",
    "summary": "The name or urn of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.di" 1`] = `
Array [
  Object {
    "name": "parent.contact.display",
    "summary": "The name or urn of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.display" 1`] = `
Array [
  Object {
    "name": "parent.contact.display",
    "summary": "The name or urn of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.f" 1`] = `
Array [
  Object {
    "name": "parent.contact.first_name",
    "summary": "The first name of a parent run's contact",
  },
  Object {
    "name": "parent.contact.fields",
    "summary": "Custom fields on a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.fi" 1`] = `
Array [
  Object {
    "name": "parent.contact.first_name",
    "summary": "The first name of a parent run's contact",
  },
  Object {
    "name": "parent.contact.fields",
    "summary": "Custom fields on a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.fields" 1`] = `
Array [
  Object {
    "name": "parent.contact.fields",
    "summary": "Custom fields on a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.first_name" 1`] = `
Array [
  Object {
    "name": "parent.contact.first_name",
    "summary": "The first name of a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.g" 1`] = `
Array [
  Object {
    "name": "parent.contact.groups",
    "summary": "The groups a parent run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.gr" 1`] = `
Array [
  Object {
    "name": "parent.contact.groups",
    "summary": "The groups a parent run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.groups" 1`] = `
Array [
  Object {
    "name": "parent.contact.groups",
    "summary": "The groups a parent run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.l" 1`] = `
Array [
  Object {
    "name": "parent.contact.language",
    "summary": "The language iso code for a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.la" 1`] = `
Array [
  Object {
    "name": "parent.contact.language",
    "summary": "The language iso code for a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.language" 1`] = `
Array [
  Object {
    "name": "parent.contact.language",
    "summary": "The language iso code for a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.n" 1`] = `
Array [
  Object {
    "name": "parent.contact.name",
    "summary": "The name of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.na" 1`] = `
Array [
  Object {
    "name": "parent.contact.name",
    "summary": "The name of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.name" 1`] = `
Array [
  Object {
    "name": "parent.contact.name",
    "summary": "The name of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.u" 1`] = `
Array [
  Object {
    "name": "parent.contact.urn",
    "summary": "The primary urn for a parent run's contact",
  },
  Object {
    "name": "parent.contact.urns",
    "summary": "The urns for a parent run's contact",
  },
  Object {
    "name": "parent.contact.uuid",
    "summary": "The uuid of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.ur" 1`] = `
Array [
  Object {
    "name": "parent.contact.urn",
    "summary": "The primary urn for a parent run's contact",
  },
  Object {
    "name": "parent.contact.urns",
    "summary": "The urns for a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.urn" 1`] = `
Array [
  Object {
    "name": "parent.contact.urn",
    "summary": "The primary urn for a parent run's contact",
  },
  Object {
    "name": "parent.contact.urns",
    "summary": "The urns for a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.urns" 1`] = `
Array [
  Object {
    "name": "parent.contact.urns",
    "summary": "The urns for a parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.uu" 1`] = `
Array [
  Object {
    "name": "parent.contact.uuid",
    "summary": "The uuid of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.contact.uuid" 1`] = `
Array [
  Object {
    "name": "parent.contact.uuid",
    "summary": "The uuid of the parent run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.f" 1`] = `
Array [
  Object {
    "name": "parent.flow",
    "summary": "The flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.fl" 1`] = `
Array [
  Object {
    "name": "parent.flow",
    "summary": "The flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow" 1`] = `
Array [
  Object {
    "name": "parent.flow",
    "summary": "The flow in which a parent run takes place",
  },
  Object {
    "name": "parent.flow.uuid",
    "summary": "The UUID of the flow in which a parent run takes place",
  },
  Object {
    "name": "parent.flow.name",
    "summary": "The name of the flow in which a parent run takes place",
  },
  Object {
    "name": "parent.flow.revision",
    "summary": "The revision number of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.n" 1`] = `
Array [
  Object {
    "name": "parent.flow.name",
    "summary": "The name of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.na" 1`] = `
Array [
  Object {
    "name": "parent.flow.name",
    "summary": "The name of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.name" 1`] = `
Array [
  Object {
    "name": "parent.flow.name",
    "summary": "The name of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.r" 1`] = `
Array [
  Object {
    "name": "parent.flow.revision",
    "summary": "The revision number of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.re" 1`] = `
Array [
  Object {
    "name": "parent.flow.revision",
    "summary": "The revision number of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.revision" 1`] = `
Array [
  Object {
    "name": "parent.flow.revision",
    "summary": "The revision number of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.u" 1`] = `
Array [
  Object {
    "name": "parent.flow.uuid",
    "summary": "The UUID of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.uu" 1`] = `
Array [
  Object {
    "name": "parent.flow.uuid",
    "summary": "The UUID of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.flow.uuid" 1`] = `
Array [
  Object {
    "name": "parent.flow.uuid",
    "summary": "The UUID of the flow in which a parent run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.r" 1`] = `
Array [
  Object {
    "name": "parent.results",
    "summary": "Results collected in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.re" 1`] = `
Array [
  Object {
    "name": "parent.results",
    "summary": "Results collected in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.results" 1`] = `
Array [
  Object {
    "name": "parent.results",
    "summary": "Results collected in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.w" 1`] = `
Array [
  Object {
    "name": "parent.webhook",
    "summary": "The body of the response to the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.we" 1`] = `
Array [
  Object {
    "name": "parent.webhook",
    "summary": "The body of the response to the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook" 1`] = `
Array [
  Object {
    "name": "parent.webhook",
    "summary": "The body of the response to the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.webhook.status",
    "summary": "The status of the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.webhook.url",
    "summary": "The URL that was called by the last webhook request in a parent run",
  },
  Object {
    "name": "parent.webhook.body",
    "summary": "The body of the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a parent run, can access subelements",
  },
  Object {
    "name": "parent.webhook.request",
    "summary": "The raw request last made in a parent run, including headers",
  },
  Object {
    "name": "parent.webhook.response",
    "summary": "The raw response last received in a parent run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.b" 1`] = `
Array [
  Object {
    "name": "parent.webhook.body",
    "summary": "The body of the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.bo" 1`] = `
Array [
  Object {
    "name": "parent.webhook.body",
    "summary": "The body of the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.body" 1`] = `
Array [
  Object {
    "name": "parent.webhook.body",
    "summary": "The body of the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.j" 1`] = `
Array [
  Object {
    "name": "parent.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a parent run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.js" 1`] = `
Array [
  Object {
    "name": "parent.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a parent run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.json" 1`] = `
Array [
  Object {
    "name": "parent.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a parent run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.r" 1`] = `
Array [
  Object {
    "name": "parent.webhook.request",
    "summary": "The raw request last made in a parent run, including headers",
  },
  Object {
    "name": "parent.webhook.response",
    "summary": "The raw response last received in a parent run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.re" 1`] = `
Array [
  Object {
    "name": "parent.webhook.request",
    "summary": "The raw request last made in a parent run, including headers",
  },
  Object {
    "name": "parent.webhook.response",
    "summary": "The raw response last received in a parent run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.request" 1`] = `
Array [
  Object {
    "name": "parent.webhook.request",
    "summary": "The raw request last made in a parent run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.response" 1`] = `
Array [
  Object {
    "name": "parent.webhook.response",
    "summary": "The raw response last received in a parent run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.s" 1`] = `
Array [
  Object {
    "name": "parent.webhook.status",
    "summary": "The status of the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.st" 1`] = `
Array [
  Object {
    "name": "parent.webhook.status",
    "summary": "The status of the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.status" 1`] = `
Array [
  Object {
    "name": "parent.webhook.status",
    "summary": "The status of the last webhook request made in a parent run",
  },
  Object {
    "name": "parent.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.status_code" 1`] = `
Array [
  Object {
    "name": "parent.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.u" 1`] = `
Array [
  Object {
    "name": "parent.webhook.url",
    "summary": "The URL that was called by the last webhook request in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.ur" 1`] = `
Array [
  Object {
    "name": "parent.webhook.url",
    "summary": "The URL that was called by the last webhook request in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parent.webhook.url" 1`] = `
Array [
  Object {
    "name": "parent.webhook.url",
    "summary": "The URL that was called by the last webhook request in a parent run",
  },
]
`;

exports[`helpers filterOptions should filter options for "parse_datetime" 1`] = `
Array [
  Object {
    "detail": "The format string can consist of the following characters. The characters
' ', ':', ',', 'T', '-' and '_' are ignored. Any other character is an error.

* \`YY\`        - last two digits of year 0-99
* \`YYYY\`      - four digits of year 0000-9999
* \`M\`         - month 1-12
* \`MM\`        - month 01-12
* \`D\`         - day of month, 1-31
* \`DD\`        - day of month, zero padded 0-31
* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM
* \`Z\`         - hour and minute offset from UTC, or Z for UTC
* \`ZZZ\`       - hour and minute offset from UTC

Timezone should be a location name as specified in the IANA Time Zone database, such
as \\"America/Guayaquil\\" or \\"America/Los_Angeles\\". If not specified, the current timezone
will be used. An error will be returned if the timezone is not recognized.

Note that fractional seconds will be parsed even without an explicit format identifier.
You should only specify fractional seconds when you want to assert the number of places
in the input format.

parse_datetime will return an error if it is unable to convert the text to a datetime.",
    "examples": Array [
      Object {
        "output": "1979-07-18T00:00:00.000000-05:00",
        "template": "@(parse_datetime(\\"1979-07-18\\", \\"YYYY-MM-DD\\"))",
      },
      Object {
        "output": "2010-05-10T00:00:00.000000-05:00",
        "template": "@(parse_datetime(\\"2010 5 10\\", \\"YYYY M DD\\"))",
      },
      Object {
        "output": "2010-05-10T12:50:00.000000-07:00",
        "template": "@(parse_datetime(\\"2010 5 10 12:50\\", \\"YYYY M DD tt:mm\\", \\"America/Los_Angeles\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_datetime(\\"NOT DATE\\", \\"YYYY-MM-DD\\"))",
      },
    ],
    "signature": "parse_datetime(text, format [,timezone])",
    "summary": "Parses \`text\` into a date using the given \`format\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "parse_datetime." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "parse_json" 1`] = `
Array [
  Object {
    "detail": "If the given \`text\` is not valid JSON, then an error is returned",
    "examples": Array [
      Object {
        "output": "bar",
        "template": "@(parse_json(\\"{\\\\\\"foo\\\\\\": \\\\\\"bar\\\\\\"}\\").foo)",
      },
      Object {
        "output": "3",
        "template": "@(parse_json(\\"[1,2,3,4]\\")[2])",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_json(\\"invalid json\\"))",
      },
    ],
    "signature": "parse_json(text)",
    "summary": "Tries to parse \`text\` as JSON.",
  },
]
`;

exports[`helpers filterOptions should filter options for "parse_json." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "parse_time" 1`] = `
Array [
  Object {
    "detail": "The format string can consist of the following characters. The characters
' ', ':', ',', 'T', '-' and '_' are ignored. Any other character is an error.

* \`h\`         - hour of the day 1-12
* \`hh\`        - hour of the day 01-12
* \`tt\`        - twenty four hour of the day 01-23
* \`m\`         - minute 0-59
* \`mm\`        - minute 00-59
* \`s\`         - second 0-59
* \`ss\`        - second 00-59
* \`fff\`       - milliseconds
* \`ffffff\`    - microseconds
* \`fffffffff\` - nanoseconds
* \`aa\`        - am or pm
* \`AA\`        - AM or PM

Note that fractional seconds will be parsed even without an explicit format identifier.
You should only specify fractional seconds when you want to assert the number of places
in the input format.

parse_time will return an error if it is unable to convert the text to a time.",
    "examples": Array [
      Object {
        "output": "15:28:00.000000",
        "template": "@(parse_time(\\"15:28\\", \\"tt:mm\\"))",
      },
      Object {
        "output": "14:40:00.000000",
        "template": "@(parse_time(\\"2:40 pm\\", \\"h:mm aa\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(parse_time(\\"NOT TIME\\", \\"tt:mm\\"))",
      },
    ],
    "signature": "parse_time(text, format)",
    "summary": "Parses \`text\` into a time using the given \`format\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "parse_time." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "pe" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "54%",
        "template": "@(percent(0.54234))",
      },
      Object {
        "output": "120%",
        "template": "@(percent(1.2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(percent(\\"foo\\"))",
      },
    ],
    "signature": "percent(number)",
    "summary": "Formats \`number\` as a percentage.",
  },
]
`;

exports[`helpers filterOptions should filter options for "percent" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "54%",
        "template": "@(percent(0.54234))",
      },
      Object {
        "output": "120%",
        "template": "@(percent(1.2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(percent(\\"foo\\"))",
      },
    ],
    "signature": "percent(number)",
    "summary": "Formats \`number\` as a percentage.",
  },
]
`;

exports[`helpers filterOptions should filter options for "percent." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "r" 1`] = `
Array [
  Object {
    "name": "results",
    "summary": "The results for the current run",
  },
  Object {
    "name": "run",
    "summary": "A run in this flow",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "0.3849275689214193274523267973563633859157562255859375",
        "template": "@(rand())",
      },
      Object {
        "output": "0.607552015674623913099594574305228888988494873046875",
        "template": "@(rand())",
      },
    ],
    "signature": "rand()",
    "summary": "Returns a single random number between [0.0-1.0).",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "5",
        "template": "@(rand_between(1, 10))",
      },
      Object {
        "output": "10",
        "template": "@(rand_between(1, 10))",
      },
    ],
    "signature": "rand_between()",
    "summary": "A single random integer in the given inclusive range.",
  },
  Object {
    "detail": "ReadChars will split the numbers such as they are easier to understand. This includes
splitting in 3s or 4s if appropriate.",
    "examples": Array [
      Object {
        "output": "1 2 3 4",
        "template": "@(read_chars(\\"1234\\"))",
      },
      Object {
        "output": "a b c",
        "template": "@(read_chars(\\"abc\\"))",
      },
      Object {
        "output": "a b c , d e f",
        "template": "@(read_chars(\\"abcdef\\"))",
      },
    ],
    "signature": "read_chars(text)",
    "summary": "Converts \`text\` into something that can be read by IVR systems.",
  },
  Object {
    "detail": "An optional third parameter \`group\` determines which matching group will be returned.",
    "examples": Array [
      Object {
        "output": "34",
        "template": "@(regex_match(\\"sda34dfddg67\\", \\"\\\\d+\\"))",
      },
      Object {
        "output": "Bob",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 1))",
      },
      Object {
        "output": "Smith",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 5))",
      },
      Object {
        "output": "ERROR",
        "template": "@(regex_match(\\"abc\\", \\"[\\\\.\\"))",
      },
    ],
    "signature": "regex_match(text, pattern [,group])",
    "summary": "Returns the first match of the regular expression \`pattern\` in \`text\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "bar",
        "template": "@(remove_first_word(\\"foo bar\\"))",
      },
      Object {
        "output": "there. I'm a flow!",
        "template": "@(remove_first_word(\\"Hi there. I'm a flow!\\"))",
      },
    ],
    "signature": "remove_first_word(text)",
    "summary": "Removes the first word of \`text\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "********",
        "template": "@(repeat(\\"*\\", 8))",
      },
      Object {
        "output": "ERROR",
        "template": "@(repeat(\\"*\\", \\"foo\\"))",
      },
    ],
    "signature": "repeat(text, count)",
    "summary": "Returns \`text\` repeated \`count\` number of times.",
  },
  Object {
    "detail": "If \`count\` is omitted or is less than 0 then all occurrences are replaced.",
    "examples": Array [
      Object {
        "output": "zap bar zap",
        "template": "@(replace(\\"foo bar foo\\", \\"foo\\", \\"zap\\"))",
      },
      Object {
        "output": "zap bar foo",
        "template": "@(replace(\\"foo bar foo\\", \\"foo\\", \\"zap\\", 1))",
      },
      Object {
        "output": "foo bar",
        "template": "@(replace(\\"foo bar\\", \\"baz\\", \\"zap\\"))",
      },
    ],
    "signature": "replace(text, needle, replacement [, count])",
    "summary": "Replaces up to \`count\` occurrences of \`needle\` with \`replacement\` in \`text\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11T10:30:00.000000-05:00",
        "template": "@(replace_time(now(), \\"10:30\\"))",
      },
      Object {
        "output": "2017-01-15T10:30:00.000000-05:00",
        "template": "@(replace_time(\\"2017-01-15\\", \\"10:30\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(replace_time(\\"foo\\", \\"10:30\\"))",
      },
    ],
    "signature": "replace_time(datetime)",
    "summary": "Returns a new datetime with the time part replaced by the \`time\`.",
  },
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`. If \`places\` < 0,
it will round the integer part to the nearest 10^(-places).",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round(12))",
      },
      Object {
        "output": "12",
        "template": "@(round(12.141))",
      },
      Object {
        "output": "13",
        "template": "@(round(12.6))",
      },
      Object {
        "output": "12.14",
        "template": "@(round(12.141, 2))",
      },
      Object {
        "output": "12.15",
        "template": "@(round(12.146, 2))",
      },
      Object {
        "output": "10",
        "template": "@(round(12.146, -1))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round(\\"notnum\\", 2))",
      },
    ],
    "signature": "round(number [,places])",
    "summary": "Rounds \`number\` to the nearest value.",
  },
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`.",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round_down(12))",
      },
      Object {
        "output": "12",
        "template": "@(round_down(12.141))",
      },
      Object {
        "output": "12",
        "template": "@(round_down(12.6))",
      },
      Object {
        "output": "12.14",
        "template": "@(round_down(12.141, 2))",
      },
      Object {
        "output": "12.14",
        "template": "@(round_down(12.146, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round_down(\\"foo\\"))",
      },
    ],
    "signature": "round_down(number [,places])",
    "summary": "Rounds \`number\` down to the nearest integer value.",
  },
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`.",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round_up(12))",
      },
      Object {
        "output": "13",
        "template": "@(round_up(12.141))",
      },
      Object {
        "output": "13",
        "template": "@(round_up(12.6))",
      },
      Object {
        "output": "12.15",
        "template": "@(round_up(12.141, 2))",
      },
      Object {
        "output": "12.15",
        "template": "@(round_up(12.146, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round_up(\\"foo\\"))",
      },
    ],
    "signature": "round_up(number [,places])",
    "summary": "Rounds \`number\` up to the nearest integer value.",
  },
]
`;

exports[`helpers filterOptions should filter options for "ra" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "0.3849275689214193274523267973563633859157562255859375",
        "template": "@(rand())",
      },
      Object {
        "output": "0.607552015674623913099594574305228888988494873046875",
        "template": "@(rand())",
      },
    ],
    "signature": "rand()",
    "summary": "Returns a single random number between [0.0-1.0).",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "5",
        "template": "@(rand_between(1, 10))",
      },
      Object {
        "output": "10",
        "template": "@(rand_between(1, 10))",
      },
    ],
    "signature": "rand_between()",
    "summary": "A single random integer in the given inclusive range.",
  },
]
`;

exports[`helpers filterOptions should filter options for "rand" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "0.3849275689214193274523267973563633859157562255859375",
        "template": "@(rand())",
      },
      Object {
        "output": "0.607552015674623913099594574305228888988494873046875",
        "template": "@(rand())",
      },
    ],
    "signature": "rand()",
    "summary": "Returns a single random number between [0.0-1.0).",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "5",
        "template": "@(rand_between(1, 10))",
      },
      Object {
        "output": "10",
        "template": "@(rand_between(1, 10))",
      },
    ],
    "signature": "rand_between()",
    "summary": "A single random integer in the given inclusive range.",
  },
]
`;

exports[`helpers filterOptions should filter options for "rand." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "rand_between" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "5",
        "template": "@(rand_between(1, 10))",
      },
      Object {
        "output": "10",
        "template": "@(rand_between(1, 10))",
      },
    ],
    "signature": "rand_between()",
    "summary": "A single random integer in the given inclusive range.",
  },
]
`;

exports[`helpers filterOptions should filter options for "rand_between." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "re" 1`] = `
Array [
  Object {
    "name": "results",
    "summary": "The results for the current run",
  },
  Object {
    "detail": "ReadChars will split the numbers such as they are easier to understand. This includes
splitting in 3s or 4s if appropriate.",
    "examples": Array [
      Object {
        "output": "1 2 3 4",
        "template": "@(read_chars(\\"1234\\"))",
      },
      Object {
        "output": "a b c",
        "template": "@(read_chars(\\"abc\\"))",
      },
      Object {
        "output": "a b c , d e f",
        "template": "@(read_chars(\\"abcdef\\"))",
      },
    ],
    "signature": "read_chars(text)",
    "summary": "Converts \`text\` into something that can be read by IVR systems.",
  },
  Object {
    "detail": "An optional third parameter \`group\` determines which matching group will be returned.",
    "examples": Array [
      Object {
        "output": "34",
        "template": "@(regex_match(\\"sda34dfddg67\\", \\"\\\\d+\\"))",
      },
      Object {
        "output": "Bob",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 1))",
      },
      Object {
        "output": "Smith",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 5))",
      },
      Object {
        "output": "ERROR",
        "template": "@(regex_match(\\"abc\\", \\"[\\\\.\\"))",
      },
    ],
    "signature": "regex_match(text, pattern [,group])",
    "summary": "Returns the first match of the regular expression \`pattern\` in \`text\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "bar",
        "template": "@(remove_first_word(\\"foo bar\\"))",
      },
      Object {
        "output": "there. I'm a flow!",
        "template": "@(remove_first_word(\\"Hi there. I'm a flow!\\"))",
      },
    ],
    "signature": "remove_first_word(text)",
    "summary": "Removes the first word of \`text\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "********",
        "template": "@(repeat(\\"*\\", 8))",
      },
      Object {
        "output": "ERROR",
        "template": "@(repeat(\\"*\\", \\"foo\\"))",
      },
    ],
    "signature": "repeat(text, count)",
    "summary": "Returns \`text\` repeated \`count\` number of times.",
  },
  Object {
    "detail": "If \`count\` is omitted or is less than 0 then all occurrences are replaced.",
    "examples": Array [
      Object {
        "output": "zap bar zap",
        "template": "@(replace(\\"foo bar foo\\", \\"foo\\", \\"zap\\"))",
      },
      Object {
        "output": "zap bar foo",
        "template": "@(replace(\\"foo bar foo\\", \\"foo\\", \\"zap\\", 1))",
      },
      Object {
        "output": "foo bar",
        "template": "@(replace(\\"foo bar\\", \\"baz\\", \\"zap\\"))",
      },
    ],
    "signature": "replace(text, needle, replacement [, count])",
    "summary": "Replaces up to \`count\` occurrences of \`needle\` with \`replacement\` in \`text\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11T10:30:00.000000-05:00",
        "template": "@(replace_time(now(), \\"10:30\\"))",
      },
      Object {
        "output": "2017-01-15T10:30:00.000000-05:00",
        "template": "@(replace_time(\\"2017-01-15\\", \\"10:30\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(replace_time(\\"foo\\", \\"10:30\\"))",
      },
    ],
    "signature": "replace_time(datetime)",
    "summary": "Returns a new datetime with the time part replaced by the \`time\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "read_chars" 1`] = `
Array [
  Object {
    "detail": "ReadChars will split the numbers such as they are easier to understand. This includes
splitting in 3s or 4s if appropriate.",
    "examples": Array [
      Object {
        "output": "1 2 3 4",
        "template": "@(read_chars(\\"1234\\"))",
      },
      Object {
        "output": "a b c",
        "template": "@(read_chars(\\"abc\\"))",
      },
      Object {
        "output": "a b c , d e f",
        "template": "@(read_chars(\\"abcdef\\"))",
      },
    ],
    "signature": "read_chars(text)",
    "summary": "Converts \`text\` into something that can be read by IVR systems.",
  },
]
`;

exports[`helpers filterOptions should filter options for "read_chars." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "regex_match" 1`] = `
Array [
  Object {
    "detail": "An optional third parameter \`group\` determines which matching group will be returned.",
    "examples": Array [
      Object {
        "output": "34",
        "template": "@(regex_match(\\"sda34dfddg67\\", \\"\\\\d+\\"))",
      },
      Object {
        "output": "Bob",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 1))",
      },
      Object {
        "output": "Smith",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(regex_match(\\"Bob Smith\\", \\"(\\\\w+) (\\\\w+)\\", 5))",
      },
      Object {
        "output": "ERROR",
        "template": "@(regex_match(\\"abc\\", \\"[\\\\.\\"))",
      },
    ],
    "signature": "regex_match(text, pattern [,group])",
    "summary": "Returns the first match of the regular expression \`pattern\` in \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "regex_match." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "remove_first_word" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "bar",
        "template": "@(remove_first_word(\\"foo bar\\"))",
      },
      Object {
        "output": "there. I'm a flow!",
        "template": "@(remove_first_word(\\"Hi there. I'm a flow!\\"))",
      },
    ],
    "signature": "remove_first_word(text)",
    "summary": "Removes the first word of \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "remove_first_word." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "repeat" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "********",
        "template": "@(repeat(\\"*\\", 8))",
      },
      Object {
        "output": "ERROR",
        "template": "@(repeat(\\"*\\", \\"foo\\"))",
      },
    ],
    "signature": "repeat(text, count)",
    "summary": "Returns \`text\` repeated \`count\` number of times.",
  },
]
`;

exports[`helpers filterOptions should filter options for "repeat." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "replace" 1`] = `
Array [
  Object {
    "detail": "If \`count\` is omitted or is less than 0 then all occurrences are replaced.",
    "examples": Array [
      Object {
        "output": "zap bar zap",
        "template": "@(replace(\\"foo bar foo\\", \\"foo\\", \\"zap\\"))",
      },
      Object {
        "output": "zap bar foo",
        "template": "@(replace(\\"foo bar foo\\", \\"foo\\", \\"zap\\", 1))",
      },
      Object {
        "output": "foo bar",
        "template": "@(replace(\\"foo bar\\", \\"baz\\", \\"zap\\"))",
      },
    ],
    "signature": "replace(text, needle, replacement [, count])",
    "summary": "Replaces up to \`count\` occurrences of \`needle\` with \`replacement\` in \`text\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11T10:30:00.000000-05:00",
        "template": "@(replace_time(now(), \\"10:30\\"))",
      },
      Object {
        "output": "2017-01-15T10:30:00.000000-05:00",
        "template": "@(replace_time(\\"2017-01-15\\", \\"10:30\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(replace_time(\\"foo\\", \\"10:30\\"))",
      },
    ],
    "signature": "replace_time(datetime)",
    "summary": "Returns a new datetime with the time part replaced by the \`time\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "replace." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "replace_time" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11T10:30:00.000000-05:00",
        "template": "@(replace_time(now(), \\"10:30\\"))",
      },
      Object {
        "output": "2017-01-15T10:30:00.000000-05:00",
        "template": "@(replace_time(\\"2017-01-15\\", \\"10:30\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(replace_time(\\"foo\\", \\"10:30\\"))",
      },
    ],
    "signature": "replace_time(datetime)",
    "summary": "Returns a new datetime with the time part replaced by the \`time\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "replace_time." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "results" 1`] = `
Array [
  Object {
    "name": "results",
    "summary": "The results for the current run",
  },
]
`;

exports[`helpers filterOptions should filter options for "results." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "ro" 1`] = `
Array [
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`. If \`places\` < 0,
it will round the integer part to the nearest 10^(-places).",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round(12))",
      },
      Object {
        "output": "12",
        "template": "@(round(12.141))",
      },
      Object {
        "output": "13",
        "template": "@(round(12.6))",
      },
      Object {
        "output": "12.14",
        "template": "@(round(12.141, 2))",
      },
      Object {
        "output": "12.15",
        "template": "@(round(12.146, 2))",
      },
      Object {
        "output": "10",
        "template": "@(round(12.146, -1))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round(\\"notnum\\", 2))",
      },
    ],
    "signature": "round(number [,places])",
    "summary": "Rounds \`number\` to the nearest value.",
  },
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`.",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round_down(12))",
      },
      Object {
        "output": "12",
        "template": "@(round_down(12.141))",
      },
      Object {
        "output": "12",
        "template": "@(round_down(12.6))",
      },
      Object {
        "output": "12.14",
        "template": "@(round_down(12.141, 2))",
      },
      Object {
        "output": "12.14",
        "template": "@(round_down(12.146, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round_down(\\"foo\\"))",
      },
    ],
    "signature": "round_down(number [,places])",
    "summary": "Rounds \`number\` down to the nearest integer value.",
  },
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`.",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round_up(12))",
      },
      Object {
        "output": "13",
        "template": "@(round_up(12.141))",
      },
      Object {
        "output": "13",
        "template": "@(round_up(12.6))",
      },
      Object {
        "output": "12.15",
        "template": "@(round_up(12.141, 2))",
      },
      Object {
        "output": "12.15",
        "template": "@(round_up(12.146, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round_up(\\"foo\\"))",
      },
    ],
    "signature": "round_up(number [,places])",
    "summary": "Rounds \`number\` up to the nearest integer value.",
  },
]
`;

exports[`helpers filterOptions should filter options for "round" 1`] = `
Array [
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`. If \`places\` < 0,
it will round the integer part to the nearest 10^(-places).",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round(12))",
      },
      Object {
        "output": "12",
        "template": "@(round(12.141))",
      },
      Object {
        "output": "13",
        "template": "@(round(12.6))",
      },
      Object {
        "output": "12.14",
        "template": "@(round(12.141, 2))",
      },
      Object {
        "output": "12.15",
        "template": "@(round(12.146, 2))",
      },
      Object {
        "output": "10",
        "template": "@(round(12.146, -1))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round(\\"notnum\\", 2))",
      },
    ],
    "signature": "round(number [,places])",
    "summary": "Rounds \`number\` to the nearest value.",
  },
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`.",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round_down(12))",
      },
      Object {
        "output": "12",
        "template": "@(round_down(12.141))",
      },
      Object {
        "output": "12",
        "template": "@(round_down(12.6))",
      },
      Object {
        "output": "12.14",
        "template": "@(round_down(12.141, 2))",
      },
      Object {
        "output": "12.14",
        "template": "@(round_down(12.146, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round_down(\\"foo\\"))",
      },
    ],
    "signature": "round_down(number [,places])",
    "summary": "Rounds \`number\` down to the nearest integer value.",
  },
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`.",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round_up(12))",
      },
      Object {
        "output": "13",
        "template": "@(round_up(12.141))",
      },
      Object {
        "output": "13",
        "template": "@(round_up(12.6))",
      },
      Object {
        "output": "12.15",
        "template": "@(round_up(12.141, 2))",
      },
      Object {
        "output": "12.15",
        "template": "@(round_up(12.146, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round_up(\\"foo\\"))",
      },
    ],
    "signature": "round_up(number [,places])",
    "summary": "Rounds \`number\` up to the nearest integer value.",
  },
]
`;

exports[`helpers filterOptions should filter options for "round." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "round_down" 1`] = `
Array [
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`.",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round_down(12))",
      },
      Object {
        "output": "12",
        "template": "@(round_down(12.141))",
      },
      Object {
        "output": "12",
        "template": "@(round_down(12.6))",
      },
      Object {
        "output": "12.14",
        "template": "@(round_down(12.141, 2))",
      },
      Object {
        "output": "12.14",
        "template": "@(round_down(12.146, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round_down(\\"foo\\"))",
      },
    ],
    "signature": "round_down(number [,places])",
    "summary": "Rounds \`number\` down to the nearest integer value.",
  },
]
`;

exports[`helpers filterOptions should filter options for "round_down." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "round_up" 1`] = `
Array [
  Object {
    "detail": "You can optionally pass in the number of decimal places to round to as \`places\`.",
    "examples": Array [
      Object {
        "output": "12",
        "template": "@(round_up(12))",
      },
      Object {
        "output": "13",
        "template": "@(round_up(12.141))",
      },
      Object {
        "output": "13",
        "template": "@(round_up(12.6))",
      },
      Object {
        "output": "12.15",
        "template": "@(round_up(12.141, 2))",
      },
      Object {
        "output": "12.15",
        "template": "@(round_up(12.146, 2))",
      },
      Object {
        "output": "ERROR",
        "template": "@(round_up(\\"foo\\"))",
      },
    ],
    "signature": "round_up(number [,places])",
    "summary": "Rounds \`number\` up to the nearest integer value.",
  },
]
`;

exports[`helpers filterOptions should filter options for "round_up." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "ru" 1`] = `
Array [
  Object {
    "name": "run",
    "summary": "A run in this flow",
  },
]
`;

exports[`helpers filterOptions should filter options for "run" 1`] = `
Array [
  Object {
    "name": "run",
    "summary": "A run in this flow",
  },
  Object {
    "name": "run.flow",
    "summary": "The flow in which a  run takes place",
  },
  Object {
    "name": "run.contact",
    "summary": "The name of the run's contact",
  },
  Object {
    "name": "run.webhook",
    "summary": "The body of the response to the last webhook request made in a  run",
  },
  Object {
    "name": "run.results",
    "summary": "Results collected in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run." 1`] = `
Array [
  Object {
    "name": "run.flow",
    "summary": "The flow in which a  run takes place",
  },
  Object {
    "name": "run.contact",
    "summary": "The name of the run's contact",
  },
  Object {
    "name": "run.webhook",
    "summary": "The body of the response to the last webhook request made in a  run",
  },
  Object {
    "name": "run.results",
    "summary": "Results collected in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.c" 1`] = `
Array [
  Object {
    "name": "run.contact",
    "summary": "The name of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.co" 1`] = `
Array [
  Object {
    "name": "run.contact",
    "summary": "The name of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact" 1`] = `
Array [
  Object {
    "name": "run.contact",
    "summary": "The name of the run's contact",
  },
  Object {
    "name": "run.contact.first_name",
    "summary": "The first name of a run's contact",
  },
  Object {
    "name": "run.contact.name",
    "summary": "The name of the run's contact",
  },
  Object {
    "name": "run.contact.display",
    "summary": "The name or urn of the run's contact",
  },
  Object {
    "name": "run.contact.fields",
    "summary": "Custom fields on a run's contact",
  },
  Object {
    "name": "run.contact.urn",
    "summary": "The primary urn for a run's contact",
  },
  Object {
    "name": "run.contact.language",
    "summary": "The language iso code for a run's contact",
  },
  Object {
    "name": "run.contact.created_on",
    "summary": "The creation date for the run's contact",
  },
  Object {
    "name": "run.contact.groups",
    "summary": "The groups a run's contact is a member of",
  },
  Object {
    "name": "run.contact.urns",
    "summary": "The urns for a run's contact",
  },
  Object {
    "name": "run.contact.uuid",
    "summary": "The uuid of the run's contact",
  },
  Object {
    "name": "run.contact.channel",
    "summary": "A run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.c" 1`] = `
Array [
  Object {
    "name": "run.contact.created_on",
    "summary": "The creation date for the run's contact",
  },
  Object {
    "name": "run.contact.channel",
    "summary": "A run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.ch" 1`] = `
Array [
  Object {
    "name": "run.contact.channel",
    "summary": "A run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel" 1`] = `
Array [
  Object {
    "name": "run.contact.channel",
    "summary": "A run's contact's preferred channel",
  },
  Object {
    "name": "run.contact.channel.uuid",
    "summary": "The UUID of a run's contact's preferred channel",
  },
  Object {
    "name": "run.contact.channel.name",
    "summary": "The name of a run's contact's preferred channel",
  },
  Object {
    "name": "run.contact.channel.address",
    "summary": "The address of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.a" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.address",
    "summary": "The address of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.ad" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.address",
    "summary": "The address of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.address" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.address",
    "summary": "The address of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.n" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.name",
    "summary": "The name of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.na" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.name",
    "summary": "The name of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.name" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.name",
    "summary": "The name of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.u" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.uuid",
    "summary": "The UUID of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.uu" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.uuid",
    "summary": "The UUID of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.channel.uuid" 1`] = `
Array [
  Object {
    "name": "run.contact.channel.uuid",
    "summary": "The UUID of a run's contact's preferred channel",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.cr" 1`] = `
Array [
  Object {
    "name": "run.contact.created_on",
    "summary": "The creation date for the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.created_on" 1`] = `
Array [
  Object {
    "name": "run.contact.created_on",
    "summary": "The creation date for the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.d" 1`] = `
Array [
  Object {
    "name": "run.contact.display",
    "summary": "The name or urn of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.di" 1`] = `
Array [
  Object {
    "name": "run.contact.display",
    "summary": "The name or urn of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.display" 1`] = `
Array [
  Object {
    "name": "run.contact.display",
    "summary": "The name or urn of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.f" 1`] = `
Array [
  Object {
    "name": "run.contact.first_name",
    "summary": "The first name of a run's contact",
  },
  Object {
    "name": "run.contact.fields",
    "summary": "Custom fields on a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.fi" 1`] = `
Array [
  Object {
    "name": "run.contact.first_name",
    "summary": "The first name of a run's contact",
  },
  Object {
    "name": "run.contact.fields",
    "summary": "Custom fields on a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.fields" 1`] = `
Array [
  Object {
    "name": "run.contact.fields",
    "summary": "Custom fields on a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.first_name" 1`] = `
Array [
  Object {
    "name": "run.contact.first_name",
    "summary": "The first name of a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.g" 1`] = `
Array [
  Object {
    "name": "run.contact.groups",
    "summary": "The groups a run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.gr" 1`] = `
Array [
  Object {
    "name": "run.contact.groups",
    "summary": "The groups a run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.groups" 1`] = `
Array [
  Object {
    "name": "run.contact.groups",
    "summary": "The groups a run's contact is a member of",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.l" 1`] = `
Array [
  Object {
    "name": "run.contact.language",
    "summary": "The language iso code for a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.la" 1`] = `
Array [
  Object {
    "name": "run.contact.language",
    "summary": "The language iso code for a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.language" 1`] = `
Array [
  Object {
    "name": "run.contact.language",
    "summary": "The language iso code for a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.n" 1`] = `
Array [
  Object {
    "name": "run.contact.name",
    "summary": "The name of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.na" 1`] = `
Array [
  Object {
    "name": "run.contact.name",
    "summary": "The name of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.name" 1`] = `
Array [
  Object {
    "name": "run.contact.name",
    "summary": "The name of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.u" 1`] = `
Array [
  Object {
    "name": "run.contact.urn",
    "summary": "The primary urn for a run's contact",
  },
  Object {
    "name": "run.contact.urns",
    "summary": "The urns for a run's contact",
  },
  Object {
    "name": "run.contact.uuid",
    "summary": "The uuid of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.ur" 1`] = `
Array [
  Object {
    "name": "run.contact.urn",
    "summary": "The primary urn for a run's contact",
  },
  Object {
    "name": "run.contact.urns",
    "summary": "The urns for a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.urn" 1`] = `
Array [
  Object {
    "name": "run.contact.urn",
    "summary": "The primary urn for a run's contact",
  },
  Object {
    "name": "run.contact.urns",
    "summary": "The urns for a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.urns" 1`] = `
Array [
  Object {
    "name": "run.contact.urns",
    "summary": "The urns for a run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.uu" 1`] = `
Array [
  Object {
    "name": "run.contact.uuid",
    "summary": "The uuid of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.contact.uuid" 1`] = `
Array [
  Object {
    "name": "run.contact.uuid",
    "summary": "The uuid of the run's contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.f" 1`] = `
Array [
  Object {
    "name": "run.flow",
    "summary": "The flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.fl" 1`] = `
Array [
  Object {
    "name": "run.flow",
    "summary": "The flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow" 1`] = `
Array [
  Object {
    "name": "run.flow",
    "summary": "The flow in which a  run takes place",
  },
  Object {
    "name": "run.flow.uuid",
    "summary": "The UUID of the flow in which a  run takes place",
  },
  Object {
    "name": "run.flow.name",
    "summary": "The name of the flow in which a  run takes place",
  },
  Object {
    "name": "run.flow.revision",
    "summary": "The revision number of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.n" 1`] = `
Array [
  Object {
    "name": "run.flow.name",
    "summary": "The name of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.na" 1`] = `
Array [
  Object {
    "name": "run.flow.name",
    "summary": "The name of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.name" 1`] = `
Array [
  Object {
    "name": "run.flow.name",
    "summary": "The name of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.r" 1`] = `
Array [
  Object {
    "name": "run.flow.revision",
    "summary": "The revision number of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.re" 1`] = `
Array [
  Object {
    "name": "run.flow.revision",
    "summary": "The revision number of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.revision" 1`] = `
Array [
  Object {
    "name": "run.flow.revision",
    "summary": "The revision number of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.u" 1`] = `
Array [
  Object {
    "name": "run.flow.uuid",
    "summary": "The UUID of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.uu" 1`] = `
Array [
  Object {
    "name": "run.flow.uuid",
    "summary": "The UUID of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.flow.uuid" 1`] = `
Array [
  Object {
    "name": "run.flow.uuid",
    "summary": "The UUID of the flow in which a  run takes place",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.r" 1`] = `
Array [
  Object {
    "name": "run.results",
    "summary": "Results collected in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.re" 1`] = `
Array [
  Object {
    "name": "run.results",
    "summary": "Results collected in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.results" 1`] = `
Array [
  Object {
    "name": "run.results",
    "summary": "Results collected in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.w" 1`] = `
Array [
  Object {
    "name": "run.webhook",
    "summary": "The body of the response to the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.we" 1`] = `
Array [
  Object {
    "name": "run.webhook",
    "summary": "The body of the response to the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook" 1`] = `
Array [
  Object {
    "name": "run.webhook",
    "summary": "The body of the response to the last webhook request made in a  run",
  },
  Object {
    "name": "run.webhook.status",
    "summary": "The status of the last webhook request made in a  run",
  },
  Object {
    "name": "run.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a  run",
  },
  Object {
    "name": "run.webhook.url",
    "summary": "The URL that was called by the last webhook request in a  run",
  },
  Object {
    "name": "run.webhook.body",
    "summary": "The body of the last webhook request made in a  run",
  },
  Object {
    "name": "run.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a  run, can access subelements",
  },
  Object {
    "name": "run.webhook.request",
    "summary": "The raw request last made in a  run, including headers",
  },
  Object {
    "name": "run.webhook.response",
    "summary": "The raw response last received in a  run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.b" 1`] = `
Array [
  Object {
    "name": "run.webhook.body",
    "summary": "The body of the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.bo" 1`] = `
Array [
  Object {
    "name": "run.webhook.body",
    "summary": "The body of the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.body" 1`] = `
Array [
  Object {
    "name": "run.webhook.body",
    "summary": "The body of the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.j" 1`] = `
Array [
  Object {
    "name": "run.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a  run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.js" 1`] = `
Array [
  Object {
    "name": "run.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a  run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.json" 1`] = `
Array [
  Object {
    "name": "run.webhook.json",
    "summary": "The JSON parsed body of the response to the last webhook request in a  run, can access subelements",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.r" 1`] = `
Array [
  Object {
    "name": "run.webhook.request",
    "summary": "The raw request last made in a  run, including headers",
  },
  Object {
    "name": "run.webhook.response",
    "summary": "The raw response last received in a  run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.re" 1`] = `
Array [
  Object {
    "name": "run.webhook.request",
    "summary": "The raw request last made in a  run, including headers",
  },
  Object {
    "name": "run.webhook.response",
    "summary": "The raw response last received in a  run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.request" 1`] = `
Array [
  Object {
    "name": "run.webhook.request",
    "summary": "The raw request last made in a  run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.response" 1`] = `
Array [
  Object {
    "name": "run.webhook.response",
    "summary": "The raw response last received in a  run, including headers",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.s" 1`] = `
Array [
  Object {
    "name": "run.webhook.status",
    "summary": "The status of the last webhook request made in a  run",
  },
  Object {
    "name": "run.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.st" 1`] = `
Array [
  Object {
    "name": "run.webhook.status",
    "summary": "The status of the last webhook request made in a  run",
  },
  Object {
    "name": "run.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.status" 1`] = `
Array [
  Object {
    "name": "run.webhook.status",
    "summary": "The status of the last webhook request made in a  run",
  },
  Object {
    "name": "run.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.status_code" 1`] = `
Array [
  Object {
    "name": "run.webhook.status_code",
    "summary": "The status code returned from the last webhook request made in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.u" 1`] = `
Array [
  Object {
    "name": "run.webhook.url",
    "summary": "The URL that was called by the last webhook request in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.ur" 1`] = `
Array [
  Object {
    "name": "run.webhook.url",
    "summary": "The URL that was called by the last webhook request in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "run.webhook.url" 1`] = `
Array [
  Object {
    "name": "run.webhook.url",
    "summary": "The URL that was called by the last webhook request in a  run",
  },
]
`;

exports[`helpers filterOptions should filter options for "s" 1`] = `
Array [
  Object {
    "detail": "Empty values are removed from the returned list.",
    "examples": Array [
      Object {
        "output": "[a, b, c]",
        "template": "@(split(\\"a b c\\", \\" \\"))",
      },
      Object {
        "output": "[a]",
        "template": "@(split(\\"a\\", \\" \\"))",
      },
      Object {
        "output": "[abc, d]",
        "template": "@(split(\\"abc..d\\", \\".\\"))",
      },
      Object {
        "output": "[a, b, c]",
        "template": "@(split(\\"a.b.c.\\", \\".\\"))",
      },
      Object {
        "output": "[a, b, c, d]",
        "template": "@(split(\\"a|b,c  d\\", \\" .|,\\"))",
      },
    ],
    "signature": "split(text, delimiters)",
    "summary": "Splits \`text\` based on the given characters in \`delimiters\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "sp" 1`] = `
Array [
  Object {
    "detail": "Empty values are removed from the returned list.",
    "examples": Array [
      Object {
        "output": "[a, b, c]",
        "template": "@(split(\\"a b c\\", \\" \\"))",
      },
      Object {
        "output": "[a]",
        "template": "@(split(\\"a\\", \\" \\"))",
      },
      Object {
        "output": "[abc, d]",
        "template": "@(split(\\"abc..d\\", \\".\\"))",
      },
      Object {
        "output": "[a, b, c]",
        "template": "@(split(\\"a.b.c.\\", \\".\\"))",
      },
      Object {
        "output": "[a, b, c, d]",
        "template": "@(split(\\"a|b,c  d\\", \\" .|,\\"))",
      },
    ],
    "signature": "split(text, delimiters)",
    "summary": "Splits \`text\` based on the given characters in \`delimiters\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "split" 1`] = `
Array [
  Object {
    "detail": "Empty values are removed from the returned list.",
    "examples": Array [
      Object {
        "output": "[a, b, c]",
        "template": "@(split(\\"a b c\\", \\" \\"))",
      },
      Object {
        "output": "[a]",
        "template": "@(split(\\"a\\", \\" \\"))",
      },
      Object {
        "output": "[abc, d]",
        "template": "@(split(\\"abc..d\\", \\".\\"))",
      },
      Object {
        "output": "[a, b, c]",
        "template": "@(split(\\"a.b.c.\\", \\".\\"))",
      },
      Object {
        "output": "[a, b, c, d]",
        "template": "@(split(\\"a|b,c  d\\", \\" .|,\\"))",
      },
    ],
    "signature": "split(text, delimiters)",
    "summary": "Splits \`text\` based on the given characters in \`delimiters\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "split." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "t" 1`] = `
Array [
  Object {
    "name": "trigger",
    "summary": "A trigger that initiated a session",
  },
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(text(3 = 3))",
      },
      Object {
        "output": "\\"123.45\\"",
        "template": "@(json(text(123.45)))",
      },
      Object {
        "output": "ERROR",
        "template": "@(text(1 / 0))",
      },
    ],
    "signature": "text(value)",
    "summary": "Tries to convert \`value\` to text.",
  },
  Object {
    "detail": "The return value will be -1 if \`text1\` comes before \`text2\`, 0 if they are equal
and 1 if \`text1\` comes after \`text2\`.",
    "examples": Array [
      Object {
        "output": "0",
        "template": "@(text_compare(\\"abc\\", \\"abc\\"))",
      },
      Object {
        "output": "-1",
        "template": "@(text_compare(\\"abc\\", \\"def\\"))",
      },
      Object {
        "output": "1",
        "template": "@(text_compare(\\"zzz\\", \\"aaa\\"))",
      },
    ],
    "signature": "text_compare(text1, text2)",
    "summary": "Returns the dictionary order of \`text1\` and \`text2\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "3",
        "template": "@(text_length(\\"abc\\"))",
      },
      Object {
        "output": "6",
        "template": "@(text_length(array(2, 3)))",
      },
    ],
    "signature": "text_length(value)",
    "summary": "Returns the length (number of characters) of \`value\` when converted to text.",
  },
  Object {
    "detail": "If \`end\` is not specified then the entire rest of \`text\` will be included. Negative values
for \`start\` or \`end\` start at the end of \`text\`.",
    "examples": Array [
      Object {
        "output": "llo",
        "template": "@(text_slice(\\"hello\\", 2))",
      },
      Object {
        "output": "el",
        "template": "@(text_slice(\\"hello\\", 1, 3))",
      },
      Object {
        "output": "lo",
        "template": "@(text_slice(\\"hello😁\\", -3, -1))",
      },
      Object {
        "output": "",
        "template": "@(text_slice(\\"hello\\", 7))",
      },
    ],
    "signature": "text_slice(text, start [, end])",
    "summary": "Returns the portion of \`text\` between \`start\` (inclusive) and \`end\` (exclusive).",
  },
  Object {
    "detail": "If it is text then it will be parsed into a time using the default time format.
An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "10:30:00.000000",
        "template": "@(time(\\"10:30\\"))",
      },
      Object {
        "output": "22:30:45.000000",
        "template": "@(time(\\"10:30:45 PM\\"))",
      },
      Object {
        "output": "10:30:45.123456",
        "template": "@(time(datetime(\\"1979-07-18T10:30:45.123456Z\\")))",
      },
      Object {
        "output": "ERROR",
        "template": "@(time(\\"what?\\"))",
      },
    ],
    "signature": "time(value)",
    "summary": "Tries to convert \`value\` to a time.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "14:40:15.000000",
        "template": "@(time_from_parts(14, 40, 15))",
      },
      Object {
        "output": "08:10:00.000000",
        "template": "@(time_from_parts(8, 10, 0))",
      },
      Object {
        "output": "ERROR",
        "template": "@(time_from_parts(25, 0, 0))",
      },
    ],
    "signature": "time_from_parts(hour, minute, second)",
    "summary": "Creates a time from \`hour\`, \`minute\` and \`second\`",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Foo",
        "template": "@(title(\\"foo\\"))",
      },
      Object {
        "output": "Ryan Lewis",
        "template": "@(title(\\"ryan lewis\\"))",
      },
      Object {
        "output": "Ryan Lewis",
        "template": "@(title(\\"RYAN LEWIS\\"))",
      },
      Object {
        "output": "123",
        "template": "@(title(123))",
      },
    ],
    "signature": "title(text)",
    "summary": "Capitalizes each word in \`text\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11",
        "template": "@(today())",
      },
    ],
    "signature": "today()",
    "summary": "Returns the current date in the environment timezone.",
  },
  Object {
    "detail": "If no timezone information is present in the date, then the current timezone will be returned.",
    "examples": Array [
      Object {
        "output": "UTC",
        "template": "@(tz(\\"2017-01-15T02:15:18.123456Z\\"))",
      },
      Object {
        "output": "America/Guayaquil",
        "template": "@(tz(\\"2017-01-15 02:15:18PM\\"))",
      },
      Object {
        "output": "America/Guayaquil",
        "template": "@(tz(\\"2017-01-15\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(tz(\\"foo\\"))",
      },
    ],
    "signature": "tz(date)",
    "summary": "Returns the name of the timezone of \`date\`.",
  },
  Object {
    "detail": "The offset is returned in the format \`[+/-]HH:MM\`. If no timezone information is present in the date,
then the current timezone offset will be returned.",
    "examples": Array [
      Object {
        "output": "+0000",
        "template": "@(tz_offset(\\"2017-01-15T02:15:18.123456Z\\"))",
      },
      Object {
        "output": "-0500",
        "template": "@(tz_offset(\\"2017-01-15 02:15:18PM\\"))",
      },
      Object {
        "output": "-0500",
        "template": "@(tz_offset(\\"2017-01-15\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(tz_offset(\\"foo\\"))",
      },
    ],
    "signature": "tz_offset(date)",
    "summary": "Returns the offset of the timezone of \`date\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "te" 1`] = `
Array [
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(text(3 = 3))",
      },
      Object {
        "output": "\\"123.45\\"",
        "template": "@(json(text(123.45)))",
      },
      Object {
        "output": "ERROR",
        "template": "@(text(1 / 0))",
      },
    ],
    "signature": "text(value)",
    "summary": "Tries to convert \`value\` to text.",
  },
  Object {
    "detail": "The return value will be -1 if \`text1\` comes before \`text2\`, 0 if they are equal
and 1 if \`text1\` comes after \`text2\`.",
    "examples": Array [
      Object {
        "output": "0",
        "template": "@(text_compare(\\"abc\\", \\"abc\\"))",
      },
      Object {
        "output": "-1",
        "template": "@(text_compare(\\"abc\\", \\"def\\"))",
      },
      Object {
        "output": "1",
        "template": "@(text_compare(\\"zzz\\", \\"aaa\\"))",
      },
    ],
    "signature": "text_compare(text1, text2)",
    "summary": "Returns the dictionary order of \`text1\` and \`text2\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "3",
        "template": "@(text_length(\\"abc\\"))",
      },
      Object {
        "output": "6",
        "template": "@(text_length(array(2, 3)))",
      },
    ],
    "signature": "text_length(value)",
    "summary": "Returns the length (number of characters) of \`value\` when converted to text.",
  },
  Object {
    "detail": "If \`end\` is not specified then the entire rest of \`text\` will be included. Negative values
for \`start\` or \`end\` start at the end of \`text\`.",
    "examples": Array [
      Object {
        "output": "llo",
        "template": "@(text_slice(\\"hello\\", 2))",
      },
      Object {
        "output": "el",
        "template": "@(text_slice(\\"hello\\", 1, 3))",
      },
      Object {
        "output": "lo",
        "template": "@(text_slice(\\"hello😁\\", -3, -1))",
      },
      Object {
        "output": "",
        "template": "@(text_slice(\\"hello\\", 7))",
      },
    ],
    "signature": "text_slice(text, start [, end])",
    "summary": "Returns the portion of \`text\` between \`start\` (inclusive) and \`end\` (exclusive).",
  },
]
`;

exports[`helpers filterOptions should filter options for "text" 1`] = `
Array [
  Object {
    "detail": "An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "true",
        "template": "@(text(3 = 3))",
      },
      Object {
        "output": "\\"123.45\\"",
        "template": "@(json(text(123.45)))",
      },
      Object {
        "output": "ERROR",
        "template": "@(text(1 / 0))",
      },
    ],
    "signature": "text(value)",
    "summary": "Tries to convert \`value\` to text.",
  },
  Object {
    "detail": "The return value will be -1 if \`text1\` comes before \`text2\`, 0 if they are equal
and 1 if \`text1\` comes after \`text2\`.",
    "examples": Array [
      Object {
        "output": "0",
        "template": "@(text_compare(\\"abc\\", \\"abc\\"))",
      },
      Object {
        "output": "-1",
        "template": "@(text_compare(\\"abc\\", \\"def\\"))",
      },
      Object {
        "output": "1",
        "template": "@(text_compare(\\"zzz\\", \\"aaa\\"))",
      },
    ],
    "signature": "text_compare(text1, text2)",
    "summary": "Returns the dictionary order of \`text1\` and \`text2\`.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "3",
        "template": "@(text_length(\\"abc\\"))",
      },
      Object {
        "output": "6",
        "template": "@(text_length(array(2, 3)))",
      },
    ],
    "signature": "text_length(value)",
    "summary": "Returns the length (number of characters) of \`value\` when converted to text.",
  },
  Object {
    "detail": "If \`end\` is not specified then the entire rest of \`text\` will be included. Negative values
for \`start\` or \`end\` start at the end of \`text\`.",
    "examples": Array [
      Object {
        "output": "llo",
        "template": "@(text_slice(\\"hello\\", 2))",
      },
      Object {
        "output": "el",
        "template": "@(text_slice(\\"hello\\", 1, 3))",
      },
      Object {
        "output": "lo",
        "template": "@(text_slice(\\"hello😁\\", -3, -1))",
      },
      Object {
        "output": "",
        "template": "@(text_slice(\\"hello\\", 7))",
      },
    ],
    "signature": "text_slice(text, start [, end])",
    "summary": "Returns the portion of \`text\` between \`start\` (inclusive) and \`end\` (exclusive).",
  },
]
`;

exports[`helpers filterOptions should filter options for "text." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "text_compare" 1`] = `
Array [
  Object {
    "detail": "The return value will be -1 if \`text1\` comes before \`text2\`, 0 if they are equal
and 1 if \`text1\` comes after \`text2\`.",
    "examples": Array [
      Object {
        "output": "0",
        "template": "@(text_compare(\\"abc\\", \\"abc\\"))",
      },
      Object {
        "output": "-1",
        "template": "@(text_compare(\\"abc\\", \\"def\\"))",
      },
      Object {
        "output": "1",
        "template": "@(text_compare(\\"zzz\\", \\"aaa\\"))",
      },
    ],
    "signature": "text_compare(text1, text2)",
    "summary": "Returns the dictionary order of \`text1\` and \`text2\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "text_compare." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "text_length" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "3",
        "template": "@(text_length(\\"abc\\"))",
      },
      Object {
        "output": "6",
        "template": "@(text_length(array(2, 3)))",
      },
    ],
    "signature": "text_length(value)",
    "summary": "Returns the length (number of characters) of \`value\` when converted to text.",
  },
]
`;

exports[`helpers filterOptions should filter options for "text_length." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "text_slice" 1`] = `
Array [
  Object {
    "detail": "If \`end\` is not specified then the entire rest of \`text\` will be included. Negative values
for \`start\` or \`end\` start at the end of \`text\`.",
    "examples": Array [
      Object {
        "output": "llo",
        "template": "@(text_slice(\\"hello\\", 2))",
      },
      Object {
        "output": "el",
        "template": "@(text_slice(\\"hello\\", 1, 3))",
      },
      Object {
        "output": "lo",
        "template": "@(text_slice(\\"hello😁\\", -3, -1))",
      },
      Object {
        "output": "",
        "template": "@(text_slice(\\"hello\\", 7))",
      },
    ],
    "signature": "text_slice(text, start [, end])",
    "summary": "Returns the portion of \`text\` between \`start\` (inclusive) and \`end\` (exclusive).",
  },
]
`;

exports[`helpers filterOptions should filter options for "text_slice." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "ti" 1`] = `
Array [
  Object {
    "detail": "If it is text then it will be parsed into a time using the default time format.
An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "10:30:00.000000",
        "template": "@(time(\\"10:30\\"))",
      },
      Object {
        "output": "22:30:45.000000",
        "template": "@(time(\\"10:30:45 PM\\"))",
      },
      Object {
        "output": "10:30:45.123456",
        "template": "@(time(datetime(\\"1979-07-18T10:30:45.123456Z\\")))",
      },
      Object {
        "output": "ERROR",
        "template": "@(time(\\"what?\\"))",
      },
    ],
    "signature": "time(value)",
    "summary": "Tries to convert \`value\` to a time.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "14:40:15.000000",
        "template": "@(time_from_parts(14, 40, 15))",
      },
      Object {
        "output": "08:10:00.000000",
        "template": "@(time_from_parts(8, 10, 0))",
      },
      Object {
        "output": "ERROR",
        "template": "@(time_from_parts(25, 0, 0))",
      },
    ],
    "signature": "time_from_parts(hour, minute, second)",
    "summary": "Creates a time from \`hour\`, \`minute\` and \`second\`",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Foo",
        "template": "@(title(\\"foo\\"))",
      },
      Object {
        "output": "Ryan Lewis",
        "template": "@(title(\\"ryan lewis\\"))",
      },
      Object {
        "output": "Ryan Lewis",
        "template": "@(title(\\"RYAN LEWIS\\"))",
      },
      Object {
        "output": "123",
        "template": "@(title(123))",
      },
    ],
    "signature": "title(text)",
    "summary": "Capitalizes each word in \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "time" 1`] = `
Array [
  Object {
    "detail": "If it is text then it will be parsed into a time using the default time format.
An error is returned if the value can't be converted.",
    "examples": Array [
      Object {
        "output": "10:30:00.000000",
        "template": "@(time(\\"10:30\\"))",
      },
      Object {
        "output": "22:30:45.000000",
        "template": "@(time(\\"10:30:45 PM\\"))",
      },
      Object {
        "output": "10:30:45.123456",
        "template": "@(time(datetime(\\"1979-07-18T10:30:45.123456Z\\")))",
      },
      Object {
        "output": "ERROR",
        "template": "@(time(\\"what?\\"))",
      },
    ],
    "signature": "time(value)",
    "summary": "Tries to convert \`value\` to a time.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "14:40:15.000000",
        "template": "@(time_from_parts(14, 40, 15))",
      },
      Object {
        "output": "08:10:00.000000",
        "template": "@(time_from_parts(8, 10, 0))",
      },
      Object {
        "output": "ERROR",
        "template": "@(time_from_parts(25, 0, 0))",
      },
    ],
    "signature": "time_from_parts(hour, minute, second)",
    "summary": "Creates a time from \`hour\`, \`minute\` and \`second\`",
  },
]
`;

exports[`helpers filterOptions should filter options for "time." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "time_from_parts" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "14:40:15.000000",
        "template": "@(time_from_parts(14, 40, 15))",
      },
      Object {
        "output": "08:10:00.000000",
        "template": "@(time_from_parts(8, 10, 0))",
      },
      Object {
        "output": "ERROR",
        "template": "@(time_from_parts(25, 0, 0))",
      },
    ],
    "signature": "time_from_parts(hour, minute, second)",
    "summary": "Creates a time from \`hour\`, \`minute\` and \`second\`",
  },
]
`;

exports[`helpers filterOptions should filter options for "time_from_parts." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "title" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "Foo",
        "template": "@(title(\\"foo\\"))",
      },
      Object {
        "output": "Ryan Lewis",
        "template": "@(title(\\"ryan lewis\\"))",
      },
      Object {
        "output": "Ryan Lewis",
        "template": "@(title(\\"RYAN LEWIS\\"))",
      },
      Object {
        "output": "123",
        "template": "@(title(123))",
      },
    ],
    "signature": "title(text)",
    "summary": "Capitalizes each word in \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "title." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "to" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11",
        "template": "@(today())",
      },
    ],
    "signature": "today()",
    "summary": "Returns the current date in the environment timezone.",
  },
]
`;

exports[`helpers filterOptions should filter options for "today" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "2018-04-11",
        "template": "@(today())",
      },
    ],
    "signature": "today()",
    "summary": "Returns the current date in the environment timezone.",
  },
]
`;

exports[`helpers filterOptions should filter options for "today." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "tr" 1`] = `
Array [
  Object {
    "name": "trigger",
    "summary": "A trigger that initiated a session",
  },
]
`;

exports[`helpers filterOptions should filter options for "trigger" 1`] = `
Array [
  Object {
    "name": "trigger",
    "summary": "A trigger that initiated a session",
  },
  Object {
    "name": "trigger.type",
    "summary": "The type of a trigger, one of “manual” or “flow”",
  },
  Object {
    "name": "trigger.params",
    "summary": "The parameters passed to a trigger",
  },
]
`;

exports[`helpers filterOptions should filter options for "trigger." 1`] = `
Array [
  Object {
    "name": "trigger.type",
    "summary": "The type of a trigger, one of “manual” or “flow”",
  },
  Object {
    "name": "trigger.params",
    "summary": "The parameters passed to a trigger",
  },
]
`;

exports[`helpers filterOptions should filter options for "trigger.p" 1`] = `
Array [
  Object {
    "name": "trigger.params",
    "summary": "The parameters passed to a trigger",
  },
]
`;

exports[`helpers filterOptions should filter options for "trigger.pa" 1`] = `
Array [
  Object {
    "name": "trigger.params",
    "summary": "The parameters passed to a trigger",
  },
]
`;

exports[`helpers filterOptions should filter options for "trigger.params" 1`] = `
Array [
  Object {
    "name": "trigger.params",
    "summary": "The parameters passed to a trigger",
  },
]
`;

exports[`helpers filterOptions should filter options for "trigger.t" 1`] = `
Array [
  Object {
    "name": "trigger.type",
    "summary": "The type of a trigger, one of “manual” or “flow”",
  },
]
`;

exports[`helpers filterOptions should filter options for "trigger.ty" 1`] = `
Array [
  Object {
    "name": "trigger.type",
    "summary": "The type of a trigger, one of “manual” or “flow”",
  },
]
`;

exports[`helpers filterOptions should filter options for "trigger.type" 1`] = `
Array [
  Object {
    "name": "trigger.type",
    "summary": "The type of a trigger, one of “manual” or “flow”",
  },
]
`;

exports[`helpers filterOptions should filter options for "tz" 1`] = `
Array [
  Object {
    "detail": "If no timezone information is present in the date, then the current timezone will be returned.",
    "examples": Array [
      Object {
        "output": "UTC",
        "template": "@(tz(\\"2017-01-15T02:15:18.123456Z\\"))",
      },
      Object {
        "output": "America/Guayaquil",
        "template": "@(tz(\\"2017-01-15 02:15:18PM\\"))",
      },
      Object {
        "output": "America/Guayaquil",
        "template": "@(tz(\\"2017-01-15\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(tz(\\"foo\\"))",
      },
    ],
    "signature": "tz(date)",
    "summary": "Returns the name of the timezone of \`date\`.",
  },
  Object {
    "detail": "The offset is returned in the format \`[+/-]HH:MM\`. If no timezone information is present in the date,
then the current timezone offset will be returned.",
    "examples": Array [
      Object {
        "output": "+0000",
        "template": "@(tz_offset(\\"2017-01-15T02:15:18.123456Z\\"))",
      },
      Object {
        "output": "-0500",
        "template": "@(tz_offset(\\"2017-01-15 02:15:18PM\\"))",
      },
      Object {
        "output": "-0500",
        "template": "@(tz_offset(\\"2017-01-15\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(tz_offset(\\"foo\\"))",
      },
    ],
    "signature": "tz_offset(date)",
    "summary": "Returns the offset of the timezone of \`date\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "tz." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "tz_offset" 1`] = `
Array [
  Object {
    "detail": "The offset is returned in the format \`[+/-]HH:MM\`. If no timezone information is present in the date,
then the current timezone offset will be returned.",
    "examples": Array [
      Object {
        "output": "+0000",
        "template": "@(tz_offset(\\"2017-01-15T02:15:18.123456Z\\"))",
      },
      Object {
        "output": "-0500",
        "template": "@(tz_offset(\\"2017-01-15 02:15:18PM\\"))",
      },
      Object {
        "output": "-0500",
        "template": "@(tz_offset(\\"2017-01-15\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(tz_offset(\\"foo\\"))",
      },
    ],
    "signature": "tz_offset(date)",
    "summary": "Returns the offset of the timezone of \`date\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "tz_offset." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "u" 1`] = `
Array [
  Object {
    "name": "urns",
    "summary": "The urns for the contact",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "ASDF",
        "template": "@(upper(\\"Asdf\\"))",
      },
      Object {
        "output": "123",
        "template": "@(upper(123))",
      },
    ],
    "signature": "upper(text)",
    "summary": "Converts \`text\` to lowercase.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "two%20%26%20words",
        "template": "@(url_encode(\\"two & words\\"))",
      },
      Object {
        "output": "10",
        "template": "@(url_encode(10))",
      },
    ],
    "signature": "url_encode(text)",
    "summary": "Encodes \`text\` for use as a URL parameter.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{display: , path: +593979012345, scheme: tel}",
        "template": "@(urn_parts(\\"tel:+593979012345\\"))",
      },
      Object {
        "output": "{display: bobby, path: 3263621177, scheme: twitterid}",
        "template": "@(urn_parts(\\"twitterid:3263621177#bobby\\"))",
      },
    ],
    "signature": "urn_parts(urn)",
    "summary": "Parses a URN into its different parts",
  },
]
`;

exports[`helpers filterOptions should filter options for "up" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "ASDF",
        "template": "@(upper(\\"Asdf\\"))",
      },
      Object {
        "output": "123",
        "template": "@(upper(123))",
      },
    ],
    "signature": "upper(text)",
    "summary": "Converts \`text\` to lowercase.",
  },
]
`;

exports[`helpers filterOptions should filter options for "upper" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "ASDF",
        "template": "@(upper(\\"Asdf\\"))",
      },
      Object {
        "output": "123",
        "template": "@(upper(123))",
      },
    ],
    "signature": "upper(text)",
    "summary": "Converts \`text\` to lowercase.",
  },
]
`;

exports[`helpers filterOptions should filter options for "upper." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "ur" 1`] = `
Array [
  Object {
    "name": "urns",
    "summary": "The urns for the contact",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "two%20%26%20words",
        "template": "@(url_encode(\\"two & words\\"))",
      },
      Object {
        "output": "10",
        "template": "@(url_encode(10))",
      },
    ],
    "signature": "url_encode(text)",
    "summary": "Encodes \`text\` for use as a URL parameter.",
  },
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{display: , path: +593979012345, scheme: tel}",
        "template": "@(urn_parts(\\"tel:+593979012345\\"))",
      },
      Object {
        "output": "{display: bobby, path: 3263621177, scheme: twitterid}",
        "template": "@(urn_parts(\\"twitterid:3263621177#bobby\\"))",
      },
    ],
    "signature": "urn_parts(urn)",
    "summary": "Parses a URN into its different parts",
  },
]
`;

exports[`helpers filterOptions should filter options for "url_encode" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "two%20%26%20words",
        "template": "@(url_encode(\\"two & words\\"))",
      },
      Object {
        "output": "10",
        "template": "@(url_encode(10))",
      },
    ],
    "signature": "url_encode(text)",
    "summary": "Encodes \`text\` for use as a URL parameter.",
  },
]
`;

exports[`helpers filterOptions should filter options for "url_encode." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "urn_parts" 1`] = `
Array [
  Object {
    "detail": "",
    "examples": Array [
      Object {
        "output": "{display: , path: +593979012345, scheme: tel}",
        "template": "@(urn_parts(\\"tel:+593979012345\\"))",
      },
      Object {
        "output": "{display: bobby, path: 3263621177, scheme: twitterid}",
        "template": "@(urn_parts(\\"twitterid:3263621177#bobby\\"))",
      },
    ],
    "signature": "urn_parts(urn)",
    "summary": "Parses a URN into its different parts",
  },
]
`;

exports[`helpers filterOptions should filter options for "urn_parts." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "urns" 1`] = `
Array [
  Object {
    "name": "urns",
    "summary": "The urns for the contact",
  },
  Object {
    "name": "urns.facebook",
    "summary": "The Facebook urn for the contact",
  },
  Object {
    "name": "urns.fcm",
    "summary": "The Firebase Cloud Messaging id for the contact",
  },
  Object {
    "name": "urns.jiochat",
    "summary": "The Jiochat id for the contact",
  },
  Object {
    "name": "urns.line",
    "summary": "The Line id for the contact",
  },
  Object {
    "name": "urns.mailto",
    "summary": "The email address for the contact",
  },
  Object {
    "name": "urns.tel",
    "summary": "The phone number for the contact",
  },
  Object {
    "name": "urns.telegram",
    "summary": "The Telegram id for the contact",
  },
  Object {
    "name": "urns.twitterid",
    "summary": "The Twitter id for the contact",
  },
  Object {
    "name": "urns.viber",
    "summary": "The Viber id for the contact",
  },
  Object {
    "name": "urns.wechat",
    "summary": "The Wechat id for the contact",
  },
  Object {
    "name": "urns.whatsapp",
    "summary": "The WhatsApp number for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns." 1`] = `
Array [
  Object {
    "name": "urns.facebook",
    "summary": "The Facebook urn for the contact",
  },
  Object {
    "name": "urns.fcm",
    "summary": "The Firebase Cloud Messaging id for the contact",
  },
  Object {
    "name": "urns.jiochat",
    "summary": "The Jiochat id for the contact",
  },
  Object {
    "name": "urns.line",
    "summary": "The Line id for the contact",
  },
  Object {
    "name": "urns.mailto",
    "summary": "The email address for the contact",
  },
  Object {
    "name": "urns.tel",
    "summary": "The phone number for the contact",
  },
  Object {
    "name": "urns.telegram",
    "summary": "The Telegram id for the contact",
  },
  Object {
    "name": "urns.twitterid",
    "summary": "The Twitter id for the contact",
  },
  Object {
    "name": "urns.viber",
    "summary": "The Viber id for the contact",
  },
  Object {
    "name": "urns.wechat",
    "summary": "The Wechat id for the contact",
  },
  Object {
    "name": "urns.whatsapp",
    "summary": "The WhatsApp number for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.f" 1`] = `
Array [
  Object {
    "name": "urns.facebook",
    "summary": "The Facebook urn for the contact",
  },
  Object {
    "name": "urns.fcm",
    "summary": "The Firebase Cloud Messaging id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.fa" 1`] = `
Array [
  Object {
    "name": "urns.facebook",
    "summary": "The Facebook urn for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.facebook" 1`] = `
Array [
  Object {
    "name": "urns.facebook",
    "summary": "The Facebook urn for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.fc" 1`] = `
Array [
  Object {
    "name": "urns.fcm",
    "summary": "The Firebase Cloud Messaging id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.fcm" 1`] = `
Array [
  Object {
    "name": "urns.fcm",
    "summary": "The Firebase Cloud Messaging id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.j" 1`] = `
Array [
  Object {
    "name": "urns.jiochat",
    "summary": "The Jiochat id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.ji" 1`] = `
Array [
  Object {
    "name": "urns.jiochat",
    "summary": "The Jiochat id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.jiochat" 1`] = `
Array [
  Object {
    "name": "urns.jiochat",
    "summary": "The Jiochat id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.l" 1`] = `
Array [
  Object {
    "name": "urns.line",
    "summary": "The Line id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.li" 1`] = `
Array [
  Object {
    "name": "urns.line",
    "summary": "The Line id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.line" 1`] = `
Array [
  Object {
    "name": "urns.line",
    "summary": "The Line id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.m" 1`] = `
Array [
  Object {
    "name": "urns.mailto",
    "summary": "The email address for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.ma" 1`] = `
Array [
  Object {
    "name": "urns.mailto",
    "summary": "The email address for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.mailto" 1`] = `
Array [
  Object {
    "name": "urns.mailto",
    "summary": "The email address for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.t" 1`] = `
Array [
  Object {
    "name": "urns.tel",
    "summary": "The phone number for the contact",
  },
  Object {
    "name": "urns.telegram",
    "summary": "The Telegram id for the contact",
  },
  Object {
    "name": "urns.twitterid",
    "summary": "The Twitter id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.te" 1`] = `
Array [
  Object {
    "name": "urns.tel",
    "summary": "The phone number for the contact",
  },
  Object {
    "name": "urns.telegram",
    "summary": "The Telegram id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.tel" 1`] = `
Array [
  Object {
    "name": "urns.tel",
    "summary": "The phone number for the contact",
  },
  Object {
    "name": "urns.telegram",
    "summary": "The Telegram id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.telegram" 1`] = `
Array [
  Object {
    "name": "urns.telegram",
    "summary": "The Telegram id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.tw" 1`] = `
Array [
  Object {
    "name": "urns.twitterid",
    "summary": "The Twitter id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.twitterid" 1`] = `
Array [
  Object {
    "name": "urns.twitterid",
    "summary": "The Twitter id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.v" 1`] = `
Array [
  Object {
    "name": "urns.viber",
    "summary": "The Viber id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.vi" 1`] = `
Array [
  Object {
    "name": "urns.viber",
    "summary": "The Viber id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.viber" 1`] = `
Array [
  Object {
    "name": "urns.viber",
    "summary": "The Viber id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.w" 1`] = `
Array [
  Object {
    "name": "urns.wechat",
    "summary": "The Wechat id for the contact",
  },
  Object {
    "name": "urns.whatsapp",
    "summary": "The WhatsApp number for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.we" 1`] = `
Array [
  Object {
    "name": "urns.wechat",
    "summary": "The Wechat id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.wechat" 1`] = `
Array [
  Object {
    "name": "urns.wechat",
    "summary": "The Wechat id for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.wh" 1`] = `
Array [
  Object {
    "name": "urns.whatsapp",
    "summary": "The WhatsApp number for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "urns.whatsapp" 1`] = `
Array [
  Object {
    "name": "urns.whatsapp",
    "summary": "The WhatsApp number for the contact",
  },
]
`;

exports[`helpers filterOptions should filter options for "w" 1`] = `
Array [
  Object {
    "detail": "The week is considered to start on Sunday so a Sunday returns 0, a Monday returns 1 etc.",
    "examples": Array [
      Object {
        "output": "0",
        "template": "@(weekday(\\"2017-01-15\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(weekday(\\"foo\\"))",
      },
    ],
    "signature": "weekday(date)",
    "summary": "Returns the day of the week for \`date\`.",
  },
  Object {
    "detail": "Indexes start at zero. There is an optional final parameter \`delimiters\` which
is string of characters used to split the text into words.",
    "examples": Array [
      Object {
        "output": "bee",
        "template": "@(word(\\"bee cat dog\\", 0))",
      },
      Object {
        "output": "bee",
        "template": "@(word(\\"bee.cat,dog\\", 0))",
      },
      Object {
        "output": "cat",
        "template": "@(word(\\"bee.cat,dog\\", 1))",
      },
      Object {
        "output": "dog",
        "template": "@(word(\\"bee.cat,dog\\", 2))",
      },
      Object {
        "output": "dog",
        "template": "@(word(\\"bee.cat,dog\\", -1))",
      },
      Object {
        "output": "cat",
        "template": "@(word(\\"bee.cat,dog\\", -2))",
      },
      Object {
        "output": "cat,dog",
        "template": "@(word(\\"bee.*cat,dog\\", 1, \\".*=|\\"))",
      },
      Object {
        "output": "O'Flaggerty",
        "template": "@(word(\\"O'Grady O'Flaggerty\\", 1, \\" \\"))",
      },
    ],
    "signature": "word(text, index [,delimiters])",
    "summary": "Returns the word at \`index\` in \`text\`.",
  },
  Object {
    "detail": "There is an optional final parameter \`delimiters\` which is string of characters used
to split the text into words.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(word_count(\\"foo bar\\"))",
      },
      Object {
        "output": "1",
        "template": "@(word_count(10))",
      },
      Object {
        "output": "0",
        "template": "@(word_count(\\"\\"))",
      },
      Object {
        "output": "4",
        "template": "@(word_count(\\"😀😃😄😁\\"))",
      },
      Object {
        "output": "2",
        "template": "@(word_count(\\"bee.*cat,dog\\", \\".*=|\\"))",
      },
      Object {
        "output": "2",
        "template": "@(word_count(\\"O'Grady O'Flaggerty\\", \\" \\"))",
      },
    ],
    "signature": "word_count(text [,delimiters])",
    "summary": "Returns the number of words in \`text\`.",
  },
  Object {
    "detail": "The returned words are those from \`start\` up to but not-including \`end\`. Indexes start at zero and a negative
end value means that all words after the start should be returned. There is an optional final parameter \`delimiters\`
which is string of characters used to split the text into words.",
    "examples": Array [
      Object {
        "output": "bee",
        "template": "@(word_slice(\\"bee cat dog\\", 0, 1))",
      },
      Object {
        "output": "bee cat",
        "template": "@(word_slice(\\"bee cat dog\\", 0, 2))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee cat dog\\", 1, -1))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee cat dog\\", 1))",
      },
      Object {
        "output": "dog",
        "template": "@(word_slice(\\"bee cat dog\\", 2, 3))",
      },
      Object {
        "output": "",
        "template": "@(word_slice(\\"bee cat dog\\", 3, 10))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee.*cat,dog\\", 1, -1, \\".*=|,\\"))",
      },
      Object {
        "output": "O'Flaggerty",
        "template": "@(word_slice(\\"O'Grady O'Flaggerty\\", 1, 2, \\" \\"))",
      },
    ],
    "signature": "word_slice(text, start, end [,delimiters])",
    "summary": "Extracts a sub-sequence of words from \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "we" 1`] = `
Array [
  Object {
    "detail": "The week is considered to start on Sunday so a Sunday returns 0, a Monday returns 1 etc.",
    "examples": Array [
      Object {
        "output": "0",
        "template": "@(weekday(\\"2017-01-15\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(weekday(\\"foo\\"))",
      },
    ],
    "signature": "weekday(date)",
    "summary": "Returns the day of the week for \`date\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "weekday" 1`] = `
Array [
  Object {
    "detail": "The week is considered to start on Sunday so a Sunday returns 0, a Monday returns 1 etc.",
    "examples": Array [
      Object {
        "output": "0",
        "template": "@(weekday(\\"2017-01-15\\"))",
      },
      Object {
        "output": "ERROR",
        "template": "@(weekday(\\"foo\\"))",
      },
    ],
    "signature": "weekday(date)",
    "summary": "Returns the day of the week for \`date\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "weekday." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "wo" 1`] = `
Array [
  Object {
    "detail": "Indexes start at zero. There is an optional final parameter \`delimiters\` which
is string of characters used to split the text into words.",
    "examples": Array [
      Object {
        "output": "bee",
        "template": "@(word(\\"bee cat dog\\", 0))",
      },
      Object {
        "output": "bee",
        "template": "@(word(\\"bee.cat,dog\\", 0))",
      },
      Object {
        "output": "cat",
        "template": "@(word(\\"bee.cat,dog\\", 1))",
      },
      Object {
        "output": "dog",
        "template": "@(word(\\"bee.cat,dog\\", 2))",
      },
      Object {
        "output": "dog",
        "template": "@(word(\\"bee.cat,dog\\", -1))",
      },
      Object {
        "output": "cat",
        "template": "@(word(\\"bee.cat,dog\\", -2))",
      },
      Object {
        "output": "cat,dog",
        "template": "@(word(\\"bee.*cat,dog\\", 1, \\".*=|\\"))",
      },
      Object {
        "output": "O'Flaggerty",
        "template": "@(word(\\"O'Grady O'Flaggerty\\", 1, \\" \\"))",
      },
    ],
    "signature": "word(text, index [,delimiters])",
    "summary": "Returns the word at \`index\` in \`text\`.",
  },
  Object {
    "detail": "There is an optional final parameter \`delimiters\` which is string of characters used
to split the text into words.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(word_count(\\"foo bar\\"))",
      },
      Object {
        "output": "1",
        "template": "@(word_count(10))",
      },
      Object {
        "output": "0",
        "template": "@(word_count(\\"\\"))",
      },
      Object {
        "output": "4",
        "template": "@(word_count(\\"😀😃😄😁\\"))",
      },
      Object {
        "output": "2",
        "template": "@(word_count(\\"bee.*cat,dog\\", \\".*=|\\"))",
      },
      Object {
        "output": "2",
        "template": "@(word_count(\\"O'Grady O'Flaggerty\\", \\" \\"))",
      },
    ],
    "signature": "word_count(text [,delimiters])",
    "summary": "Returns the number of words in \`text\`.",
  },
  Object {
    "detail": "The returned words are those from \`start\` up to but not-including \`end\`. Indexes start at zero and a negative
end value means that all words after the start should be returned. There is an optional final parameter \`delimiters\`
which is string of characters used to split the text into words.",
    "examples": Array [
      Object {
        "output": "bee",
        "template": "@(word_slice(\\"bee cat dog\\", 0, 1))",
      },
      Object {
        "output": "bee cat",
        "template": "@(word_slice(\\"bee cat dog\\", 0, 2))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee cat dog\\", 1, -1))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee cat dog\\", 1))",
      },
      Object {
        "output": "dog",
        "template": "@(word_slice(\\"bee cat dog\\", 2, 3))",
      },
      Object {
        "output": "",
        "template": "@(word_slice(\\"bee cat dog\\", 3, 10))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee.*cat,dog\\", 1, -1, \\".*=|,\\"))",
      },
      Object {
        "output": "O'Flaggerty",
        "template": "@(word_slice(\\"O'Grady O'Flaggerty\\", 1, 2, \\" \\"))",
      },
    ],
    "signature": "word_slice(text, start, end [,delimiters])",
    "summary": "Extracts a sub-sequence of words from \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "word" 1`] = `
Array [
  Object {
    "detail": "Indexes start at zero. There is an optional final parameter \`delimiters\` which
is string of characters used to split the text into words.",
    "examples": Array [
      Object {
        "output": "bee",
        "template": "@(word(\\"bee cat dog\\", 0))",
      },
      Object {
        "output": "bee",
        "template": "@(word(\\"bee.cat,dog\\", 0))",
      },
      Object {
        "output": "cat",
        "template": "@(word(\\"bee.cat,dog\\", 1))",
      },
      Object {
        "output": "dog",
        "template": "@(word(\\"bee.cat,dog\\", 2))",
      },
      Object {
        "output": "dog",
        "template": "@(word(\\"bee.cat,dog\\", -1))",
      },
      Object {
        "output": "cat",
        "template": "@(word(\\"bee.cat,dog\\", -2))",
      },
      Object {
        "output": "cat,dog",
        "template": "@(word(\\"bee.*cat,dog\\", 1, \\".*=|\\"))",
      },
      Object {
        "output": "O'Flaggerty",
        "template": "@(word(\\"O'Grady O'Flaggerty\\", 1, \\" \\"))",
      },
    ],
    "signature": "word(text, index [,delimiters])",
    "summary": "Returns the word at \`index\` in \`text\`.",
  },
  Object {
    "detail": "There is an optional final parameter \`delimiters\` which is string of characters used
to split the text into words.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(word_count(\\"foo bar\\"))",
      },
      Object {
        "output": "1",
        "template": "@(word_count(10))",
      },
      Object {
        "output": "0",
        "template": "@(word_count(\\"\\"))",
      },
      Object {
        "output": "4",
        "template": "@(word_count(\\"😀😃😄😁\\"))",
      },
      Object {
        "output": "2",
        "template": "@(word_count(\\"bee.*cat,dog\\", \\".*=|\\"))",
      },
      Object {
        "output": "2",
        "template": "@(word_count(\\"O'Grady O'Flaggerty\\", \\" \\"))",
      },
    ],
    "signature": "word_count(text [,delimiters])",
    "summary": "Returns the number of words in \`text\`.",
  },
  Object {
    "detail": "The returned words are those from \`start\` up to but not-including \`end\`. Indexes start at zero and a negative
end value means that all words after the start should be returned. There is an optional final parameter \`delimiters\`
which is string of characters used to split the text into words.",
    "examples": Array [
      Object {
        "output": "bee",
        "template": "@(word_slice(\\"bee cat dog\\", 0, 1))",
      },
      Object {
        "output": "bee cat",
        "template": "@(word_slice(\\"bee cat dog\\", 0, 2))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee cat dog\\", 1, -1))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee cat dog\\", 1))",
      },
      Object {
        "output": "dog",
        "template": "@(word_slice(\\"bee cat dog\\", 2, 3))",
      },
      Object {
        "output": "",
        "template": "@(word_slice(\\"bee cat dog\\", 3, 10))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee.*cat,dog\\", 1, -1, \\".*=|,\\"))",
      },
      Object {
        "output": "O'Flaggerty",
        "template": "@(word_slice(\\"O'Grady O'Flaggerty\\", 1, 2, \\" \\"))",
      },
    ],
    "signature": "word_slice(text, start, end [,delimiters])",
    "summary": "Extracts a sub-sequence of words from \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "word." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "word_count" 1`] = `
Array [
  Object {
    "detail": "There is an optional final parameter \`delimiters\` which is string of characters used
to split the text into words.",
    "examples": Array [
      Object {
        "output": "2",
        "template": "@(word_count(\\"foo bar\\"))",
      },
      Object {
        "output": "1",
        "template": "@(word_count(10))",
      },
      Object {
        "output": "0",
        "template": "@(word_count(\\"\\"))",
      },
      Object {
        "output": "4",
        "template": "@(word_count(\\"😀😃😄😁\\"))",
      },
      Object {
        "output": "2",
        "template": "@(word_count(\\"bee.*cat,dog\\", \\".*=|\\"))",
      },
      Object {
        "output": "2",
        "template": "@(word_count(\\"O'Grady O'Flaggerty\\", \\" \\"))",
      },
    ],
    "signature": "word_count(text [,delimiters])",
    "summary": "Returns the number of words in \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "word_count." 1`] = `Array []`;

exports[`helpers filterOptions should filter options for "word_slice" 1`] = `
Array [
  Object {
    "detail": "The returned words are those from \`start\` up to but not-including \`end\`. Indexes start at zero and a negative
end value means that all words after the start should be returned. There is an optional final parameter \`delimiters\`
which is string of characters used to split the text into words.",
    "examples": Array [
      Object {
        "output": "bee",
        "template": "@(word_slice(\\"bee cat dog\\", 0, 1))",
      },
      Object {
        "output": "bee cat",
        "template": "@(word_slice(\\"bee cat dog\\", 0, 2))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee cat dog\\", 1, -1))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee cat dog\\", 1))",
      },
      Object {
        "output": "dog",
        "template": "@(word_slice(\\"bee cat dog\\", 2, 3))",
      },
      Object {
        "output": "",
        "template": "@(word_slice(\\"bee cat dog\\", 3, 10))",
      },
      Object {
        "output": "cat dog",
        "template": "@(word_slice(\\"bee.*cat,dog\\", 1, -1, \\".*=|,\\"))",
      },
      Object {
        "output": "O'Flaggerty",
        "template": "@(word_slice(\\"O'Grady O'Flaggerty\\", 1, 2, \\" \\"))",
      },
    ],
    "signature": "word_slice(text, start, end [,delimiters])",
    "summary": "Extracts a sub-sequence of words from \`text\`.",
  },
]
`;

exports[`helpers filterOptions should filter options for "word_slice." 1`] = `Array []`;

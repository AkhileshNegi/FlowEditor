// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow helpers getDragStyle should return style object for drag selection box 1`] = `
Object {
  "height": 211,
  "left": 270,
  "top": 91,
  "width": 230,
}
`;

exports[`Flow instance methods onConnectorDrop should do NodeEditor work if the user is not dragging back 1`] = `
Array [
  Object {
    "originalAction": Object {
      "text": "",
      "type": "send_msg",
      "uuid": "04af465d-a0e7-47f0-b8b5-e843d6ed4537",
    },
    "originalNode": Object {
      "ghost": true,
      "inboundConnections": Object {
        "8c867b8f-f311-4b02-b36b-3688964bdc69": "059a8daa-0697-44a6-9486-2386cc417e9d",
      },
      "node": Object {
        "actions": Array [
          Object {
            "text": "",
            "type": "send_msg",
            "uuid": "04af465d-a0e7-47f0-b8b5-e843d6ed4537",
          },
        ],
        "exits": Array [
          Object {
            "destination_node_uuid": null,
            "uuid": "13499a54-8702-4210-9ce4-0ad968752581",
          },
        ],
        "uuid": "7966434b-6d38-4d8b-b01c-13d3d9aa593c",
      },
      "ui": Object {
        "position": Object {
          "left": 0,
          "top": 0,
        },
        "type": "execute_actions",
      },
    },
  },
]
`;

exports[`Flow render should render NodeEditor 1`] = `
Object {
  "plumberConnectExit": [MockFunction],
  "plumberRepaintForDuration": [MockFunction],
}
`;

exports[`Flow render should render NodeEditor 2`] = `
<div
  onDoubleClick={[Function]}
>
  <Canvas
    draggables={
      Array [
        Object {
          "ele": [Function],
          "position": Object {
            "left": 0,
            "top": 0,
          },
          "uuid": "4fac7935-d13b-4b36-bf15-98075dca822a",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 300,
            "top": 120,
          },
          "uuid": "46e8d603-8e5d-4435-97dd-1333291aafca",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 440,
            "top": 240,
          },
          "uuid": "bc978e00-2f3d-41f2-87c1-26b3f14e5925",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 200,
            "top": 340,
          },
          "uuid": "e2ecc8de-9774-4b74-a0dc-ca8aea123227",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 680,
            "top": 340,
          },
          "uuid": "533b64e2-5906-4d33-a8e9-64f1cb6c20dd",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 640,
            "top": 460,
          },
          "uuid": "882f8022-7256-4b1c-abf3-7b180f5e7e24",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 300,
            "top": 520,
          },
          "uuid": "059a8daa-0697-44a6-9486-2386cc417e9d",
        },
      ]
    }
    mergeEditorState={[MockFunction]}
    onDragging={[Function]}
    onUpdatePositions={[MockFunction]}
    uuid="6f87dde3-5df3-4935-8585-2656df068d61"
  >
    <Connect(NodeEditor)
      plumberConnectExit={[MockFunction]}
      plumberRepaintForDuration={[MockFunction]}
    />
  </Canvas>
</div>
`;

exports[`Flow render should render Simulator 1`] = `
<div
  onDoubleClick={[Function]}
>
  <Canvas
    draggables={
      Array [
        Object {
          "ele": [Function],
          "position": Object {
            "left": 0,
            "top": 0,
          },
          "uuid": "4fac7935-d13b-4b36-bf15-98075dca822a",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 300,
            "top": 120,
          },
          "uuid": "46e8d603-8e5d-4435-97dd-1333291aafca",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 440,
            "top": 240,
          },
          "uuid": "bc978e00-2f3d-41f2-87c1-26b3f14e5925",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 200,
            "top": 340,
          },
          "uuid": "e2ecc8de-9774-4b74-a0dc-ca8aea123227",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 680,
            "top": 340,
          },
          "uuid": "533b64e2-5906-4d33-a8e9-64f1cb6c20dd",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 640,
            "top": 460,
          },
          "uuid": "882f8022-7256-4b1c-abf3-7b180f5e7e24",
        },
        Object {
          "ele": [Function],
          "position": Object {
            "left": 300,
            "top": 520,
          },
          "uuid": "059a8daa-0697-44a6-9486-2386cc417e9d",
        },
      ]
    }
    mergeEditorState={[MockFunction]}
    onDragging={[Function]}
    onUpdatePositions={[MockFunction]}
    uuid="44f05c10-0ec0-41ab-aed7-c65267337df7"
  >
    <Connect(Simulator)
      Activity={
        Object {
          "clearSimulation": [MockFunction],
          "deregister": [MockFunction],
          "getActiveCount": [MockFunction],
          "getActivity": [MockFunction],
          "getPathCount": [MockFunction],
          "notifyListeners": [MockFunction],
          "registerListener": [MockFunction],
          "setSimulation": [MockFunction],
        }
      }
    />
  </Canvas>
</div>
`;

exports[`Flow render should render dragNode 1`] = `
<Connect(NodeComp)
  Activity={
    Object {
      "clearSimulation": [MockFunction],
      "deregister": [MockFunction],
      "getActiveCount": [MockFunction],
      "getActivity": [MockFunction],
      "getPathCount": [MockFunction],
      "notifyListeners": [MockFunction],
      "registerListener": [MockFunction],
      "setSimulation": [MockFunction],
    }
  }
  data-spec="ghost-node"
  ghost={true}
  key="666613f2-2d4f-432c-a707-929481961e98"
  nodeUUID="666613f2-2d4f-432c-a707-929481961e98"
  plumberConnectExit={[MockFunction]}
  plumberMakeSource={[MockFunction]}
  plumberMakeTarget={[MockFunction]}
  plumberRecalculate={[MockFunction]}
  plumberRemove={[MockFunction]}
  plumberRepaintForDuration={[MockFunction]}
  selected={false}
/>
`;

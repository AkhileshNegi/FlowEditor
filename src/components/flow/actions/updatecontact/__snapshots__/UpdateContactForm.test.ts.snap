// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UpdateContactForm render initial for channel 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "disabled": false,
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="set_contact_field"
  title="Update Contact"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "set_contact_name",
          "set_contact_language",
          "set_contact_channel",
        ],
        "component": [Function],
        "description": "Update the contact",
        "form": undefined,
        "name": "Update Contact",
        "type": "set_contact_field",
      }
    }
    onChange={[MockFunction]}
  />
  <p>
    Select what to update
  </p>
  <AssetSelector
    additionalOptions={
      Array [
        Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
        Object {
          "id": "language",
          "name": "Language",
          "type": "property",
        },
        Object {
          "id": "channel",
          "name": "Channel",
          "type": "property",
        },
      ]
    }
    createAssetFromInput={[Function]}
    createPrefix="Create Contact Field: "
    entry={
      Object {
        "value": Object {
          "id": "channel",
          "name": "Channel",
          "type": "property",
        },
      }
    }
    name="Contact Field"
    onAssetCreated={[Function]}
    onChange={[Function]}
    searchable={true}
    sortFunction={[Function]}
  />
  <div
    className="value"
  >
    <AssetSelector
      clearable={true}
      entry={
        Object {
          "value": Object {
            "id": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
            "name": "Twilio Channel",
            "type": "language",
          },
        }
      }
      key="select_channel"
      name="Channel"
      onChange={[Function]}
      placeholder="Select the channel to use for this contact"
      searchable={true}
    />
  </div>
</Dialog>
`;

exports[`UpdateContactForm render initial for field 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "disabled": false,
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="set_contact_field"
  title="Update Contact"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "set_contact_name",
          "set_contact_language",
          "set_contact_channel",
        ],
        "component": [Function],
        "description": "Update the contact",
        "form": undefined,
        "name": "Update Contact",
        "type": "set_contact_field",
      }
    }
    onChange={[MockFunction]}
  />
  <p>
    Select what to update
  </p>
  <AssetSelector
    additionalOptions={
      Array [
        Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
        Object {
          "id": "language",
          "name": "Language",
          "type": "property",
        },
        Object {
          "id": "channel",
          "name": "Channel",
          "type": "property",
        },
      ]
    }
    createAssetFromInput={[Function]}
    createPrefix="Create Contact Field: "
    entry={
      Object {
        "value": Object {
          "id": "age",
          "name": "Age",
          "type": "field",
        },
      }
    }
    name="Contact Field"
    onAssetCreated={[Function]}
    onChange={[Function]}
    searchable={true}
    sortFunction={[Function]}
  />
  <div
    className="value"
  >
    <Connect(TextInputElement)
      autocomplete={true}
      entry={
        Object {
          "value": "25",
        }
      }
      focus={true}
      name="Field Value"
      onChange={[Function]}
      onFieldFailures={[Function]}
      placeholder="Enter a new value for Age"
    />
  </div>
</Dialog>
`;

exports[`UpdateContactForm render initial for language 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "disabled": false,
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="set_contact_field"
  title="Update Contact"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "set_contact_name",
          "set_contact_language",
          "set_contact_channel",
        ],
        "component": [Function],
        "description": "Update the contact",
        "form": undefined,
        "name": "Update Contact",
        "type": "set_contact_field",
      }
    }
    onChange={[MockFunction]}
  />
  <p>
    Select what to update
  </p>
  <AssetSelector
    additionalOptions={
      Array [
        Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
        Object {
          "id": "language",
          "name": "Language",
          "type": "property",
        },
        Object {
          "id": "channel",
          "name": "Channel",
          "type": "property",
        },
      ]
    }
    createAssetFromInput={[Function]}
    createPrefix="Create Contact Field: "
    entry={
      Object {
        "value": Object {
          "id": "language",
          "name": "Language",
          "type": "property",
        },
      }
    }
    name="Contact Field"
    onAssetCreated={[Function]}
    onChange={[Function]}
    searchable={true}
    sortFunction={[Function]}
  />
  <div
    className="value"
  >
    <AssetSelector
      clearable={true}
      entry={
        Object {
          "value": Object {
            "id": "eng",
            "name": "eng",
            "type": "language",
          },
        }
      }
      key="select_language"
      name="Language"
      onChange={[Function]}
      placeholder="Select the language to use for this contact"
      searchable={true}
    />
  </div>
</Dialog>
`;

exports[`UpdateContactForm render initial for name 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "disabled": false,
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="set_contact_field"
  title="Update Contact"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "set_contact_name",
          "set_contact_language",
          "set_contact_channel",
        ],
        "component": [Function],
        "description": "Update the contact",
        "form": undefined,
        "name": "Update Contact",
        "type": "set_contact_field",
      }
    }
    onChange={[MockFunction]}
  />
  <p>
    Select what to update
  </p>
  <AssetSelector
    additionalOptions={
      Array [
        Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
        Object {
          "id": "language",
          "name": "Language",
          "type": "property",
        },
        Object {
          "id": "channel",
          "name": "Channel",
          "type": "property",
        },
      ]
    }
    createAssetFromInput={[Function]}
    createPrefix="Create Contact Field: "
    entry={
      Object {
        "value": Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
      }
    }
    name="Contact Field"
    onAssetCreated={[Function]}
    onChange={[Function]}
    searchable={true}
    sortFunction={[Function]}
  />
  <div
    className="value"
  >
    <Connect(TextInputElement)
      autocomplete={true}
      entry={
        Object {
          "value": "Jane Goodall",
        }
      }
      focus={true}
      name="Name"
      onChange={[Function]}
      onFieldFailures={[Function]}
      placeholder="Enter a new name for the contact"
    />
  </div>
</Dialog>
`;

exports[`UpdateContactForm render should render an empty form with different action 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "disabled": true,
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="set_contact_field"
  title="Update Contact"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "set_contact_name",
          "set_contact_language",
          "set_contact_channel",
        ],
        "component": [Function],
        "description": "Update the contact",
        "form": undefined,
        "name": "Update Contact",
        "type": "set_contact_field",
      }
    }
    onChange={[MockFunction]}
  />
  <p>
    Select what to update
  </p>
  <AssetSelector
    additionalOptions={
      Array [
        Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
        Object {
          "id": "language",
          "name": "Language",
          "type": "property",
        },
        Object {
          "id": "channel",
          "name": "Channel",
          "type": "property",
        },
      ]
    }
    createAssetFromInput={[Function]}
    createPrefix="Create Contact Field: "
    entry={
      Object {
        "value": Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
      }
    }
    name="Contact Field"
    onAssetCreated={[Function]}
    onChange={[Function]}
    searchable={true}
    sortFunction={[Function]}
  />
  <div
    className="value"
  >
    <Connect(TextInputElement)
      autocomplete={true}
      entry={
        Object {
          "value": "",
        }
      }
      focus={true}
      name="Name"
      onChange={[Function]}
      onFieldFailures={[Function]}
      placeholder="Enter a new name for the contact"
    />
  </div>
</Dialog>
`;

exports[`UpdateContactForm render should render an empty form with no action 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "disabled": true,
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="set_contact_field"
  title="Update Contact"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "set_contact_name",
          "set_contact_language",
          "set_contact_channel",
        ],
        "component": [Function],
        "description": "Update the contact",
        "form": undefined,
        "name": "Update Contact",
        "type": "set_contact_field",
      }
    }
    onChange={[MockFunction]}
  />
  <p>
    Select what to update
  </p>
  <AssetSelector
    additionalOptions={
      Array [
        Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
        Object {
          "id": "language",
          "name": "Language",
          "type": "property",
        },
        Object {
          "id": "channel",
          "name": "Channel",
          "type": "property",
        },
      ]
    }
    createAssetFromInput={[Function]}
    createPrefix="Create Contact Field: "
    entry={
      Object {
        "value": Object {
          "id": "name",
          "name": "Name",
          "type": "property",
        },
      }
    }
    name="Contact Field"
    onAssetCreated={[Function]}
    onChange={[Function]}
    searchable={true}
    sortFunction={[Function]}
  />
  <div
    className="value"
  >
    <Connect(TextInputElement)
      autocomplete={true}
      entry={
        Object {
          "value": "",
        }
      }
      focus={true}
      name="Name"
      onChange={[Function]}
      onFieldFailures={[Function]}
      placeholder="Enter a new name for the contact"
    />
  </div>
</Dialog>
`;

exports[`UpdateContactForm should allow switching from router to channel 1`] = `
Object {
  "channel": Object {
    "validationFailures": Array [],
    "value": Object {
      "id": "channel_id",
      "name": "Channel Name",
      "type": "channel",
    },
  },
  "field": Object {
    "value": Object {
      "id": "channel",
      "name": "Channel",
      "type": "property",
    },
  },
  "fieldValue": Object {
    "value": "",
  },
  "language": Object {
    "value": null,
  },
  "name": Object {
    "value": "",
  },
  "type": "set_contact_channel",
  "valid": true,
}
`;

exports[`UpdateContactForm should allow switching from router to channel 2`] = `
Array [
  Object {
    "channel": Object {
      "name": "Channel Name",
      "uuid": "channel_id",
    },
    "type": "set_contact_channel",
    "uuid": "e0bc3776-792f-49d2-b4be-48be2cf8159a",
  },
  [Function],
]
`;

exports[`UpdateContactForm should allow switching from router to contact name 1`] = `
Array [
  Object {
    "name": "Rowan Seymour",
    "type": "set_contact_name",
    "uuid": "42ebf1d0-a43e-4ba6-9577-c863b20c88c4",
  },
  [Function],
]
`;

exports[`UpdateContactForm should allow switching from router to field value 1`] = `
Object {
  "channel": Object {
    "value": null,
  },
  "field": Object {
    "value": Object {
      "id": "birthday",
      "name": "Birthday",
      "type": "field",
    },
  },
  "fieldValue": Object {
    "validationFailures": Array [],
    "value": "12/25/00",
  },
  "language": Object {
    "value": null,
  },
  "name": Object {
    "value": "",
  },
  "type": "set_contact_field",
  "valid": true,
}
`;

exports[`UpdateContactForm should allow switching from router to field value 2`] = `
Array [
  Object {
    "field": Object {
      "key": "birthday",
      "name": "Birthday",
    },
    "type": "set_contact_field",
    "uuid": "70ac6ea6-803a-4c33-81c7-dc26803c313f",
    "value": "12/25/00",
  },
  [Function],
]
`;

exports[`UpdateContactForm should allow switching from router to language 1`] = `
Object {
  "channel": Object {
    "value": null,
  },
  "field": Object {
    "value": Object {
      "id": "language",
      "name": "Language",
      "type": "property",
    },
  },
  "fieldValue": Object {
    "value": "",
  },
  "language": Object {
    "validationFailures": Array [],
    "value": "e",
  },
  "name": Object {
    "value": "",
  },
  "type": "set_contact_language",
  "valid": true,
}
`;

exports[`UpdateContactForm should allow switching from router to language 2`] = `
Array [
  Object {
    "language": undefined,
    "type": "set_contact_language",
    "uuid": "e67ce051-f3e4-4c42-807b-e393df5fa382",
  },
  [Function],
]
`;

exports[`UpdateContactForm updates should update channel 1`] = `
Object {
  "channel": Object {
    "validationFailures": Array [],
    "value": Object {
      "id": "channel_id",
      "name": "Channel Name",
      "type": "channel",
    },
  },
  "field": Object {
    "value": Object {
      "id": "channel",
      "name": "Channel",
      "type": "property",
    },
  },
  "fieldValue": Object {
    "value": "25",
  },
  "language": Object {
    "value": null,
  },
  "name": Object {
    "value": "",
  },
  "type": "set_contact_channel",
  "valid": true,
}
`;

exports[`UpdateContactForm updates should update channel 2`] = `
Array [
  Object {
    "name": "Rowan Seymour",
    "type": "set_contact_name",
    "uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
  },
  [Function],
]
`;

exports[`UpdateContactForm updates should update field value 1`] = `
Object {
  "channel": Object {
    "value": null,
  },
  "field": Object {
    "value": Object {
      "id": "birthday",
      "name": "Birthday",
      "type": "field",
    },
  },
  "fieldValue": Object {
    "validationFailures": Array [],
    "value": "12/25/00",
  },
  "language": Object {
    "value": null,
  },
  "name": Object {
    "value": "",
  },
  "type": "set_contact_field",
  "valid": true,
}
`;

exports[`UpdateContactForm updates should update field value 2`] = `
Array [
  Object {
    "name": "Rowan Seymour",
    "type": "set_contact_name",
    "uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
  },
  [Function],
]
`;

exports[`UpdateContactForm updates should update language 1`] = `
Object {
  "channel": Object {
    "value": null,
  },
  "field": Object {
    "value": Object {
      "id": "language",
      "name": "Language",
      "type": "property",
    },
  },
  "fieldValue": Object {
    "value": "25",
  },
  "language": Object {
    "validationFailures": Array [],
    "value": "e",
  },
  "name": Object {
    "value": "",
  },
  "type": "set_contact_language",
  "valid": true,
}
`;

exports[`UpdateContactForm updates should update language 2`] = `
Array [
  Object {
    "name": "Rowan Seymour",
    "type": "set_contact_name",
    "uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
  },
  [Function],
]
`;

exports[`UpdateContactForm updates should update name 1`] = `
Object {
  "channel": Object {
    "value": null,
  },
  "field": Object {
    "value": Object {
      "id": "name",
      "name": "Name",
      "type": "property",
    },
  },
  "fieldValue": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "language": Object {
    "value": null,
  },
  "name": Object {
    "value": "Rowan Seymour",
  },
  "type": "set_contact_name",
  "valid": true,
}
`;

exports[`UpdateContactForm updates should update name 2`] = `
Array [
  Object {
    "name": "Rowan Seymour",
    "type": "set_contact_name",
    "uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
  },
  [Function],
]
`;

exports[`UpdateContactForm updates should validate before saving 1`] = `
Object {
  "channel": Object {
    "validationFailures": Array [
      Object {
        "message": "Channel is required",
      },
    ],
    "value": null,
  },
  "field": Object {
    "value": Object {
      "id": "channel",
      "name": "Channel",
      "type": "property",
    },
  },
  "fieldValue": Object {
    "value": "25",
  },
  "language": Object {
    "value": null,
  },
  "name": Object {
    "value": "",
  },
  "type": "set_contact_channel",
  "valid": false,
}
`;

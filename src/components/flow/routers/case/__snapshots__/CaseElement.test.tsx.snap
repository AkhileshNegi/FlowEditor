// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CaseElement operator changes should handle updates 1`] = `
Object {
  "argument": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "errors": Array [],
  "exitName": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "exitNameEdited": false,
  "max": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "min": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "operatorConfig": Object {
    "operands": 1,
    "type": "has_any_word",
    "verboseName": "has any of the words",
    "visibility": Array [
      "M",
      "S",
    ],
  },
  "valid": true,
}
`;

exports[`CaseElement operator changes should should set arguments for numeric range 1`] = `
Object {
  "argument": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "errors": Array [],
  "exitName": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "exitNameEdited": false,
  "max": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "min": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "operatorConfig": Object {
    "operands": 2,
    "type": "has_number_between",
    "verboseName": "has a number between",
  },
  "valid": true,
}
`;

exports[`CaseElement operator changes shouldnt update exit if it has been edited 1`] = `
Object {
  "argument": Object {
    "validationFailures": Array [
      Object {
        "message": "Value is required",
      },
    ],
    "value": "",
  },
  "errors": Array [],
  "exitName": Object {
    "validationFailures": Array [],
    "value": "My Exit Name",
  },
  "exitNameEdited": true,
  "max": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "min": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "operatorConfig": Object {
    "operands": 1,
    "type": "has_any_word",
    "verboseName": "has any of the words",
    "visibility": Array [
      "M",
      "S",
    ],
  },
  "valid": false,
}
`;

exports[`CaseElement render renders no argument rules 1`] = `
<FormElement
  __className="group"
  data-spec="case-form"
  kaseError={false}
  name="case_29b18c7e-c232-414c-9fc0-2e0b6260d9ca"
>
  <div
    className="kase select-medium"
  >
    <span
      className="fe-chevrons-expand dndIcon"
    />
    <div
      className="choice"
    >
      <StateManager
        data-spec="operator-list"
        defaultInputValue=""
        defaultMenuIsOpen={false}
        defaultValue={null}
        getOptionLabel={[Function]}
        getOptionValue={[Function]}
        isClearable={false}
        isSearchable={false}
        menuPlacement="auto"
        name="operator"
        onChange={[Function]}
        options={
          Array [
            Object {
              "operands": 1,
              "type": "has_any_word",
              "verboseName": "has any of the words",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_all_words",
              "verboseName": "has all of the words",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_phrase",
              "verboseName": "has the phrase",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_only_phrase",
              "verboseName": "has only the phrase",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_beginning",
              "verboseName": "starts with",
            },
            Object {
              "categoryName": "Has Text",
              "operands": 0,
              "type": "has_text",
              "verboseName": "has some text",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "categoryName": "Has Number",
              "operands": 0,
              "type": "has_number",
              "verboseName": "has a number",
            },
            Object {
              "operands": 2,
              "type": "has_number_between",
              "verboseName": "has a number between",
            },
            Object {
              "operands": 1,
              "type": "has_number_lt",
              "verboseName": "has a number below",
            },
            Object {
              "operands": 1,
              "type": "has_number_lte",
              "verboseName": "has a number at or below",
            },
            Object {
              "operands": 1,
              "type": "has_number_eq",
              "verboseName": "has a number equal to",
            },
            Object {
              "operands": 1,
              "type": "has_number_gte",
              "verboseName": "has a number at or above",
            },
            Object {
              "operands": 1,
              "type": "has_number_gt",
              "verboseName": "has a number above",
            },
            Object {
              "categoryName": "Has Date",
              "operands": 0,
              "type": "has_date",
              "verboseName": "has a date",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_date_lt",
              "verboseName": "has a date before",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_date_eq",
              "verboseName": "has a date equal to",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_date_gt",
              "verboseName": "has a date after",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "categoryName": "Has Phone",
              "operands": 0,
              "type": "has_phone",
              "verboseName": "has a phone number",
            },
            Object {
              "categoryName": "Has Email",
              "operands": 0,
              "type": "has_email",
              "verboseName": "has an email",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "categoryName": "Not Empty",
              "operands": 0,
              "type": "has_value",
              "verboseName": "is not empty",
            },
            Object {
              "operands": 1,
              "type": "has_pattern",
              "verboseName": "matches regex",
            },
          ]
        }
        styles={
          Object {
            "control": [Function],
            "indicatorsContainer": [Function],
            "menuList": [Function],
            "option": [Function],
            "singleValue": [Function],
            "valueContainer": [Function],
          }
        }
        value={
          Object {
            "categoryName": "Has Number",
            "operands": 0,
            "type": "has_number",
            "verboseName": "has a number",
          }
        }
      />
    </div>
    <div
      className="singleOperand"
    />
    <div
      className="categorizeAs"
    >
      categorize as
    </div>
    <div
      className="category"
    >
      <Connect(TextInputElement)
        data-spec="exit-input"
        entry={
          Object {
            "value": "",
          }
        }
        name="exitName"
        onChange={[Function]}
        showInvalid={false}
      />
    </div>
    <span
      className="fe-x removeIcon"
      onClick={[Function]}
    />
  </div>
</FormElement>
`;

exports[`CaseElement render should render empty case 1`] = `
<FormElement
  __className="group"
  data-spec="case-form"
  kaseError={false}
  name="case_29b18c7e-c232-414c-9fc0-2e0b6260d9ca"
>
  <div
    className="kase select-medium"
  >
    <span
      className="fe-chevrons-expand dndIcon"
    />
    <div
      className="choice"
    >
      <StateManager
        data-spec="operator-list"
        defaultInputValue=""
        defaultMenuIsOpen={false}
        defaultValue={null}
        getOptionLabel={[Function]}
        getOptionValue={[Function]}
        isClearable={false}
        isSearchable={false}
        menuPlacement="auto"
        name="operator"
        onChange={[Function]}
        options={
          Array [
            Object {
              "operands": 1,
              "type": "has_any_word",
              "verboseName": "has any of the words",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_all_words",
              "verboseName": "has all of the words",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_phrase",
              "verboseName": "has the phrase",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_only_phrase",
              "verboseName": "has only the phrase",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_beginning",
              "verboseName": "starts with",
            },
            Object {
              "categoryName": "Has Text",
              "operands": 0,
              "type": "has_text",
              "verboseName": "has some text",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "categoryName": "Has Number",
              "operands": 0,
              "type": "has_number",
              "verboseName": "has a number",
            },
            Object {
              "operands": 2,
              "type": "has_number_between",
              "verboseName": "has a number between",
            },
            Object {
              "operands": 1,
              "type": "has_number_lt",
              "verboseName": "has a number below",
            },
            Object {
              "operands": 1,
              "type": "has_number_lte",
              "verboseName": "has a number at or below",
            },
            Object {
              "operands": 1,
              "type": "has_number_eq",
              "verboseName": "has a number equal to",
            },
            Object {
              "operands": 1,
              "type": "has_number_gte",
              "verboseName": "has a number at or above",
            },
            Object {
              "operands": 1,
              "type": "has_number_gt",
              "verboseName": "has a number above",
            },
            Object {
              "categoryName": "Has Date",
              "operands": 0,
              "type": "has_date",
              "verboseName": "has a date",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_date_lt",
              "verboseName": "has a date before",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_date_eq",
              "verboseName": "has a date equal to",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "operands": 1,
              "type": "has_date_gt",
              "verboseName": "has a date after",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "categoryName": "Has Phone",
              "operands": 0,
              "type": "has_phone",
              "verboseName": "has a phone number",
            },
            Object {
              "categoryName": "Has Email",
              "operands": 0,
              "type": "has_email",
              "verboseName": "has an email",
              "visibility": Array [
                "M",
                "S",
              ],
            },
            Object {
              "categoryName": "Not Empty",
              "operands": 0,
              "type": "has_value",
              "verboseName": "is not empty",
            },
            Object {
              "operands": 1,
              "type": "has_pattern",
              "verboseName": "matches regex",
            },
          ]
        }
        styles={
          Object {
            "control": [Function],
            "indicatorsContainer": [Function],
            "menuList": [Function],
            "option": [Function],
            "singleValue": [Function],
            "valueContainer": [Function],
          }
        }
        value={
          Object {
            "operands": 1,
            "type": "has_any_word",
            "verboseName": "has any of the words",
            "visibility": Array [
              "M",
              "S",
            ],
          }
        }
      />
    </div>
    <div
      className="singleOperand"
    >
      <Connect(TextInputElement)
        autocomplete={true}
        data-spec="args-input"
        entry={
          Object {
            "value": "",
          }
        }
        name="arguments"
        onChange={[Function]}
      />
    </div>
    <div
      className="categorizeAs"
    >
      categorize as
    </div>
    <div
      className="category"
    >
      <Connect(TextInputElement)
        data-spec="exit-input"
        entry={
          Object {
            "value": "",
          }
        }
        name="exitName"
        onChange={[Function]}
        showInvalid={false}
      />
    </div>
    <span
      className="fe-x removeIcon"
      onClick={[Function]}
    />
  </div>
</FormElement>
`;

exports[`CaseElement update handles argument change 1`] = `
Object {
  "argument": Object {
    "validationFailures": Array [],
    "value": "Green",
  },
  "errors": Array [],
  "exitName": Object {
    "validationFailures": Array [],
    "value": "Green",
  },
  "exitNameEdited": false,
  "max": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "min": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "operatorConfig": Object {
    "operands": 1,
    "type": "has_any_word",
    "verboseName": "has any of the words",
    "visibility": Array [
      "M",
      "S",
    ],
  },
  "valid": true,
}
`;

exports[`CaseElement update handles multiple argument change 1`] = `
Object {
  "argument": Object {
    "validationFailures": Array [],
    "value": "",
  },
  "errors": Array [],
  "exitName": Object {
    "validationFailures": Array [],
    "value": "1 - 100",
  },
  "exitNameEdited": false,
  "max": Object {
    "validationFailures": Array [],
    "value": "100",
  },
  "min": Object {
    "validationFailures": Array [],
    "value": "1",
  },
  "operatorConfig": Object {
    "operands": 2,
    "type": "has_number_between",
    "verboseName": "has a number between",
  },
  "valid": true,
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RouterLocalizationForm initializes 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="wait_for_response"
  title="Spanish Category Names"
>
  <p
    data-spec="instructions"
  >
    When category names are referenced later in the flow, the appropriate language for the category will be used. If no translation is provided, the original text will be used.
  </p>
  <div
    className="translating_exit"
    key="generated_uuid_1"
  >
    <div
      className="translating_from"
      data-spec="exit-name"
    >
      Colors
    </div>
    <div
      className="translating_to"
    >
      <Connect(TextInputElement)
        data-spec="localize-exit"
        entry={
          Object {
            "value": "",
          }
        }
        name=""
        onChange={[Function]}
        placeholder="Spanish Translation"
        showLabel={false}
      />
    </div>
  </div>
  <div
    className="translating_exit"
    key="generated_uuid_2"
  >
    <div
      className="translating_from"
      data-spec="exit-name"
    >
      Other
    </div>
    <div
      className="translating_to"
    >
      <Connect(TextInputElement)
        data-spec="localize-exit"
        entry={
          Object {
            "value": Array [
              "Otro",
            ],
          }
        }
        name={
          Array [
            "Otro",
          ]
        }
        onChange={[Function]}
        placeholder="Spanish Translation"
        showLabel={false}
      />
    </div>
  </div>
</Dialog>
`;

exports[`RouterLocalizationForm should render 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="wait_for_response"
  title="Spanish Category Names"
>
  <p
    data-spec="instructions"
  >
    When category names are referenced later in the flow, the appropriate language for the category will be used. If no translation is provided, the original text will be used.
  </p>
  <div
    className="translating_exit"
    key="generated_uuid_1"
  >
    <div
      className="translating_from"
      data-spec="exit-name"
    >
      Colors
    </div>
    <div
      className="translating_to"
    >
      <Connect(TextInputElement)
        data-spec="localize-exit"
        entry={
          Object {
            "value": "",
          }
        }
        name=""
        onChange={[Function]}
        placeholder="Spanish Translation"
        showLabel={false}
      />
    </div>
  </div>
  <div
    className="translating_exit"
    key="generated_uuid_2"
  >
    <div
      className="translating_from"
      data-spec="exit-name"
    >
      Other
    </div>
    <div
      className="translating_to"
    >
      <Connect(TextInputElement)
        data-spec="localize-exit"
        entry={
          Object {
            "value": Array [
              "Otro",
            ],
          }
        }
        name={
          Array [
            "Otro",
          ]
        }
        onChange={[Function]}
        placeholder="Spanish Translation"
        showLabel={false}
      />
    </div>
  </div>
</Dialog>
`;

exports[`RouterLocalizationForm updates should save changes 1`] = `
Object {
  "cases": Array [
    Object {
      "arguments": Array [
        "Red, r, rolo, maroon",
      ],
      "exit_uuid": "generated_uuid_1",
      "type": "has_any_word",
      "uuid": "generated_uuid_3",
    },
  ],
  "exits": Array [
    Object {
      "destination_node_uuid": null,
      "name": "Roooojo!",
      "uuid": "generated_uuid_1",
    },
    Object {
      "destination_node_uuid": null,
      "name": Array [
        "Otro",
      ],
      "uuid": "generated_uuid_2",
    },
  ],
  "valid": true,
}
`;

exports[`RouterLocalizationForm updates should save changes 2`] = `
Array [
  "spa",
  Array [
    Object {
      "translations": Object {
        "name": "Roooojo!",
      },
      "uuid": "generated_uuid_1",
    },
    Object {
      "translations": Object {
        "name": Array [
          "Otro",
        ],
      },
      "uuid": "generated_uuid_2",
    },
    Object {
      "translations": Object {
        "arguments": Array [
          "Red, r, rolo, maroon",
        ],
      },
      "uuid": "generated_uuid_3",
    },
  ],
]
`;

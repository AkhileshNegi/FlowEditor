// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebhookRouterForm should render 1`] = `
<Flipper
  back={
    <Dialog
      buttons={
        Object {
          "primary": Object {
            "name": "Ok",
            "onClick": [Function],
          },
          "secondary": Object {
            "name": "Cancel",
            "onClick": [Function],
          },
        }
      }
      headerClass="call_webhook"
      headerIcon="fe-cog"
      headerStyle="barber"
      subtitle="Advanced Settings"
      title="Call Webhook"
    >
      <h4
        className="headers_title"
      >
        Headers
      </h4>
      <p
        className="info"
      >
        Add any additional headers below that you would like to send along with your request.
      </p>
      <FlipMovePropConverter
        delay={0}
        disableAllAnimations={false}
        duration={100}
        easing="ease-out"
        enterAnimation="elevator"
        getPosition={[Function]}
        leaveAnimation="elevator"
        maintainContainerHeight={false}
        staggerDelayBy={0}
        staggerDurationBy={0}
        typeName="div"
        verticalAlignment="top"
      >
        <div>
          <HeaderElement
            entry={
              Object {
                "value": Object {
                  "name": "",
                  "uuid": "generated_uuid_1",
                  "value": "",
                },
              }
            }
            index={0}
            onChange={[Function]}
            onRemove={[Function]}
          />
        </div>
      </FlipMovePropConverter>
    </Dialog>
  }
  front={
    <Dialog
      buttons={
        Object {
          "primary": Object {
            "name": "Ok",
            "onClick": [Function],
          },
          "secondary": Object {
            "name": "Cancel",
            "onClick": [Function],
          },
        }
      }
      headerClass="call_webhook"
      title="Call Webhook"
    >
      <TypeList
        __className=""
        initialType={
          Object {
            "aliases": Array [
              "split_by_webhook",
            ],
            "component": [Function],
            "description": "Call a webook",
            "form": undefined,
            "localization": [Function],
            "localizeableKeys": Array [
              "exits",
            ],
            "name": "Call Webhook",
            "type": "call_webhook",
          }
        }
        onChange={[MockFunction]}
      />
      <div
        className="method"
      >
        <SelectElement
          entry={
            Object {
              "value": Object {
                "label": "GET",
                "value": "GET",
              },
            }
          }
          name="MethodMap"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "GET",
                "value": "GET",
              },
              Object {
                "label": "POST",
                "value": "POST",
              },
              Object {
                "label": "PUT",
                "value": "PUT",
              },
            ]
          }
        />
      </div>
      <div
        className="url"
      >
        <Connect(TextInputElement)
          autocomplete={true}
          entry={
            Object {
              "value": "",
            }
          }
          name="URL"
          onChange={[Function]}
          placeholder="Enter a URL"
        />
      </div>
      <div
        className="instructions"
      >
        <p>
          <React.Fragment>
            If you need to, you can also
             
            <span
              className="link"
              onClick={[Function]}
            >
              configure the headers
            </span>
             
            of your request.
             
          </React.Fragment>
          If your server responds with JSON, each property will be added to the Flow.
        </p>
        <pre
          className="code"
        >
          { "product": "Solar Charging Kit", "stock level": 32 }
        </pre>
        <p>
          In this example
           
          <span
            className="example"
          >
            @webhook.json.product
          </span>
           and
           
          <span
            className="example"
          >
            @webhook.json["stock level"]
          </span>
           
          would be available in all future steps.
        </p>
      </div>
    </Dialog>
  }
/>
`;

exports[`WebhookRouterForm updates should save changes 1`] = `
Object {
  "headers": Array [
    Object {
      "value": Object {
        "name": "",
        "uuid": "generated_uuid_2",
        "value": "",
      },
    },
  ],
  "method": Object {
    "value": "POST",
  },
  "postBody": Object {
    "value": "Post Body",
  },
  "url": Object {
    "value": "http://domain.com/",
  },
  "valid": true,
}
`;

exports[`WebhookRouterForm updates should save changes 2`] = `
Object {
  "inboundConnections": Object {},
  "node": Object {
    "actions": Array [
      Object {
        "body": "Post Body",
        "headers": Object {},
        "method": undefined,
        "type": "call_webhook",
        "url": "http://domain.com/",
        "uuid": "generated_uuid_3",
      },
    ],
    "exits": Array [
      Object {
        "destination_node_uuid": null,
        "name": "Success",
        "uuid": "generated_uuid_4",
      },
      Object {
        "destination_node_uuid": null,
        "name": "Failed",
        "uuid": "generated_uuid_5",
      },
      Object {
        "destination_node_uuid": null,
        "name": "Unreachable",
        "uuid": "generated_uuid_6",
      },
    ],
    "router": Object {
      "cases": Array [
        Object {
          "arguments": Array [
            "success",
          ],
          "exit_uuid": "generated_uuid_4",
          "type": "has_webhook_status",
          "uuid": "generated_uuid_7",
        },
        Object {
          "arguments": Array [
            "response_error",
          ],
          "exit_uuid": "generated_uuid_5",
          "type": "has_webhook_status",
          "uuid": "generated_uuid_8",
        },
        Object {
          "arguments": Array [
            "connection_error",
          ],
          "exit_uuid": "generated_uuid_6",
          "type": "has_webhook_status",
          "uuid": "generated_uuid_9",
        },
      ],
      "default_exit_uuid": "generated_uuid_5",
      "operand": "@run.webhook",
      "type": "switch",
    },
    "uuid": "c6f278d5-2741-4c0a-880c-52a07dea91a5",
    "wait": null,
  },
  "ui": Object {
    "position": null,
    "type": "split_by_webhook",
  },
}
`;

const { ProvidePlugin, LoaderOptionsPlugin } = require('webpack');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const paths = require('./paths');

const postCSSLoader = {
    loader: 'postcss-loader',
    options: {
        ident: 'postcss',
        plugins: () => [require('autoprefixer')()]
    }
};

module.exports = {
    output: {
        filename: 'floweditor.js'
    },
    resolve: {
        extensions: ['.ts', '.tsx', '.js']
    },
    plugins: [
        new ProvidePlugin({
            $: 'jquery',
            jQuery: 'jquery'
        }),
        new ExtractTextPlugin('styles.css'),
        new LoaderOptionsPlugin({
            minimize: true,
            debug: false
        })
    ],
    module: {
        rules: [
            {
                test: /\.woff(2)?(\?[a-z0-9]+)?$/,
                loader: 'url-loader?limit=10000&mimetype=application/font-woff'
            },
            {
                test: /\.(ttf|eot|svg)(\?[a-z0-9]+)?$/,
                loader: 'file-loader',
                options: {
                    name: 'fonts/[hash].[ext]'
                }
            },
            {
                test: /\.scss$/,
                include: paths.component,
                use: ['css-hot-loader'].concat(
                    ExtractTextPlugin.extract({
                        fallback: 'style-loader',
                        use: [
                            {
                                loader: 'typings-for-css-modules-loader',
                                query: {
                                    modules: true,
                                    banner:
                                        '// This file is automatically generated by the "typings-for-css-modules" Webpack loader.\n// https://github.com/Jimdo/typings-for-css-modules-loader\n',
                                    namedExport: true,
                                    camelCase: true,
                                    sourceMap: true,
                                    importLoaders: 2,
                                    localIdentName: '[name]__[local]___[hash:base64:5]'
                                }
                            },
                            postCSSLoader,
                            'sass-loader'
                        ]
                    })
                )
            },
            {
                test: /\.scss$/,
                exclude: paths.component,
                use: [
                    { loader: 'style-loader' },
                    { loader: 'css-loader' },
                    postCSSLoader,
                    { loader: 'sass-loader' }
                ]
            },
            {
                test: /\.css$/,
                exclude: paths.component,
                use: ['style-loader', 'css-loader']
            },
            {
                test: /\.tsx?$/,
                use: [
                    {
                        loader: 'awesome-typescript-loader',
                        options: {
                            useBabel: true,
                            useCache: true,
                            silent: process.argv.indexOf('--json') !== -1
                        }
                    }
                ],
                exclude: /node_modules/
            }
        ]
    }
};
